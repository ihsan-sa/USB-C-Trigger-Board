
USB_C_Light_Simple_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e00  08007e00  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007e00  08007e00  00009068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007e00  08007e00  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000068  08007e70  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08007e70  0000932c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ce5  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d07  00000000  00000000  0001dd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00020a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00021c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bad  00000000  00000000  00022a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f37  00000000  00000000  000385fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f78  00000000  00000000  0004f531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d24a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  000d24ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d6e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007548 	.word	0x08007548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08007548 	.word	0x08007548

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <_print_max_curr>:
static void _print_max_curr(uint8_t curr_val);
uint8_t pdo_voltages[13];
uint8_t pdos[13];
uint8_t pdo_idx;

void _print_max_curr(uint8_t curr_val){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
	switch(curr_val){
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b0f      	cmp	r3, #15
 800041a:	d854      	bhi.n	80004c6 <_print_max_curr+0xbe>
 800041c:	009a      	lsls	r2, r3, #2
 800041e:	4b2c      	ldr	r3, [pc, #176]	@ (80004d0 <_print_max_curr+0xc8>)
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	469f      	mov	pc, r3
	case 0: printf("0.00A to 1.24A"); break;
 8000426:	4b2b      	ldr	r3, [pc, #172]	@ (80004d4 <_print_max_curr+0xcc>)
 8000428:	0018      	movs	r0, r3
 800042a:	f006 f951 	bl	80066d0 <iprintf>
 800042e:	e04a      	b.n	80004c6 <_print_max_curr+0xbe>
	case 1: printf("1.25A to 1.49A"); break;
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <_print_max_curr+0xd0>)
 8000432:	0018      	movs	r0, r3
 8000434:	f006 f94c 	bl	80066d0 <iprintf>
 8000438:	e045      	b.n	80004c6 <_print_max_curr+0xbe>
	case 2: printf("1.5A to 1.74A"); break;
 800043a:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <_print_max_curr+0xd4>)
 800043c:	0018      	movs	r0, r3
 800043e:	f006 f947 	bl	80066d0 <iprintf>
 8000442:	e040      	b.n	80004c6 <_print_max_curr+0xbe>
	case 3: printf("1.750A to 1.99A"); break;
 8000444:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <_print_max_curr+0xd8>)
 8000446:	0018      	movs	r0, r3
 8000448:	f006 f942 	bl	80066d0 <iprintf>
 800044c:	e03b      	b.n	80004c6 <_print_max_curr+0xbe>
	case 4: printf("2.00A to 2.24A"); break;
 800044e:	4b25      	ldr	r3, [pc, #148]	@ (80004e4 <_print_max_curr+0xdc>)
 8000450:	0018      	movs	r0, r3
 8000452:	f006 f93d 	bl	80066d0 <iprintf>
 8000456:	e036      	b.n	80004c6 <_print_max_curr+0xbe>
	case 5: printf("2.25A to 2.49A"); break;
 8000458:	4b23      	ldr	r3, [pc, #140]	@ (80004e8 <_print_max_curr+0xe0>)
 800045a:	0018      	movs	r0, r3
 800045c:	f006 f938 	bl	80066d0 <iprintf>
 8000460:	e031      	b.n	80004c6 <_print_max_curr+0xbe>
	case 6: printf("2.5A to 2.74A"); break;
 8000462:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <_print_max_curr+0xe4>)
 8000464:	0018      	movs	r0, r3
 8000466:	f006 f933 	bl	80066d0 <iprintf>
 800046a:	e02c      	b.n	80004c6 <_print_max_curr+0xbe>
	case 7: printf("2.75A to 2.99A"); break;
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <_print_max_curr+0xe8>)
 800046e:	0018      	movs	r0, r3
 8000470:	f006 f92e 	bl	80066d0 <iprintf>
 8000474:	e027      	b.n	80004c6 <_print_max_curr+0xbe>
	case 8: printf("3.00A to 3.24A"); break;
 8000476:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <_print_max_curr+0xec>)
 8000478:	0018      	movs	r0, r3
 800047a:	f006 f929 	bl	80066d0 <iprintf>
 800047e:	e022      	b.n	80004c6 <_print_max_curr+0xbe>
	case 9: printf("3.25A to 3.49A"); break;
 8000480:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <_print_max_curr+0xf0>)
 8000482:	0018      	movs	r0, r3
 8000484:	f006 f924 	bl	80066d0 <iprintf>
 8000488:	e01d      	b.n	80004c6 <_print_max_curr+0xbe>
	case 10: printf("3.50A to 3.74A"); break;
 800048a:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <_print_max_curr+0xf4>)
 800048c:	0018      	movs	r0, r3
 800048e:	f006 f91f 	bl	80066d0 <iprintf>
 8000492:	e018      	b.n	80004c6 <_print_max_curr+0xbe>
	case 11: printf("3.75A to 3.99A"); break;
 8000494:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <_print_max_curr+0xf8>)
 8000496:	0018      	movs	r0, r3
 8000498:	f006 f91a 	bl	80066d0 <iprintf>
 800049c:	e013      	b.n	80004c6 <_print_max_curr+0xbe>
	case 12: printf("4.00A to 4.24A"); break;
 800049e:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <_print_max_curr+0xfc>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f006 f915 	bl	80066d0 <iprintf>
 80004a6:	e00e      	b.n	80004c6 <_print_max_curr+0xbe>
	case 13: printf("4.25A to 4.49A"); break;
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <_print_max_curr+0x100>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f006 f910 	bl	80066d0 <iprintf>
 80004b0:	e009      	b.n	80004c6 <_print_max_curr+0xbe>
	case 14: printf("4.50A to 4.99A"); break;
 80004b2:	4b16      	ldr	r3, [pc, #88]	@ (800050c <_print_max_curr+0x104>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f006 f90b 	bl	80066d0 <iprintf>
 80004ba:	e004      	b.n	80004c6 <_print_max_curr+0xbe>
	case 15: printf("5.00A or higher"); break;
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <_print_max_curr+0x108>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f006 f906 	bl	80066d0 <iprintf>
 80004c4:	46c0      	nop			@ (mov r8, r8)
	}
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	08007b70 	.word	0x08007b70
 80004d4:	08007560 	.word	0x08007560
 80004d8:	08007570 	.word	0x08007570
 80004dc:	08007580 	.word	0x08007580
 80004e0:	08007590 	.word	0x08007590
 80004e4:	080075a0 	.word	0x080075a0
 80004e8:	080075b0 	.word	0x080075b0
 80004ec:	080075c0 	.word	0x080075c0
 80004f0:	080075d0 	.word	0x080075d0
 80004f4:	080075e0 	.word	0x080075e0
 80004f8:	080075f0 	.word	0x080075f0
 80004fc:	08007600 	.word	0x08007600
 8000500:	08007610 	.word	0x08007610
 8000504:	08007620 	.word	0x08007620
 8000508:	08007630 	.word	0x08007630
 800050c:	08007640 	.word	0x08007640
 8000510:	08007650 	.word	0x08007650

08000514 <_print_curr_lim>:

void _print_curr_lim(uint8_t curr_val){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	0002      	movs	r2, r0
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	701a      	strb	r2, [r3, #0]
	switch(curr_val){
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d854      	bhi.n	80005d2 <_print_curr_lim+0xbe>
 8000528:	009a      	lsls	r2, r3, #2
 800052a:	4b2c      	ldr	r3, [pc, #176]	@ (80005dc <_print_curr_lim+0xc8>)
 800052c:	18d3      	adds	r3, r2, r3
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	469f      	mov	pc, r3
	case 0: printf("1.00A"); break;
 8000532:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <_print_curr_lim+0xcc>)
 8000534:	0018      	movs	r0, r3
 8000536:	f006 f8cb 	bl	80066d0 <iprintf>
 800053a:	e04a      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 1: printf("1.25A"); break;
 800053c:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <_print_curr_lim+0xd0>)
 800053e:	0018      	movs	r0, r3
 8000540:	f006 f8c6 	bl	80066d0 <iprintf>
 8000544:	e045      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 2: printf("1.50A"); break;
 8000546:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <_print_curr_lim+0xd4>)
 8000548:	0018      	movs	r0, r3
 800054a:	f006 f8c1 	bl	80066d0 <iprintf>
 800054e:	e040      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 3: printf("1.75A"); break;
 8000550:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <_print_curr_lim+0xd8>)
 8000552:	0018      	movs	r0, r3
 8000554:	f006 f8bc 	bl	80066d0 <iprintf>
 8000558:	e03b      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 4: printf("2.00A"); break;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <_print_curr_lim+0xdc>)
 800055c:	0018      	movs	r0, r3
 800055e:	f006 f8b7 	bl	80066d0 <iprintf>
 8000562:	e036      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 5: printf("2.25A"); break;
 8000564:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <_print_curr_lim+0xe0>)
 8000566:	0018      	movs	r0, r3
 8000568:	f006 f8b2 	bl	80066d0 <iprintf>
 800056c:	e031      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 6: printf("2.50A"); break;
 800056e:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <_print_curr_lim+0xe4>)
 8000570:	0018      	movs	r0, r3
 8000572:	f006 f8ad 	bl	80066d0 <iprintf>
 8000576:	e02c      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 7: printf("2.75A"); break;
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <_print_curr_lim+0xe8>)
 800057a:	0018      	movs	r0, r3
 800057c:	f006 f8a8 	bl	80066d0 <iprintf>
 8000580:	e027      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 8: printf("3.00A"); break;
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <_print_curr_lim+0xec>)
 8000584:	0018      	movs	r0, r3
 8000586:	f006 f8a3 	bl	80066d0 <iprintf>
 800058a:	e022      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 9: printf("3.25A"); break;
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <_print_curr_lim+0xf0>)
 800058e:	0018      	movs	r0, r3
 8000590:	f006 f89e 	bl	80066d0 <iprintf>
 8000594:	e01d      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 10: printf("3.50A"); break;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <_print_curr_lim+0xf4>)
 8000598:	0018      	movs	r0, r3
 800059a:	f006 f899 	bl	80066d0 <iprintf>
 800059e:	e018      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 11: printf("3.75A"); break;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <_print_curr_lim+0xf8>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f006 f894 	bl	80066d0 <iprintf>
 80005a8:	e013      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 12: printf("4.00A"); break;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <_print_curr_lim+0xfc>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f006 f88f 	bl	80066d0 <iprintf>
 80005b2:	e00e      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 13: printf("4.25A"); break;
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <_print_curr_lim+0x100>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f006 f88a 	bl	80066d0 <iprintf>
 80005bc:	e009      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 14: printf("4.50A"); break;
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <_print_curr_lim+0x104>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f006 f885 	bl	80066d0 <iprintf>
 80005c6:	e004      	b.n	80005d2 <_print_curr_lim+0xbe>
	case 15: printf("5.00A"); break;
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <_print_curr_lim+0x108>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f006 f880 	bl	80066d0 <iprintf>
 80005d0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	08007bb0 	.word	0x08007bb0
 80005e0:	08007660 	.word	0x08007660
 80005e4:	08007668 	.word	0x08007668
 80005e8:	08007670 	.word	0x08007670
 80005ec:	08007678 	.word	0x08007678
 80005f0:	08007680 	.word	0x08007680
 80005f4:	08007688 	.word	0x08007688
 80005f8:	08007690 	.word	0x08007690
 80005fc:	08007698 	.word	0x08007698
 8000600:	080076a0 	.word	0x080076a0
 8000604:	080076a8 	.word	0x080076a8
 8000608:	080076b0 	.word	0x080076b0
 800060c:	080076b8 	.word	0x080076b8
 8000610:	080076c0 	.word	0x080076c0
 8000614:	080076c8 	.word	0x080076c8
 8000618:	080076d0 	.word	0x080076d0
 800061c:	080076d8 	.word	0x080076d8

08000620 <req_PDO_options>:


void req_PDO_options() {
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af04      	add	r7, sp, #16
	uint8_t pdo_raw[2];  // buffer for all PDOs
	printf("\r\n\r\n*******************PDO OPTIONS********************\r\n");
 8000626:	4b78      	ldr	r3, [pc, #480]	@ (8000808 <req_PDO_options+0x1e8>)
 8000628:	0018      	movs	r0, r3
 800062a:	f006 f8c1 	bl	80067b0 <puts>
	printf("\r\n\tSPR:\r\n\r\n");
 800062e:	4b77      	ldr	r3, [pc, #476]	@ (800080c <req_PDO_options+0x1ec>)
 8000630:	0018      	movs	r0, r3
 8000632:	f006 f8bd 	bl	80067b0 <puts>
	pdo_idx = 0;
 8000636:	4b76      	ldr	r3, [pc, #472]	@ (8000810 <req_PDO_options+0x1f0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 7; j++){
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000640:	e069      	b.n	8000716 <req_PDO_options+0xf6>
	  HAL_I2C_Mem_Read(&hi2c1,
 8000642:	23a4      	movs	r3, #164	@ 0xa4
 8000644:	0019      	movs	r1, r3
 8000646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000648:	b29b      	uxth	r3, r3
 800064a:	3321      	adds	r3, #33	@ 0x21
 800064c:	b29a      	uxth	r2, r3
 800064e:	4871      	ldr	r0, [pc, #452]	@ (8000814 <req_PDO_options+0x1f4>)
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2302      	movs	r3, #2
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	241c      	movs	r4, #28
 800065c:	193b      	adds	r3, r7, r4
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f001 fdd9 	bl	8002218 <HAL_I2C_Mem_Read>
					   2,
					   HAL_MAX_DELAY);

//	  printf("PDO %d:\t", j+1);
//	  _print_arr(pdo_raw, 2);
	  pdo_vals pdo = _extract_PDO(pdo_raw);
 8000666:	2510      	movs	r5, #16
 8000668:	197b      	adds	r3, r7, r5
 800066a:	193a      	adds	r2, r7, r4
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f8e4 	bl	800083c <_extract_PDO>
	  if(!pdo._detected){
 8000674:	197b      	adds	r3, r7, r5
 8000676:	7a1b      	ldrb	r3, [r3, #8]
 8000678:	2201      	movs	r2, #1
 800067a:	4053      	eors	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d007      	beq.n	8000692 <req_PDO_options+0x72>
		  printf("PDO %d not detected.\r\n", j+1);
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	4b64      	ldr	r3, [pc, #400]	@ (8000818 <req_PDO_options+0x1f8>)
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f006 f820 	bl	80066d0 <iprintf>
 8000690:	e03e      	b.n	8000710 <req_PDO_options+0xf0>
	  } else {
		  printf("PDO %d:\tVoltage:  %dV\tMax current: ", j+1, pdo._voltage/10);
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	1c5c      	adds	r4, r3, #1
 8000696:	2510      	movs	r5, #16
 8000698:	197b      	adds	r3, r7, r5
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	210a      	movs	r1, #10
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff fdc6 	bl	8000230 <__divsi3>
 80006a4:	0003      	movs	r3, r0
 80006a6:	001a      	movs	r2, r3
 80006a8:	4b5c      	ldr	r3, [pc, #368]	@ (800081c <req_PDO_options+0x1fc>)
 80006aa:	0021      	movs	r1, r4
 80006ac:	0018      	movs	r0, r3
 80006ae:	f006 f80f 	bl	80066d0 <iprintf>
		  _print_max_curr(pdo._current);
 80006b2:	197b      	adds	r3, r7, r5
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <_print_max_curr>
		  printf("\tPPS: %s\r\n", (pdo._pps) ? "Yes" : "No");
 80006be:	197b      	adds	r3, r7, r5
 80006c0:	7a5b      	ldrb	r3, [r3, #9]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <req_PDO_options+0xaa>
 80006c6:	4b56      	ldr	r3, [pc, #344]	@ (8000820 <req_PDO_options+0x200>)
 80006c8:	e000      	b.n	80006cc <req_PDO_options+0xac>
 80006ca:	4b56      	ldr	r3, [pc, #344]	@ (8000824 <req_PDO_options+0x204>)
 80006cc:	4a56      	ldr	r2, [pc, #344]	@ (8000828 <req_PDO_options+0x208>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f005 fffd 	bl	80066d0 <iprintf>
		  pdos[pdo_idx] = j + 1;
 80006d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4a4d      	ldr	r2, [pc, #308]	@ (8000810 <req_PDO_options+0x1f0>)
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2d9      	uxtb	r1, r3
 80006e2:	4b52      	ldr	r3, [pc, #328]	@ (800082c <req_PDO_options+0x20c>)
 80006e4:	5499      	strb	r1, [r3, r2]
		  pdo_voltages[pdo_idx] = pdo._voltage/10;
 80006e6:	2310      	movs	r3, #16
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	210a      	movs	r1, #10
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fd9e 	bl	8000230 <__divsi3>
 80006f4:	0003      	movs	r3, r0
 80006f6:	0019      	movs	r1, r3
 80006f8:	4b45      	ldr	r3, [pc, #276]	@ (8000810 <req_PDO_options+0x1f0>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	001a      	movs	r2, r3
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4b4b      	ldr	r3, [pc, #300]	@ (8000830 <req_PDO_options+0x210>)
 8000702:	5499      	strb	r1, [r3, r2]
		  pdo_idx++;
 8000704:	4b42      	ldr	r3, [pc, #264]	@ (8000810 <req_PDO_options+0x1f0>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b40      	ldr	r3, [pc, #256]	@ (8000810 <req_PDO_options+0x1f0>)
 800070e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 7; j++){
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
 8000716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000718:	2b06      	cmp	r3, #6
 800071a:	dd92      	ble.n	8000642 <req_PDO_options+0x22>
	  }
	}

	printf("\r\n\tEPR:\r\n\r\n");
 800071c:	4b45      	ldr	r3, [pc, #276]	@ (8000834 <req_PDO_options+0x214>)
 800071e:	0018      	movs	r0, r3
 8000720:	f006 f846 	bl	80067b0 <puts>
		for(int j = 7; j < 13; j++){
 8000724:	2307      	movs	r3, #7
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	e066      	b.n	80007f8 <req_PDO_options+0x1d8>
		  HAL_I2C_Mem_Read(&hi2c1,
 800072a:	23a4      	movs	r3, #164	@ 0xa4
 800072c:	0019      	movs	r1, r3
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	b29b      	uxth	r3, r3
 8000732:	3321      	adds	r3, #33	@ 0x21
 8000734:	b29a      	uxth	r2, r3
 8000736:	4837      	ldr	r0, [pc, #220]	@ (8000814 <req_PDO_options+0x1f4>)
 8000738:	2301      	movs	r3, #1
 800073a:	425b      	negs	r3, r3
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2302      	movs	r3, #2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	241c      	movs	r4, #28
 8000744:	193b      	adds	r3, r7, r4
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	f001 fd65 	bl	8002218 <HAL_I2C_Mem_Read>
						   2,
						   HAL_MAX_DELAY);

//		  printf("PDO %d:\t", j+1);
//		  _print_arr(pdo_raw, 2);
		  pdo_vals pdo = _extract_PDO(pdo_raw);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	193a      	adds	r2, r7, r4
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f871 	bl	800083c <_extract_PDO>
		  if(!pdo._detected){
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	7a1b      	ldrb	r3, [r3, #8]
 800075e:	2201      	movs	r2, #1
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d007      	beq.n	8000778 <req_PDO_options+0x158>
			  printf("PDO %d not detected.\r\n", j+1);
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <req_PDO_options+0x1f8>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f005 ffad 	bl	80066d0 <iprintf>
 8000776:	e03c      	b.n	80007f2 <req_PDO_options+0x1d2>
		  } else {
			  printf("PDO %d: \tVoltage: %dV\tMax current: ", j+1, pdo._voltage /5);
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	1c5c      	adds	r4, r3, #1
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2105      	movs	r1, #5
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fd54 	bl	8000230 <__divsi3>
 8000788:	0003      	movs	r3, r0
 800078a:	001a      	movs	r2, r3
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <req_PDO_options+0x218>)
 800078e:	0021      	movs	r1, r4
 8000790:	0018      	movs	r0, r3
 8000792:	f005 ff9d 	bl	80066d0 <iprintf>
			  _print_max_curr(pdo._current);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fe33 	bl	8000408 <_print_max_curr>
			  printf("\tPPS: %s\r\n", (pdo._pps) ? "Yes" : "No");
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	7a5b      	ldrb	r3, [r3, #9]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <req_PDO_options+0x18e>
 80007aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <req_PDO_options+0x200>)
 80007ac:	e000      	b.n	80007b0 <req_PDO_options+0x190>
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <req_PDO_options+0x204>)
 80007b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000828 <req_PDO_options+0x208>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f005 ff8b 	bl	80066d0 <iprintf>
			  pdos[pdo_idx] = j + 1;
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4a14      	ldr	r2, [pc, #80]	@ (8000810 <req_PDO_options+0x1f0>)
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <req_PDO_options+0x20c>)
 80007c8:	5499      	strb	r1, [r3, r2]
			  pdo_voltages[pdo_idx] = pdo._voltage/5;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2105      	movs	r1, #5
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff fd2d 	bl	8000230 <__divsi3>
 80007d6:	0003      	movs	r3, r0
 80007d8:	0019      	movs	r1, r3
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <req_PDO_options+0x1f0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	001a      	movs	r2, r3
 80007e0:	b2c9      	uxtb	r1, r1
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <req_PDO_options+0x210>)
 80007e4:	5499      	strb	r1, [r3, r2]
			  pdo_idx++;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <req_PDO_options+0x1f0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <req_PDO_options+0x1f0>)
 80007f0:	701a      	strb	r2, [r3, #0]
		for(int j = 7; j < 13; j++){
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3301      	adds	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	2b0c      	cmp	r3, #12
 80007fc:	dd95      	ble.n	800072a <req_PDO_options+0x10a>
		  }
		}
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b00a      	add	sp, #40	@ 0x28
 8000806:	bdb0      	pop	{r4, r5, r7, pc}
 8000808:	080076e0 	.word	0x080076e0
 800080c:	08007718 	.word	0x08007718
 8000810:	200000a1 	.word	0x200000a1
 8000814:	200000a4 	.word	0x200000a4
 8000818:	08007724 	.word	0x08007724
 800081c:	0800773c 	.word	0x0800773c
 8000820:	08007760 	.word	0x08007760
 8000824:	08007764 	.word	0x08007764
 8000828:	08007768 	.word	0x08007768
 800082c:	20000094 	.word	0x20000094
 8000830:	20000084 	.word	0x20000084
 8000834:	08007774 	.word	0x08007774
 8000838:	08007780 	.word	0x08007780

0800083c <_extract_PDO>:

pdo_vals _extract_PDO(uint8_t *pdo_raw){
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	pdo_vals ret;
	ret._detected = (pdo_raw[1] & (1<<7)) >> 7;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	09db      	lsrs	r3, r3, #7
 800084e:	b2db      	uxtb	r3, r3
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	4193      	sbcs	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	210c      	movs	r1, #12
 8000858:	187b      	adds	r3, r7, r1
 800085a:	721a      	strb	r2, [r3, #8]
	ret._pps = (pdo_raw[1] & (1<<6)) >> 6;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	119b      	asrs	r3, r3, #6
 8000864:	2201      	movs	r2, #1
 8000866:	4013      	ands	r3, r2
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	4193      	sbcs	r3, r2
 800086c:	b2da      	uxtb	r2, r3
 800086e:	187b      	adds	r3, r7, r1
 8000870:	725a      	strb	r2, [r3, #9]
	ret._current = (pdo_raw[1] & (0b00111100)) >> 2;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	109b      	asrs	r3, r3, #2
 800087a:	220f      	movs	r2, #15
 800087c:	401a      	ands	r2, r3
 800087e:	187b      	adds	r3, r7, r1
 8000880:	605a      	str	r2, [r3, #4]
	ret._voltage = pdo_raw[0];
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	187b      	adds	r3, r7, r1
 800088a:	601a      	str	r2, [r3, #0]

	return ret;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	187a      	adds	r2, r7, r1
 8000890:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000892:	c313      	stmia	r3!, {r0, r1, r4}
}
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	46bd      	mov	sp, r7
 8000898:	b007      	add	sp, #28
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <select_PDO>:

void select_PDO(uint8_t PDO, uint8_t current){
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	0002      	movs	r2, r0
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	1c0a      	adds	r2, r1, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2];
	buff[1] = (PDO << 4) | current;
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	b25a      	sxtb	r2, r3
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	231c      	movs	r3, #28
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	705a      	strb	r2, [r3, #1]

	uint8_t pdo_raw[2];
	HAL_I2C_Mem_Read(&hi2c1,
 80008ca:	23a4      	movs	r3, #164	@ 0xa4
 80008cc:	0019      	movs	r1, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	3320      	adds	r3, #32
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	486a      	ldr	r0, [pc, #424]	@ (8000a84 <select_PDO+0x1e8>)
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	2302      	movs	r3, #2
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2518      	movs	r5, #24
 80008e6:	197b      	adds	r3, r7, r5
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	f001 fc94 	bl	8002218 <HAL_I2C_Mem_Read>
				   0x21 + PDO - 1,             // register address for SRCPDO
				   I2C_MEMADD_SIZE_8BIT,
				   pdo_raw,
				   2,
				   HAL_MAX_DELAY);
	pdo_vals pdo = _extract_PDO(pdo_raw);
 80008f0:	240c      	movs	r4, #12
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	197a      	adds	r2, r7, r5
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff9f 	bl	800083c <_extract_PDO>

	uint8_t voltage = 0;
 80008fe:	231f      	movs	r3, #31
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
	if(pdo._pps){
 8000906:	193b      	adds	r3, r7, r4
 8000908:	7a5b      	ldrb	r3, [r3, #9]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d026      	beq.n	800095c <select_PDO+0xc0>
		printf("\r\n\r\nPPS detected. Max voltage is %dV. Select PPS voltage in 100mV units for SPR and 200mV units for EPR:\r\n", PDO <= 7 ? pdo._voltage /10 : pdo._voltage /5);
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b07      	cmp	r3, #7
 8000914:	d808      	bhi.n	8000928 <select_PDO+0x8c>
 8000916:	193b      	adds	r3, r7, r4
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	210a      	movs	r1, #10
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fc87 	bl	8000230 <__divsi3>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	e008      	b.n	800093a <select_PDO+0x9e>
 8000928:	230c      	movs	r3, #12
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2105      	movs	r1, #5
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff fc7d 	bl	8000230 <__divsi3>
 8000936:	0003      	movs	r3, r0
 8000938:	001a      	movs	r2, r3
 800093a:	4b53      	ldr	r3, [pc, #332]	@ (8000a88 <select_PDO+0x1ec>)
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f005 fec6 	bl	80066d0 <iprintf>

		voltage = get_user_input();
 8000944:	f000 fe66 	bl	8001614 <get_user_input>
 8000948:	0002      	movs	r2, r0
 800094a:	211f      	movs	r1, #31
 800094c:	187b      	adds	r3, r7, r1
 800094e:	701a      	strb	r2, [r3, #0]
		buff[0] = voltage;
 8000950:	231c      	movs	r3, #28
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	187a      	adds	r2, r7, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e009      	b.n	8000970 <select_PDO+0xd4>
	} else{
		voltage = pdo._voltage;
 800095c:	230c      	movs	r3, #12
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	231f      	movs	r3, #31
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	701a      	strb	r2, [r3, #0]
		buff[0] = 0xff;
 8000968:	231c      	movs	r3, #28
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	22ff      	movs	r2, #255	@ 0xff
 800096e:	701a      	strb	r2, [r3, #0]
	}

	if(!pdo._detected){
 8000970:	230c      	movs	r3, #12
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	7a1b      	ldrb	r3, [r3, #8]
 8000976:	2201      	movs	r2, #1
 8000978:	4053      	eors	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d007      	beq.n	8000990 <select_PDO+0xf4>
	  printf("PDO %d not detected. Try again.\r\n", PDO);
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <select_PDO+0x1f0>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f005 fea1 	bl	80066d0 <iprintf>
 800098e:	e03b      	b.n	8000a08 <select_PDO+0x16c>
	} else {
	  printf("\r\nSelect PDO %d: \tVoltage: %dV\tCurrent limit: ", PDO, PDO <= 7 ? voltage /10 : voltage /5);
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781c      	ldrb	r4, [r3, #0]
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d80a      	bhi.n	80009b2 <select_PDO+0x116>
 800099c:	231f      	movs	r3, #31
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	210a      	movs	r1, #10
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fbb9 	bl	800011c <__udivsi3>
 80009aa:	0003      	movs	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	001a      	movs	r2, r3
 80009b0:	e009      	b.n	80009c6 <select_PDO+0x12a>
 80009b2:	231f      	movs	r3, #31
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2105      	movs	r1, #5
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fbae 	bl	800011c <__udivsi3>
 80009c0:	0003      	movs	r3, r0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b32      	ldr	r3, [pc, #200]	@ (8000a90 <select_PDO+0x1f4>)
 80009c8:	0021      	movs	r1, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	f005 fe80 	bl	80066d0 <iprintf>
	  _print_curr_lim(current);
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fd9d 	bl	8000514 <_print_curr_lim>
	  printf("\tAbsolute max current: ");
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <select_PDO+0x1f8>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f005 fe77 	bl	80066d0 <iprintf>
	  _print_max_curr(pdo._current);
 80009e2:	240c      	movs	r4, #12
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fd0c 	bl	8000408 <_print_max_curr>
	  printf("\tPPS: %s\r\n", (pdo._pps) ? "Yes" : "No");
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	7a5b      	ldrb	r3, [r3, #9]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <select_PDO+0x160>
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <select_PDO+0x1fc>)
 80009fa:	e000      	b.n	80009fe <select_PDO+0x162>
 80009fc:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <select_PDO+0x200>)
 80009fe:	4a28      	ldr	r2, [pc, #160]	@ (8000aa0 <select_PDO+0x204>)
 8000a00:	0019      	movs	r1, r3
 8000a02:	0010      	movs	r0, r2
 8000a04:	f005 fe64 	bl	80066d0 <iprintf>
	}
	printf("Check compatability between max current and set current limit. \r\n\r\nConfirm? (y/n)\r\n");
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <select_PDO+0x208>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f005 fed0 	bl	80067b0 <puts>
	uint8_t buf = '\0';
 8000a10:	230b      	movs	r3, #11
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	while(buf == '\0'){
 8000a18:	e007      	b.n	8000a2a <select_PDO+0x18e>
		HAL_UART_Receive(&huart1, &buf, 1, HAL_MAX_DELAY);
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	220b      	movs	r2, #11
 8000a20:	18b9      	adds	r1, r7, r2
 8000a22:	4821      	ldr	r0, [pc, #132]	@ (8000aa8 <select_PDO+0x20c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	f003 fd0b 	bl	8004440 <HAL_UART_Receive>
	while(buf == '\0'){
 8000a2a:	220b      	movs	r2, #11
 8000a2c:	18bb      	adds	r3, r7, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f2      	beq.n	8000a1a <select_PDO+0x17e>
	}
	HAL_UART_Transmit(&huart1, &buf, 1, HAL_MAX_DELAY);
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	0014      	movs	r4, r2
 8000a3a:	18b9      	adds	r1, r7, r2
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <select_PDO+0x20c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f003 fc5a 	bl	80042f8 <HAL_UART_Transmit>

	if(buf == 'y'){
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b79      	cmp	r3, #121	@ 0x79
 8000a4a:	d113      	bne.n	8000a74 <select_PDO+0x1d8>
		printf("\n\rRequesting PDO...\r\n");
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <select_PDO+0x210>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f005 feae 	bl	80067b0 <puts>
		HAL_I2C_Mem_Write(&hi2c1, AP33772S_ADDR, 0x31, I2C_MEMADD_SIZE_8BIT, buff, 2, HAL_MAX_DELAY);
 8000a54:	23a4      	movs	r3, #164	@ 0xa4
 8000a56:	0019      	movs	r1, r3
 8000a58:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <select_PDO+0x1e8>)
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	425b      	negs	r3, r3
 8000a5e:	9302      	str	r3, [sp, #8]
 8000a60:	2302      	movs	r3, #2
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	231c      	movs	r3, #28
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2231      	movs	r2, #49	@ 0x31
 8000a6e:	f001 faa5 	bl	8001fbc <HAL_I2C_Mem_Write>
	}else{
		printf("Aborted.\n\r");
	}
}
 8000a72:	e003      	b.n	8000a7c <select_PDO+0x1e0>
		printf("Aborted.\n\r");
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <select_PDO+0x214>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f005 fe2a 	bl	80066d0 <iprintf>
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b008      	add	sp, #32
 8000a82:	bdb0      	pop	{r4, r5, r7, pc}
 8000a84:	200000a4 	.word	0x200000a4
 8000a88:	080077a4 	.word	0x080077a4
 8000a8c:	08007810 	.word	0x08007810
 8000a90:	08007834 	.word	0x08007834
 8000a94:	08007864 	.word	0x08007864
 8000a98:	08007760 	.word	0x08007760
 8000a9c:	08007764 	.word	0x08007764
 8000aa0:	08007768 	.word	0x08007768
 8000aa4:	0800787c 	.word	0x0800787c
 8000aa8:	20000144 	.word	0x20000144
 8000aac:	080078d0 	.word	0x080078d0
 8000ab0:	080078e8 	.word	0x080078e8

08000ab4 <print_stats>:

void print_stats(){
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	46c6      	mov	lr, r8
 8000ab8:	b500      	push	{lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af02      	add	r7, sp, #8
	printf("Voltage: %hu mV\tCurrent: %hu mA\tTemperature: %hu C\t%d mW\r\n", _get_voltage(), _get_current(), _get_temperature(), _get_voltage()*_get_current()/1000);
 8000abe:	f000 f873 	bl	8000ba8 <_get_voltage>
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	f000 f892 	bl	8000bec <_get_current>
 8000ac8:	0006      	movs	r6, r0
 8000aca:	f000 f8ad 	bl	8000c28 <_get_temperature>
 8000ace:	4680      	mov	r8, r0
 8000ad0:	f000 f86a 	bl	8000ba8 <_get_voltage>
 8000ad4:	0004      	movs	r4, r0
 8000ad6:	f000 f889 	bl	8000bec <_get_current>
 8000ada:	0003      	movs	r3, r0
 8000adc:	4363      	muls	r3, r4
 8000ade:	22fa      	movs	r2, #250	@ 0xfa
 8000ae0:	0091      	lsls	r1, r2, #2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fba4 	bl	8000230 <__divsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <print_stats+0x50>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	4643      	mov	r3, r8
 8000af0:	0032      	movs	r2, r6
 8000af2:	0029      	movs	r1, r5
 8000af4:	f005 fdec 	bl	80066d0 <iprintf>
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	46b8      	mov	r8, r7
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	080078f4 	.word	0x080078f4

08000b08 <_print_arr>:
//	  mask >>= 1;
//	}
//	printf("\r\n");
//}

void _print_arr(uint8_t *pdo_raw, int bytes){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    uint32_t value = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
    for(int i = bytes-1; i >= 0; i--){
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	e00a      	b.n	8000b34 <_print_arr+0x2c>
        value = (value << 8) | pdo_raw[i]; // LSB first in value
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	188a      	adds	r2, r1, r2
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
    for(int i = bytes-1; i >= 0; i--){
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <_print_arr+0x16>
    }
    printf("\t0x%x\t%d-%d\t",value, pdo_raw[1], pdo_raw[0]);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	6979      	ldr	r1, [r7, #20]
 8000b48:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <_print_arr+0x94>)
 8000b4a:	f005 fdc1 	bl	80066d0 <iprintf>

    for(int i = 8*bytes - 1; i >= 0; i--){
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e016      	b.n	8000b86 <_print_arr+0x7e>
    	if((i+1)%8 == 0){
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2307      	movs	r3, #7
 8000b60:	4013      	ands	r3, r2
 8000b62:	d102      	bne.n	8000b6a <_print_arr+0x62>
    		printf(" ");
 8000b64:	2020      	movs	r0, #32
 8000b66:	f005 fdc3 	bl	80066f0 <putchar>
    	}
        printf("%d", (value >> i) & 1); // LSB first in output
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	40da      	lsrs	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	2201      	movs	r2, #1
 8000b74:	401a      	ands	r2, r3
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <_print_arr+0x98>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f005 fda8 	bl	80066d0 <iprintf>
    for(int i = 8*bytes - 1; i >= 0; i--){
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dae5      	bge.n	8000b58 <_print_arr+0x50>
    }
    printf("\r\n");
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <_print_arr+0x9c>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f005 fe0e 	bl	80067b0 <puts>
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b006      	add	sp, #24
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08007930 	.word	0x08007930
 8000ba0:	08007940 	.word	0x08007940
 8000ba4:	08007944 	.word	0x08007944

08000ba8 <_get_voltage>:
	printf("Data @ 0x%x:\r\n\t\t\t", addr);
	_print_arr(buff, len);

}

int _get_voltage(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
	uint8_t buff[2];  // buffer for all PDOs

	HAL_I2C_Mem_Read(&hi2c1,
 8000bae:	23a4      	movs	r3, #164	@ 0xa4
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <_get_voltage+0x40>)
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	2211      	movs	r2, #17
 8000bc6:	f001 fb27 	bl	8002218 <HAL_I2C_Mem_Read>
				   buff,
				   2,
				   HAL_MAX_DELAY);


	return ((buff[1] << 8) | buff[0]) * 80;
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	785b      	ldrb	r3, [r3, #1]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	1d3a      	adds	r2, r7, #4
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	011b      	lsls	r3, r3, #4
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	200000a4 	.word	0x200000a4

08000bec <_get_current>:
int _get_current(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
	uint8_t buff;  // buffer for all PDOs

	HAL_I2C_Mem_Read(&hi2c1,
 8000bf2:	23a4      	movs	r3, #164	@ 0xa4
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <_get_current+0x38>)
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	2212      	movs	r2, #18
 8000c0a:	f001 fb05 	bl	8002218 <HAL_I2C_Mem_Read>
				   &buff,
				   1,
				   HAL_MAX_DELAY);


	return buff * 24;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001a      	movs	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	189b      	adds	r3, r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000a4 	.word	0x200000a4

08000c28 <_get_temperature>:

int _get_temperature(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af04      	add	r7, sp, #16
	uint8_t buff;  // buffer for all PDOs

	HAL_I2C_Mem_Read(&hi2c1,
 8000c2e:	23a4      	movs	r3, #164	@ 0xa4
 8000c30:	0019      	movs	r1, r3
 8000c32:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <_get_temperature+0x30>)
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2213      	movs	r2, #19
 8000c46:	f001 fae7 	bl	8002218 <HAL_I2C_Mem_Read>
				   I2C_MEMADD_SIZE_8BIT,
				   &buff,
				   1,
				   HAL_MAX_DELAY);

	return buff;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	200000a4 	.word	0x200000a4

08000c5c <set_default_voltage>:


void set_default_voltage(){
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af04      	add	r7, sp, #16
	req_PDO_options();
 8000c62:	f7ff fcdd 	bl	8000620 <req_PDO_options>
	for(int i = 0; i < def_pdos; i++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e052      	b.n	8000d12 <set_default_voltage+0xb6>
		printf("Pdo number %d. val %d\r\n", i, def_pdo[i]);
 8000c6c:	2314      	movs	r3, #20
 8000c6e:	001a      	movs	r2, r3
 8000c70:	68f9      	ldr	r1, [r7, #12]
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <set_default_voltage+0xc8>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f005 fd2b 	bl	80066d0 <iprintf>
		for(int j = 0; j < pdo_idx; j++){
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e03f      	b.n	8000d00 <set_default_voltage+0xa4>
			printf("\t Comparing Pdo voltage %d at PDO %d. val %d\r\n", j,  pdos[j], pdo_voltages[j]);
 8000c80:	4a29      	ldr	r2, [pc, #164]	@ (8000d28 <set_default_voltage+0xcc>)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001c      	movs	r4, r3
 8000c8a:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <set_default_voltage+0xd0>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	4826      	ldr	r0, [pc, #152]	@ (8000d30 <set_default_voltage+0xd4>)
 8000c96:	0022      	movs	r2, r4
 8000c98:	f005 fd1a 	bl	80066d0 <iprintf>
			if(pdo_voltages[j] == def_pdo[i]){
 8000c9c:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <set_default_voltage+0xd0>)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2214      	movs	r2, #20
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d127      	bne.n	8000cfa <set_default_voltage+0x9e>
				printf("Found!\r\n");
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <set_default_voltage+0xd8>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f005 fd7f 	bl	80067b0 <puts>
				uint8_t buff[2];
				buff[1] = (pdos[j] << 4) | 0xf; //set max current
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <set_default_voltage+0xcc>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	705a      	strb	r2, [r3, #1]
				buff[0] = 0xff; //set max voltag
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	22ff      	movs	r2, #255	@ 0xff
 8000cd0:	701a      	strb	r2, [r3, #0]
				_print_arr(&buff, 2);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff ff16 	bl	8000b08 <_print_arr>
				HAL_I2C_Mem_Write(&hi2c1, AP33772S_ADDR, 0x31, I2C_MEMADD_SIZE_8BIT, buff, 2, HAL_MAX_DELAY);
 8000cdc:	23a4      	movs	r3, #164	@ 0xa4
 8000cde:	0019      	movs	r1, r3
 8000ce0:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <set_default_voltage+0xdc>)
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2302      	movs	r3, #2
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2231      	movs	r2, #49	@ 0x31
 8000cf4:	f001 f962 	bl	8001fbc <HAL_I2C_Mem_Write>
 8000cf8:	e010      	b.n	8000d1c <set_default_voltage+0xc0>
		for(int j = 0; j < pdo_idx; j++){
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <set_default_voltage+0xe0>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	001a      	movs	r2, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	dbb9      	blt.n	8000c80 <set_default_voltage+0x24>
	for(int i = 0; i < def_pdos; i++){
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	2301      	movs	r3, #1
 8000d14:	001a      	movs	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	dba7      	blt.n	8000c6c <set_default_voltage+0x10>
				return;
			}
		}
	}
}
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b005      	add	sp, #20
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	0800795c 	.word	0x0800795c
 8000d28:	20000094 	.word	0x20000094
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	08007974 	.word	0x08007974
 8000d34:	080079a4 	.word	0x080079a4
 8000d38:	200000a4 	.word	0x200000a4
 8000d3c:	200000a1 	.word	0x200000a1

08000d40 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <_write+0x28>)
 8000d58:	f003 face 	bl	80042f8 <HAL_UART_Transmit>
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000144 	.word	0x20000144

08000d6c <menu_exit_delay>:

void menu_exit_delay(uint8_t * const uart_buff){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	printf("\n\r--press any key to exit--\r\n");
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <menu_exit_delay+0x40>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f005 fd1a 	bl	80067b0 <puts>

	*uart_buff = '\0';
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	while(*uart_buff == '\0'){
 8000d82:	e008      	b.n	8000d96 <menu_exit_delay+0x2a>
		*uart_buff = '\0';
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uart_buff, 1);
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <menu_exit_delay+0x44>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f003 fc3b 	bl	800460c <HAL_UART_Receive_IT>
	while(*uart_buff == '\0'){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f2      	beq.n	8000d84 <menu_exit_delay+0x18>
	}
	*uart_buff = '\0';
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	080079ac 	.word	0x080079ac
 8000db0:	20000144 	.word	0x20000144

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fc94 	bl	80016e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8b7 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 f9e3 	bl	800118c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc6:	f000 f8ff 	bl	8000fc8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dca:	f000 f991 	bl	80010f0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000dce:	f000 f93b 	bl	8001048 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  //init PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f04 <main+0x150>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 fbe6 	bl	80035a8 <HAL_TIM_PWM_Start>

  printf("\n\rStarting...\n\r");
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <main+0x154>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f005 fc76 	bl	80066d0 <iprintf>
  HAL_Delay(500);
 8000de4:	23fa      	movs	r3, #250	@ 0xfa
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fcf9 	bl	80017e0 <HAL_Delay>
  set_default_voltage();
 8000dee:	f7ff ff35 	bl	8000c5c <set_default_voltage>
  printf("Init complete.\r\n");
 8000df2:	4b46      	ldr	r3, [pc, #280]	@ (8000f0c <main+0x158>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f005 fcdb 	bl	80067b0 <puts>
  uint32_t start = HAL_GetTick();
 8000dfa:	f000 fce7 	bl	80017cc <HAL_GetTick>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	60bb      	str	r3, [r7, #8]
  bool retry = 0;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
  //UART buff
  char uart_buff = '\0';
 8000e0a:	1d7b      	adds	r3, r7, #5
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, &uart_buff, 1);
 8000e10:	1d79      	adds	r1, r7, #5
 8000e12:	4b3f      	ldr	r3, [pc, #252]	@ (8000f10 <main+0x15c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	0018      	movs	r0, r3
 8000e18:	f003 fbf8 	bl	800460c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(retry == 0 && (HAL_GetTick() - start) > 2000){
 8000e1c:	240f      	movs	r4, #15
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4053      	eors	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00d      	beq.n	8000e48 <main+0x94>
 8000e2c:	f000 fcce 	bl	80017cc <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	23fa      	movs	r3, #250	@ 0xfa
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d904      	bls.n	8000e48 <main+0x94>
//		 printf("retry\r\n");
		 set_default_voltage();
 8000e3e:	f7ff ff0d 	bl	8000c5c <set_default_voltage>
		 retry = 1;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
	 }
	 print_stats();
 8000e48:	f7ff fe34 	bl	8000ab4 <print_stats>
	 HAL_UART_Receive_IT(&huart1, &uart_buff, 1);
 8000e4c:	1d79      	adds	r1, r7, #5
 8000e4e:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <main+0x15c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	0018      	movs	r0, r3
 8000e54:	f003 fbda 	bl	800460c <HAL_UART_Receive_IT>

	 if(uart_buff != '\0'){
 8000e58:	1d7b      	adds	r3, r7, #5
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0dd      	beq.n	8000e1c <main+0x68>
		 HAL_UART_Transmit(&huart1, &uart_buff, 1, HAL_MAX_DELAY); //echo
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	1d79      	adds	r1, r7, #5
 8000e66:	482a      	ldr	r0, [pc, #168]	@ (8000f10 <main+0x15c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f003 fa45 	bl	80042f8 <HAL_UART_Transmit>
		 if(uart_buff == 's'){
 8000e6e:	1d7b      	adds	r3, r7, #5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b73      	cmp	r3, #115	@ 0x73
 8000e74:	d11f      	bne.n	8000eb6 <main+0x102>
			 req_PDO_options();
 8000e76:	f7ff fbd3 	bl	8000620 <req_PDO_options>

			 printf("\r\nSelect PDO and hit enter.\r\n");
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <main+0x160>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f005 fc97 	bl	80067b0 <puts>

			 uint8_t pdo = get_user_input();
 8000e82:	f000 fbc7 	bl	8001614 <get_user_input>
 8000e86:	0002      	movs	r2, r0
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
			 printf("\r\nSelect current limit:\r\n\t0\t1.00A\r\n\t1\t1.25A\r\n\t2\t1.50A\r\n\t3\t1.75A\r\n\t4\t2.00A\r\n\t5\t2.25A\r\n\t6\t2.50A\r\n\t7\t2.75A\r\n\t8\t3.00A\r\n\t9\t3.25A\r\n\t10\t3.50A\r\n\t11\t3.75A\r\n\t12\t4.00A\r\n\t13\t4.25A\r\n\t14\t4.50A\r\n\t15\t5.00A\r\n\r\n");
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <main+0x164>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f005 fc8e 	bl	80067b0 <puts>

			 uint8_t curr = get_user_input();
 8000e94:	f000 fbbe 	bl	8001614 <get_user_input>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	701a      	strb	r2, [r3, #0]
			 select_PDO(pdo, curr);
 8000e9e:	1dbb      	adds	r3, r7, #6
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fcf7 	bl	800089c <select_PDO>

			 menu_exit_delay(&uart_buff);
 8000eae:	1d7b      	adds	r3, r7, #5
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ff5b 	bl	8000d6c <menu_exit_delay>
		 }
		 if(uart_buff == 'c'){
 8000eb6:	1d7b      	adds	r3, r7, #5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b63      	cmp	r3, #99	@ 0x63
 8000ebc:	d105      	bne.n	8000eca <main+0x116>
			 req_PDO_options();
 8000ebe:	f7ff fbaf 	bl	8000620 <req_PDO_options>

			 menu_exit_delay(&uart_buff);
 8000ec2:	1d7b      	adds	r3, r7, #5
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff51 	bl	8000d6c <menu_exit_delay>
		 }
		 if(uart_buff == 'h'){
 8000eca:	1d7b      	adds	r3, r7, #5
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b68      	cmp	r3, #104	@ 0x68
 8000ed0:	d1a4      	bne.n	8000e1c <main+0x68>
			 printf("\r\n\r\n*****************HELP MENU*****************\r\n\r\n");
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <main+0x168>)
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f005 fc6b 	bl	80067b0 <puts>
			 printf("Commands:\r\n");
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <main+0x16c>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f005 fc67 	bl	80067b0 <puts>
			 printf("\tc\tlist all the available PDOs\r\n");
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <main+0x170>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f005 fc63 	bl	80067b0 <puts>
			 printf("\ts\tlist all the available PDOs and select new PDO\r\n");
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <main+0x174>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f005 fc5f 	bl	80067b0 <puts>
			 printf("\th\thelp\r\n");
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <main+0x178>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f005 fc5b 	bl	80067b0 <puts>

			 menu_exit_delay(&uart_buff);
 8000efa:	1d7b      	adds	r3, r7, #5
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff35 	bl	8000d6c <menu_exit_delay>
	 if(retry == 0 && (HAL_GetTick() - start) > 2000){
 8000f02:	e78b      	b.n	8000e1c <main+0x68>
 8000f04:	200000f8 	.word	0x200000f8
 8000f08:	080079cc 	.word	0x080079cc
 8000f0c:	080079dc 	.word	0x080079dc
 8000f10:	20000144 	.word	0x20000144
 8000f14:	080079ec 	.word	0x080079ec
 8000f18:	08007a0c 	.word	0x08007a0c
 8000f1c:	08007ad0 	.word	0x08007ad0
 8000f20:	08007b04 	.word	0x08007b04
 8000f24:	08007b10 	.word	0x08007b10
 8000f28:	08007b30 	.word	0x08007b30
 8000f2c:	08007b64 	.word	0x08007b64

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08d      	sub	sp, #52	@ 0x34
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	2414      	movs	r4, #20
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	231c      	movs	r3, #28
 8000f3e:	001a      	movs	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	f005 fd2b 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f46:	003b      	movs	r3, r7
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f005 fd24 	bl	800699c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <SystemClock_Config+0x94>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <SystemClock_Config+0x94>)
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2202      	movs	r2, #2
 8000f64:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	0152      	lsls	r2, r2, #5
 8000f74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2240      	movs	r2, #64	@ 0x40
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fe12 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f88:	f000 f92e 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2207      	movs	r2, #7
 8000f90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000faa:	003b      	movs	r3, r7
 8000fac:	2100      	movs	r1, #0
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 ffde 	bl	8002f70 <HAL_RCC_ClockConfig>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f916 	bl	80011e8 <Error_Handler>
  }
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b00d      	add	sp, #52	@ 0x34
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <MX_I2C1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <MX_I2C1_Init+0x7c>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_I2C1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_I2C1_Init+0x74>)
 8001004:	0018      	movs	r0, r3
 8001006:	f000 ff33 	bl	8001e70 <HAL_I2C_Init>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800100e:	f000 f8eb 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_I2C1_Init+0x74>)
 8001014:	2100      	movs	r1, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f001 fd2e 	bl	8002a78 <HAL_I2CEx_ConfigAnalogFilter>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 f8e2 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <MX_I2C1_Init+0x74>)
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f001 fd71 	bl	8002b10 <HAL_I2CEx_ConfigDigitalFilter>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 f8d9 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000a4 	.word	0x200000a4
 8001040:	40005400 	.word	0x40005400
 8001044:	00402d41 	.word	0x00402d41

08001048 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	0018      	movs	r0, r3
 8001052:	231c      	movs	r3, #28
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f005 fca0 	bl	800699c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_TIM14_Init+0x98>)
 800105e:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <MX_TIM14_Init+0x9c>)
 8001060:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 11999;
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_TIM14_Init+0x98>)
 8001064:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <MX_TIM14_Init+0xa0>)
 8001066:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_TIM14_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1999;
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_TIM14_Init+0x98>)
 8001070:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <MX_TIM14_Init+0xa4>)
 8001072:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_TIM14_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_TIM14_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <MX_TIM14_Init+0x98>)
 8001082:	0018      	movs	r0, r3
 8001084:	f002 f9d8 	bl	8003438 <HAL_TIM_Base_Init>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800108c:	f000 f8ac 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <MX_TIM14_Init+0x98>)
 8001092:	0018      	movs	r0, r3
 8001094:	f002 fa28 	bl	80034e8 <HAL_TIM_PWM_Init>
 8001098:	1e03      	subs	r3, r0, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800109c:	f000 f8a4 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2260      	movs	r2, #96	@ 0x60
 80010a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	22fa      	movs	r2, #250	@ 0xfa
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2204      	movs	r2, #4
 80010b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	1d39      	adds	r1, r7, #4
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_TIM14_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	0018      	movs	r0, r3
 80010c2:	f002 fc51 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80010ca:	f000 f88d 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <MX_TIM14_Init+0x98>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 f93d 	bl	8001350 <HAL_TIM_MspPostInit>

}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b008      	add	sp, #32
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	200000f8 	.word	0x200000f8
 80010e4:	40002000 	.word	0x40002000
 80010e8:	00002edf 	.word	0x00002edf
 80010ec:	000007cf 	.word	0x000007cf

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 80010fc:	22e1      	movs	r2, #225	@ 0xe1
 80010fe:	0252      	lsls	r2, r2, #9
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800113a:	0018      	movs	r0, r3
 800113c:	f003 f886 	bl	800424c <HAL_UART_Init>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001144:	f000 f850 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800114a:	2100      	movs	r1, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f005 f87f 	bl	8006250 <HAL_UARTEx_SetTxFifoThreshold>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001156:	f000 f847 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800115c:	2100      	movs	r1, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f005 f8b6 	bl	80062d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001168:	f000 f83e 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <MX_USART1_UART_Init+0x94>)
 800116e:	0018      	movs	r0, r3
 8001170:	f005 f834 	bl	80061dc <HAL_UARTEx_DisableFifoMode>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001178:	f000 f836 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	20000144 	.word	0x20000144
 8001188:	40013800 	.word	0x40013800

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_GPIO_Init+0x58>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_GPIO_Init+0x58>)
 8001198:	2102      	movs	r1, #2
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	@ 0x34
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <MX_GPIO_Init+0x58>)
 80011d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	40021000 	.word	0x40021000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_MspInit+0x44>)
 80011fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_MspInit+0x44>)
 8001200:	2101      	movs	r1, #1
 8001202:	430a      	orrs	r2, r1
 8001204:	641a      	str	r2, [r3, #64]	@ 0x40
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_MspInit+0x44>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	2201      	movs	r2, #1
 800120c:	4013      	ands	r3, r2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_MspInit+0x44>)
 8001214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_MspInit+0x44>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0549      	lsls	r1, r1, #21
 800121c:	430a      	orrs	r2, r1
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_MspInit+0x44>)
 8001222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	055b      	lsls	r3, r3, #21
 8001228:	4013      	ands	r3, r2
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b091      	sub	sp, #68	@ 0x44
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	232c      	movs	r3, #44	@ 0x2c
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	0018      	movs	r0, r3
 800124a:	2314      	movs	r3, #20
 800124c:	001a      	movs	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	f005 fba4 	bl	800699c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	2410      	movs	r4, #16
 8001256:	193b      	adds	r3, r7, r4
 8001258:	0018      	movs	r0, r3
 800125a:	231c      	movs	r3, #28
 800125c:	001a      	movs	r2, r3
 800125e:	2100      	movs	r1, #0
 8001260:	f005 fb9c 	bl	800699c <memset>
  if(hi2c->Instance==I2C1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_I2C_MspInit+0xb8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d13d      	bne.n	80012ea <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001274:	193b      	adds	r3, r7, r4
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127a:	193b      	adds	r3, r7, r4
 800127c:	0018      	movs	r0, r3
 800127e:	f001 ffef 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001286:	f7ff ffaf 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 8001290:	2102      	movs	r1, #2
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80012a2:	212c      	movs	r1, #44	@ 0x2c
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	22c0      	movs	r2, #192	@ 0xc0
 80012a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2212      	movs	r2, #18
 80012ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2206      	movs	r2, #6
 80012c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_I2C_MspInit+0xc0>)
 80012c6:	0019      	movs	r1, r3
 80012c8:	0010      	movs	r0, r2
 80012ca:	f000 fc67 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 80012d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	0389      	lsls	r1, r1, #14
 80012d8:	430a      	orrs	r2, r1
 80012da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_I2C_MspInit+0xbc>)
 80012de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	039b      	lsls	r3, r3, #14
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b011      	add	sp, #68	@ 0x44
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	40005400 	.word	0x40005400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	50000400 	.word	0x50000400

08001300 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_TIM_Base_MspInit+0x48>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d115      	bne.n	800133e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_TIM_Base_MspInit+0x4c>)
 8001314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_TIM_Base_MspInit+0x4c>)
 8001318:	2180      	movs	r1, #128	@ 0x80
 800131a:	0209      	lsls	r1, r1, #8
 800131c:	430a      	orrs	r2, r1
 800131e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_TIM_Base_MspInit+0x4c>)
 8001322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2013      	movs	r0, #19
 8001334:	f000 fb24 	bl	8001980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001338:	2013      	movs	r0, #19
 800133a:	f000 fb36 	bl	80019aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	40002000 	.word	0x40002000
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	240c      	movs	r4, #12
 800135a:	193b      	adds	r3, r7, r4
 800135c:	0018      	movs	r0, r3
 800135e:	2314      	movs	r3, #20
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f005 fb1a 	bl	800699c <memset>
  if(htim->Instance==TIM14)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_TIM_MspPostInit+0x70>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d122      	bne.n	80013b8 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM14_MspPostInit 0 */

    /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HAL_TIM_MspPostInit+0x74>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HAL_TIM_MspPostInit+0x74>)
 8001378:	2101      	movs	r1, #1
 800137a:	430a      	orrs	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	@ 0x34
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_TIM_MspPostInit+0x74>)
 8001380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	0021      	movs	r1, r4
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2210      	movs	r2, #16
 8001390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2202      	movs	r2, #2
 8001396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2204      	movs	r2, #4
 80013a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	187a      	adds	r2, r7, r1
 80013ac:	23a0      	movs	r3, #160	@ 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fbf2 	bl	8001b9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b009      	add	sp, #36	@ 0x24
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	40002000 	.word	0x40002000
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b091      	sub	sp, #68	@ 0x44
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	232c      	movs	r3, #44	@ 0x2c
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	0018      	movs	r0, r3
 80013d6:	2314      	movs	r3, #20
 80013d8:	001a      	movs	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f005 fade 	bl	800699c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	2410      	movs	r4, #16
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0018      	movs	r0, r3
 80013e6:	231c      	movs	r3, #28
 80013e8:	001a      	movs	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f005 fad6 	bl	800699c <memset>
  if(huart->Instance==USART1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_UART_MspInit+0xc8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d146      	bne.n	8001488 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001406:	193b      	adds	r3, r7, r4
 8001408:	0018      	movs	r0, r3
 800140a:	f001 ff29 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001412:	f7ff fee9 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 8001418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	01c9      	lsls	r1, r1, #7
 8001420:	430a      	orrs	r2, r1
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 8001426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 8001434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 8001438:	2101      	movs	r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_UART_MspInit+0xcc>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800144a:	212c      	movs	r1, #44	@ 0x2c
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2203      	movs	r2, #3
 8001450:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2202      	movs	r2, #2
 8001456:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2204      	movs	r2, #4
 8001468:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	187a      	adds	r2, r7, r1
 800146c:	23a0      	movs	r3, #160	@ 0xa0
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	0011      	movs	r1, r2
 8001472:	0018      	movs	r0, r3
 8001474:	f000 fb92 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	201b      	movs	r0, #27
 800147e:	f000 fa7f 	bl	8001980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001482:	201b      	movs	r0, #27
 8001484:	f000 fa91 	bl	80019aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b011      	add	sp, #68	@ 0x44
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	40013800 	.word	0x40013800
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	e7fd      	b.n	800149c <NMI_Handler+0x4>

080014a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	e7fd      	b.n	80014a4 <HardFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f972 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <TIM14_IRQHandler+0x14>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f002 f940 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */


  /* USER CODE END TIM14_IRQn 1 */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	200000f8 	.word	0x200000f8

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <USART1_IRQHandler+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 f8e6 	bl	80046bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	20000144 	.word	0x20000144

080014fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e00a      	b.n	8001524 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150e:	e000      	b.n	8001512 <_read+0x16>
 8001510:	bf00      	nop
 8001512:	0001      	movs	r1, r0
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	b2ca      	uxtb	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf0      	blt.n	800150e <_read+0x12>
  }

  return len;
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b006      	add	sp, #24
 8001534:	bd80      	pop	{r7, pc}

08001536 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153e:	2301      	movs	r3, #1
 8001540:	425b      	negs	r3, r3
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	0192      	lsls	r2, r2, #6
 800155a:	605a      	str	r2, [r3, #4]
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <_isatty>:

int _isatty(int file)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f005 fa42 	bl	8006a48 <__errno>
 80015c4:	0003      	movs	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	425b      	negs	r3, r3
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	18d2      	adds	r2, r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b006      	add	sp, #24
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20001800 	.word	0x20001800
 80015f0:	00000400 	.word	0x00000400
 80015f4:	200001d8 	.word	0x200001d8
 80015f8:	20000330 	.word	0x20000330

080015fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <SystemInit+0x14>)
 8001602:	2280      	movs	r2, #128	@ 0x80
 8001604:	0512      	lsls	r2, r2, #20
 8001606:	609a      	str	r2, [r3, #8]
#endif
}
 8001608:	46c0      	nop			@ (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <get_user_input>:
#include <stdbool.h>

extern UART_HandleTypeDef huart1;


int get_user_input(){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
	uint8_t buffer[8];
	uint8_t uart_buff;
	int idx = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
	uart_buff = '\0';
 800161e:	1cfb      	adds	r3, r7, #3
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	while(uart_buff != '\r' && uart_buff != '\n'){
 8001624:	e01e      	b.n	8001664 <get_user_input+0x50>
		if(uart_buff != '\0'){
 8001626:	1cfb      	adds	r3, r7, #3
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <get_user_input+0x2e>
			buffer[idx] = uart_buff;
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	1d3a      	adds	r2, r7, #4
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	701a      	strb	r2, [r3, #0]
			idx++;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
		}
		uart_buff = '\0';
 8001642:	1cfb      	adds	r3, r7, #3
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart1, &uart_buff, 1, HAL_MAX_DELAY);
 8001648:	2301      	movs	r3, #1
 800164a:	425b      	negs	r3, r3
 800164c:	1cf9      	adds	r1, r7, #3
 800164e:	4810      	ldr	r0, [pc, #64]	@ (8001690 <get_user_input+0x7c>)
 8001650:	2201      	movs	r2, #1
 8001652:	f002 fef5 	bl	8004440 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, &uart_buff, 1, HAL_MAX_DELAY);
 8001656:	2301      	movs	r3, #1
 8001658:	425b      	negs	r3, r3
 800165a:	1cf9      	adds	r1, r7, #3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <get_user_input+0x7c>)
 800165e:	2201      	movs	r2, #1
 8001660:	f002 fe4a 	bl	80042f8 <HAL_UART_Transmit>
	while(uart_buff != '\r' && uart_buff != '\n'){
 8001664:	1cfb      	adds	r3, r7, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0d      	cmp	r3, #13
 800166a:	d003      	beq.n	8001674 <get_user_input+0x60>
 800166c:	1cfb      	adds	r3, r7, #3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b0a      	cmp	r3, #10
 8001672:	d1d8      	bne.n	8001626 <get_user_input+0x12>
	}
	buffer[idx] = '\0';
 8001674:	1d3a      	adds	r2, r7, #4
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
//	printf("current: %d  %s\r\n", atoi(buffer), buffer);
	return atoi(buffer);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	0018      	movs	r0, r3
 8001682:	f004 fec5 	bl	8006410 <atoi>
 8001686:	0003      	movs	r3, r0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000144 	.word	0x20000144

08001694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f7ff ffb0 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800169c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800169e:	e003      	b.n	80016a8 <LoopCopyDataInit>

080016a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80016a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016a6:	3104      	adds	r1, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016a8:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <LoopForever+0xa>)
  ldr r3, =_edata
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <LoopForever+0xe>)
  adds r2, r0, r1
 80016ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016b0:	d3f6      	bcc.n	80016a0 <CopyDataInit>
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  b LoopFillZerobss
 80016b4:	e002      	b.n	80016bc <LoopFillZerobss>

080016b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80016b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ba:	3204      	adds	r2, #4

080016bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <LoopForever+0x16>)
  cmp r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016c0:	d3f9      	bcc.n	80016b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80016c2:	f005 f9c7 	bl	8006a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff fb75 	bl	8000db4 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80016d0:	08007e08 	.word	0x08007e08
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016d8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80016dc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80016e0:	2000032c 	.word	0x2000032c

080016e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_IRQHandler>

080016e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2003      	movs	r0, #3
 80016f4:	f000 f80e 	bl	8001714 <HAL_InitTick>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d003      	beq.n	8001704 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e001      	b.n	8001708 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001704:	f7ff fd76 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_InitTick+0x88>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d02b      	beq.n	8001784 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <HAL_InitTick+0x8c>)
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_InitTick+0x88>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	0019      	movs	r1, r3
 8001736:	23fa      	movs	r3, #250	@ 0xfa
 8001738:	0098      	lsls	r0, r3, #2
 800173a:	f7fe fcef 	bl	800011c <__udivsi3>
 800173e:	0003      	movs	r3, r0
 8001740:	0019      	movs	r1, r3
 8001742:	0020      	movs	r0, r4
 8001744:	f7fe fcea 	bl	800011c <__udivsi3>
 8001748:	0003      	movs	r3, r0
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f93d 	bl	80019ca <HAL_SYSTICK_Config>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d112      	bne.n	800177a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d80a      	bhi.n	8001770 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	2301      	movs	r3, #1
 800175e:	425b      	negs	r3, r3
 8001760:	2200      	movs	r2, #0
 8001762:	0018      	movs	r0, r3
 8001764:	f000 f90c 	bl	8001980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_InitTick+0x90>)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e00d      	b.n	800178c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	230f      	movs	r3, #15
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e008      	b.n	800178c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800177a:	230f      	movs	r3, #15
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e003      	b.n	800178c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800178c:	230f      	movs	r3, #15
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	781b      	ldrb	r3, [r3, #0]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b005      	add	sp, #20
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	001a      	movs	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	18d2      	adds	r2, r2, r3
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	20000008 	.word	0x20000008
 80017c8:	200001dc 	.word	0x200001dc

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	@ (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	200001dc 	.word	0x200001dc

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	001a      	movs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	189b      	adds	r3, r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	f7ff ffe0 	bl	80017cc <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	20000008 	.word	0x20000008

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b7f      	cmp	r3, #127	@ 0x7f
 800183a:	d809      	bhi.n	8001850 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	231f      	movs	r3, #31
 8001844:	401a      	ands	r2, r3
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__NVIC_EnableIRQ+0x30>)
 8001848:	2101      	movs	r1, #1
 800184a:	4091      	lsls	r1, r2
 800184c:	000a      	movs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	0002      	movs	r2, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001870:	d828      	bhi.n	80018c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001872:	4a2f      	ldr	r2, [pc, #188]	@ (8001930 <__NVIC_SetPriority+0xd4>)
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b25b      	sxtb	r3, r3
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	33c0      	adds	r3, #192	@ 0xc0
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	589b      	ldr	r3, [r3, r2]
 8001882:	1dfa      	adds	r2, r7, #7
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	0011      	movs	r1, r2
 8001888:	2203      	movs	r2, #3
 800188a:	400a      	ands	r2, r1
 800188c:	00d2      	lsls	r2, r2, #3
 800188e:	21ff      	movs	r1, #255	@ 0xff
 8001890:	4091      	lsls	r1, r2
 8001892:	000a      	movs	r2, r1
 8001894:	43d2      	mvns	r2, r2
 8001896:	401a      	ands	r2, r3
 8001898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	22ff      	movs	r2, #255	@ 0xff
 80018a0:	401a      	ands	r2, r3
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	0018      	movs	r0, r3
 80018a8:	2303      	movs	r3, #3
 80018aa:	4003      	ands	r3, r0
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	481f      	ldr	r0, [pc, #124]	@ (8001930 <__NVIC_SetPriority+0xd4>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	430a      	orrs	r2, r1
 80018bc:	33c0      	adds	r3, #192	@ 0xc0
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018c2:	e031      	b.n	8001928 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <__NVIC_SetPriority+0xd8>)
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	0019      	movs	r1, r3
 80018cc:	230f      	movs	r3, #15
 80018ce:	400b      	ands	r3, r1
 80018d0:	3b08      	subs	r3, #8
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3306      	adds	r3, #6
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	3304      	adds	r3, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1dfa      	adds	r2, r7, #7
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	0011      	movs	r1, r2
 80018e4:	2203      	movs	r2, #3
 80018e6:	400a      	ands	r2, r1
 80018e8:	00d2      	lsls	r2, r2, #3
 80018ea:	21ff      	movs	r1, #255	@ 0xff
 80018ec:	4091      	lsls	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	43d2      	mvns	r2, r2
 80018f2:	401a      	ands	r2, r3
 80018f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	22ff      	movs	r2, #255	@ 0xff
 80018fc:	401a      	ands	r2, r3
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	2303      	movs	r3, #3
 8001906:	4003      	ands	r3, r0
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800190c:	4809      	ldr	r0, [pc, #36]	@ (8001934 <__NVIC_SetPriority+0xd8>)
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	001c      	movs	r4, r3
 8001914:	230f      	movs	r3, #15
 8001916:	4023      	ands	r3, r4
 8001918:	3b08      	subs	r3, #8
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	430a      	orrs	r2, r1
 800191e:	3306      	adds	r3, #6
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	18c3      	adds	r3, r0, r3
 8001924:	3304      	adds	r3, #4
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b003      	add	sp, #12
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	045b      	lsls	r3, r3, #17
 8001948:	429a      	cmp	r2, r3
 800194a:	d301      	bcc.n	8001950 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194c:	2301      	movs	r3, #1
 800194e:	e010      	b.n	8001972 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <SysTick_Config+0x44>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	3a01      	subs	r2, #1
 8001956:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001958:	2301      	movs	r3, #1
 800195a:	425b      	negs	r3, r3
 800195c:	2103      	movs	r1, #3
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff ff7c 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <SysTick_Config+0x44>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <SysTick_Config+0x44>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b002      	add	sp, #8
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	210f      	movs	r1, #15
 800198c:	187b      	adds	r3, r7, r1
 800198e:	1c02      	adds	r2, r0, #0
 8001990:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	187b      	adds	r3, r7, r1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b25b      	sxtb	r3, r3
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	0002      	movs	r2, r0
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff ff33 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff ffaf 	bl	8001938 <SysTick_Config>
 80019da:	0003      	movs	r3, r0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e050      	b.n	8001a98 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2225      	movs	r2, #37	@ 0x25
 80019fa:	5c9b      	ldrb	r3, [r3, r2]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2224      	movs	r2, #36	@ 0x24
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e041      	b.n	8001a98 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	210e      	movs	r1, #14
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	491c      	ldr	r1, [pc, #112]	@ (8001aa0 <HAL_DMA_Abort+0xbc>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_DMA_Abort+0xc0>)
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	221c      	movs	r2, #28
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2201      	movs	r2, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <HAL_DMA_Abort+0xc0>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00c      	beq.n	8001a86 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a76:	490a      	ldr	r1, [pc, #40]	@ (8001aa0 <HAL_DMA_Abort+0xbc>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001a84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2225      	movs	r2, #37	@ 0x25
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2224      	movs	r2, #36	@ 0x24
 8001a92:	2100      	movs	r1, #0
 8001a94:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	fffffeff 	.word	0xfffffeff
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	@ 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	@ 0x24
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Abort_IT+0x26>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e05e      	b.n	8001b8c <HAL_DMA_Abort_IT+0xe4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2224      	movs	r2, #36	@ 0x24
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2225      	movs	r2, #37	@ 0x25
 8001ada:	5c9b      	ldrb	r3, [r3, r2]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e049      	b.n	8001b86 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	210e      	movs	r1, #14
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	438a      	bics	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	491d      	ldr	r1, [pc, #116]	@ (8001b94 <HAL_DMA_Abort_IT+0xec>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_DMA_Abort_IT+0xf0>)
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	221c      	movs	r2, #28
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_DMA_Abort_IT+0xf0>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b54:	490f      	ldr	r1, [pc, #60]	@ (8001b94 <HAL_DMA_Abort_IT+0xec>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2225      	movs	r2, #37	@ 0x25
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	@ 0x24
 8001b70:	2100      	movs	r1, #0
 8001b72:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	0010      	movs	r0, r2
 8001b84:	4798      	blx	r3
    }
  }
  return status;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	fffffeff 	.word	0xfffffeff
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001baa:	e14d      	b.n	8001e48 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <HAL_GPIO_Init+0x28>
 8001bc2:	e13e      	b.n	8001e42 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x38>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b12      	cmp	r3, #18
 8001bd2:	d125      	bne.n	8001c20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	58d3      	ldr	r3, [r2, r3]
 8001be0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	401a      	ands	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2107      	movs	r1, #7
 8001c04:	400b      	ands	r3, r1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	6979      	ldr	r1, [r7, #20]
 8001c1e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	43da      	mvns	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	0013      	movs	r3, r2
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d00b      	beq.n	8001c74 <HAL_GPIO_Init+0xd8>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d007      	beq.n	8001c74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c68:	2b11      	cmp	r3, #17
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d130      	bne.n	8001cd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	409a      	lsls	r2, r3
 8001c82:	0013      	movs	r3, r2
 8001c84:	43da      	mvns	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	409a      	lsls	r2, r3
 8001c96:	0013      	movs	r3, r2
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001caa:	2201      	movs	r2, #1
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	055b      	lsls	r3, r3, #21
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x180>
 8001d1a:	e092      	b.n	8001e42 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d1c:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3318      	adds	r3, #24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	220f      	movs	r2, #15
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	23a0      	movs	r3, #160	@ 0xa0
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x1d6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x1d2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a44      	ldr	r2, [pc, #272]	@ (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x1ce>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a43      	ldr	r2, [pc, #268]	@ (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d72:	2300      	movs	r3, #0
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	2103      	movs	r1, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d84:	4936      	ldr	r1, [pc, #216]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001d92:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	58d3      	ldr	r3, [r2, r3]
 8001d98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	4013      	ands	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001db8:	4929      	ldr	r1, [pc, #164]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001dc2:	2384      	movs	r3, #132	@ 0x84
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001de6:	491e      	ldr	r1, [pc, #120]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001de8:	2284      	movs	r2, #132	@ 0x84
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	035b      	lsls	r3, r3, #13
 8001e06:	4013      	ands	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	4013      	ands	r3, r2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3301      	adds	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	40da      	lsrs	r2, r3
 8001e50:	1e13      	subs	r3, r2, #0
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0x2ba>
 8001e54:	e6aa      	b.n	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021800 	.word	0x40021800
 8001e64:	50000400 	.word	0x50000400
 8001e68:	50000800 	.word	0x50000800
 8001e6c:	50001400 	.word	0x50001400

08001e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e08f      	b.n	8001fa2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	@ 0x41
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	@ 0x40
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff f9cf 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2241      	movs	r2, #65	@ 0x41
 8001ea2:	2124      	movs	r1, #36	@ 0x24
 8001ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	493b      	ldr	r1, [pc, #236]	@ (8001fac <HAL_I2C_Init+0x13c>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4938      	ldr	r1, [pc, #224]	@ (8001fb0 <HAL_I2C_Init+0x140>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	0209      	lsls	r1, r1, #8
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e007      	b.n	8001efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2184      	movs	r1, #132	@ 0x84
 8001ef8:	0209      	lsls	r1, r1, #8
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d109      	bne.n	8001f1a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	0109      	lsls	r1, r1, #4
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	e007      	b.n	8001f2a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4923      	ldr	r1, [pc, #140]	@ (8001fb4 <HAL_I2C_Init+0x144>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4920      	ldr	r1, [pc, #128]	@ (8001fb8 <HAL_I2C_Init+0x148>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	491a      	ldr	r1, [pc, #104]	@ (8001fb0 <HAL_I2C_Init+0x140>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69d9      	ldr	r1, [r3, #28]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2241      	movs	r2, #65	@ 0x41
 8001f8e:	2120      	movs	r1, #32
 8001f90:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2242      	movs	r2, #66	@ 0x42
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	f0ffffff 	.word	0xf0ffffff
 8001fb0:	ffff7fff 	.word	0xffff7fff
 8001fb4:	fffff7ff 	.word	0xfffff7ff
 8001fb8:	02008000 	.word	0x02008000

08001fbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	000c      	movs	r4, r1
 8001fc6:	0010      	movs	r0, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	230a      	movs	r3, #10
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	1c22      	adds	r2, r4, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	1c02      	adds	r2, r0, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	1c0a      	adds	r2, r1, #0
 8001fde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2241      	movs	r2, #65	@ 0x41
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d000      	beq.n	8001fee <HAL_I2C_Mem_Write+0x32>
 8001fec:	e10c      	b.n	8002208 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_I2C_Mem_Write+0x42>
 8001ff4:	232c      	movs	r3, #44	@ 0x2c
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0ff      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2240      	movs	r2, #64	@ 0x40
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Mem_Write+0x5c>
 8002014:	2302      	movs	r3, #2
 8002016:	e0f8      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	2101      	movs	r1, #1
 800201e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002020:	f7ff fbd4 	bl	80017cc <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	0219      	lsls	r1, r3, #8
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2319      	movs	r3, #25
 8002034:	2201      	movs	r2, #1
 8002036:	f000 fb0b 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0e3      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2241      	movs	r2, #65	@ 0x41
 8002046:	2121      	movs	r1, #33	@ 0x21
 8002048:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2242      	movs	r2, #66	@ 0x42
 800204e:	2140      	movs	r1, #64	@ 0x40
 8002050:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	222c      	movs	r2, #44	@ 0x2c
 8002062:	18ba      	adds	r2, r7, r2
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206e:	1dbb      	adds	r3, r7, #6
 8002070:	881c      	ldrh	r4, [r3, #0]
 8002072:	2308      	movs	r3, #8
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	230a      	movs	r3, #10
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	8819      	ldrh	r1, [r3, #0]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	0023      	movs	r3, r4
 800208a:	f000 f9f9 	bl	8002480 <I2C_RequestMemoryWrite>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d005      	beq.n	800209e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2240      	movs	r2, #64	@ 0x40
 8002096:	2100      	movs	r1, #0
 8002098:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0b5      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2bff      	cmp	r3, #255	@ 0xff
 80020a6:	d911      	bls.n	80020cc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	045c      	lsls	r4, r3, #17
 80020b8:	230a      	movs	r3, #10
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	8819      	ldrh	r1, [r3, #0]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	0023      	movs	r3, r4
 80020c6:	f000 fc9d 	bl	8002a04 <I2C_TransferConfig>
 80020ca:	e012      	b.n	80020f2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	049c      	lsls	r4, r3, #18
 80020e0:	230a      	movs	r3, #10
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	8819      	ldrh	r1, [r3, #0]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	2300      	movs	r3, #0
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	0023      	movs	r3, r4
 80020ee:	f000 fc89 	bl	8002a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fb01 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e081      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03a      	beq.n	80021b6 <HAL_I2C_Mem_Write+0x1fa>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d136      	bne.n	80021b6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0013      	movs	r3, r2
 8002152:	2200      	movs	r2, #0
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	f000 fa7b 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e053      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2bff      	cmp	r3, #255	@ 0xff
 800216a:	d911      	bls.n	8002190 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	22ff      	movs	r2, #255	@ 0xff
 8002170:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	b2da      	uxtb	r2, r3
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	045c      	lsls	r4, r3, #17
 800217c:	230a      	movs	r3, #10
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	8819      	ldrh	r1, [r3, #0]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	0023      	movs	r3, r4
 800218a:	f000 fc3b 	bl	8002a04 <I2C_TransferConfig>
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	049c      	lsls	r4, r3, #18
 80021a4:	230a      	movs	r3, #10
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	8819      	ldrh	r1, [r3, #0]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0023      	movs	r3, r4
 80021b2:	f000 fc27 	bl	8002a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d198      	bne.n	80020f2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fae0 	bl	800278c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e01a      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	490b      	ldr	r1, [pc, #44]	@ (8002214 <HAL_I2C_Mem_Write+0x258>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2241      	movs	r2, #65	@ 0x41
 80021f0:	2120      	movs	r1, #32
 80021f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2242      	movs	r2, #66	@ 0x42
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b007      	add	sp, #28
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	fe00e800 	.word	0xfe00e800

08002218 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	000c      	movs	r4, r1
 8002222:	0010      	movs	r0, r2
 8002224:	0019      	movs	r1, r3
 8002226:	230a      	movs	r3, #10
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1c22      	adds	r2, r4, #0
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	2308      	movs	r3, #8
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	1c02      	adds	r2, r0, #0
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	1dbb      	adds	r3, r7, #6
 8002238:	1c0a      	adds	r2, r1, #0
 800223a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2241      	movs	r2, #65	@ 0x41
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d000      	beq.n	800224a <HAL_I2C_Mem_Read+0x32>
 8002248:	e110      	b.n	800246c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800224a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_I2C_Mem_Read+0x42>
 8002250:	232c      	movs	r3, #44	@ 0x2c
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e103      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2240      	movs	r2, #64	@ 0x40
 800226a:	5c9b      	ldrb	r3, [r3, r2]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2C_Mem_Read+0x5c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0fc      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	2101      	movs	r1, #1
 800227a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800227c:	f7ff faa6 	bl	80017cc <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	0219      	lsls	r1, r3, #8
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2319      	movs	r3, #25
 8002290:	2201      	movs	r2, #1
 8002292:	f000 f9dd 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0e7      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2241      	movs	r2, #65	@ 0x41
 80022a2:	2122      	movs	r1, #34	@ 0x22
 80022a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2242      	movs	r2, #66	@ 0x42
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	222c      	movs	r2, #44	@ 0x2c
 80022be:	18ba      	adds	r2, r7, r2
 80022c0:	8812      	ldrh	r2, [r2, #0]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	881c      	ldrh	r4, [r3, #0]
 80022ce:	2308      	movs	r3, #8
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	230a      	movs	r3, #10
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	8819      	ldrh	r1, [r3, #0]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0023      	movs	r3, r4
 80022e6:	f000 f92f 	bl	8002548 <I2C_RequestMemoryRead>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d005      	beq.n	80022fa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2240      	movs	r2, #64	@ 0x40
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0b9      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2bff      	cmp	r3, #255	@ 0xff
 8002302:	d911      	bls.n	8002328 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	22ff      	movs	r2, #255	@ 0xff
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	b2da      	uxtb	r2, r3
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	045c      	lsls	r4, r3, #17
 8002314:	230a      	movs	r3, #10
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	8819      	ldrh	r1, [r3, #0]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	4b56      	ldr	r3, [pc, #344]	@ (8002478 <HAL_I2C_Mem_Read+0x260>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	0023      	movs	r3, r4
 8002322:	f000 fb6f 	bl	8002a04 <I2C_TransferConfig>
 8002326:	e012      	b.n	800234e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	b2da      	uxtb	r2, r3
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	049c      	lsls	r4, r3, #18
 800233c:	230a      	movs	r3, #10
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	8819      	ldrh	r1, [r3, #0]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	4b4c      	ldr	r3, [pc, #304]	@ (8002478 <HAL_I2C_Mem_Read+0x260>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	0023      	movs	r3, r4
 800234a:	f000 fb5b 	bl	8002a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	0013      	movs	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	2104      	movs	r1, #4
 800235c:	f000 f978 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002360:	1e03      	subs	r3, r0, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e082      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03a      	beq.n	800241a <HAL_I2C_Mem_Read+0x202>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d136      	bne.n	800241a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	0013      	movs	r3, r2
 80023b6:	2200      	movs	r2, #0
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	f000 f949 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e053      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2bff      	cmp	r3, #255	@ 0xff
 80023ce:	d911      	bls.n	80023f4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	22ff      	movs	r2, #255	@ 0xff
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	045c      	lsls	r4, r3, #17
 80023e0:	230a      	movs	r3, #10
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	8819      	ldrh	r1, [r3, #0]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	2300      	movs	r3, #0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	0023      	movs	r3, r4
 80023ee:	f000 fb09 	bl	8002a04 <I2C_TransferConfig>
 80023f2:	e012      	b.n	800241a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	049c      	lsls	r4, r3, #18
 8002408:	230a      	movs	r3, #10
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	8819      	ldrh	r1, [r3, #0]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	0023      	movs	r3, r4
 8002416:	f000 faf5 	bl	8002a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d194      	bne.n	800234e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f9ae 	bl	800278c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	490c      	ldr	r1, [pc, #48]	@ (800247c <HAL_I2C_Mem_Read+0x264>)
 800244c:	400a      	ands	r2, r1
 800244e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2241      	movs	r2, #65	@ 0x41
 8002454:	2120      	movs	r1, #32
 8002456:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2242      	movs	r2, #66	@ 0x42
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b007      	add	sp, #28
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	80002400 	.word	0x80002400
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	000c      	movs	r4, r1
 800248a:	0010      	movs	r0, r2
 800248c:	0019      	movs	r1, r3
 800248e:	250a      	movs	r5, #10
 8002490:	197b      	adds	r3, r7, r5
 8002492:	1c22      	adds	r2, r4, #0
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	2308      	movs	r3, #8
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	1c02      	adds	r2, r0, #0
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	1dbb      	adds	r3, r7, #6
 80024a0:	1c0a      	adds	r2, r1, #0
 80024a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	045c      	lsls	r4, r3, #17
 80024ae:	197b      	adds	r3, r7, r5
 80024b0:	8819      	ldrh	r1, [r3, #0]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <I2C_RequestMemoryWrite+0xc4>)
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	0023      	movs	r3, r4
 80024ba:	f000 faa3 	bl	8002a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 f91b 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e033      	b.n	800253a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024d2:	1dbb      	adds	r3, r7, #6
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024da:	2308      	movs	r3, #8
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e8:	e019      	b.n	800251e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024ea:	2308      	movs	r3, #8
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	6a39      	ldr	r1, [r7, #32]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f8fc 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d001      	beq.n	8002510 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e014      	b.n	800253a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002510:	2308      	movs	r3, #8
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	0013      	movs	r3, r2
 8002528:	2200      	movs	r2, #0
 800252a:	2180      	movs	r1, #128	@ 0x80
 800252c:	f000 f890 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bdb0      	pop	{r4, r5, r7, pc}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	80002000 	.word	0x80002000

08002548 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	000c      	movs	r4, r1
 8002552:	0010      	movs	r0, r2
 8002554:	0019      	movs	r1, r3
 8002556:	250a      	movs	r5, #10
 8002558:	197b      	adds	r3, r7, r5
 800255a:	1c22      	adds	r2, r4, #0
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	2308      	movs	r3, #8
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	1c02      	adds	r2, r0, #0
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	1c0a      	adds	r2, r1, #0
 800256a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	197b      	adds	r3, r7, r5
 8002574:	8819      	ldrh	r1, [r3, #0]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <I2C_RequestMemoryRead+0xc0>)
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	f000 fa41 	bl	8002a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002584:	6a39      	ldr	r1, [r7, #32]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 f8b9 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e033      	b.n	80025fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800259e:	2308      	movs	r3, #8
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80025ac:	e019      	b.n	80025e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ae:	2308      	movs	r3, #8
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	6a39      	ldr	r1, [r7, #32]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f89a 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e014      	b.n	80025fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025d4:	2308      	movs	r3, #8
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	0013      	movs	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	2140      	movs	r1, #64	@ 0x40
 80025f0:	f000 f82e 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bdb0      	pop	{r4, r5, r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	80002000 	.word	0x80002000

0800260c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d103      	bne.n	800262a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	2b01      	cmp	r3, #1
 8002636:	d007      	beq.n	8002648 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
  }
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e03a      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f8d3 	bl	8002814 <I2C_IsErrorOccurred>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e040      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	d02d      	beq.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7ff f8a6 	bl	80017cc <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x42>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d122      	bne.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	425a      	negs	r2, r3
 80026a2:	4153      	adcs	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	001a      	movs	r2, r3
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d113      	bne.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b4:	2220      	movs	r2, #32
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2241      	movs	r2, #65	@ 0x41
 80026c0:	2120      	movs	r1, #32
 80026c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2242      	movs	r2, #66	@ 0x42
 80026c8:	2100      	movs	r1, #0
 80026ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	2100      	movs	r1, #0
 80026d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e00f      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	425a      	negs	r2, r3
 80026e8:	4153      	adcs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	001a      	movs	r2, r3
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d0b5      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800270c:	e032      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f87d 	bl	8002814 <I2C_IsErrorOccurred>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e030      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	d025      	beq.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7ff f850 	bl	80017cc <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11a      	bne.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d013      	beq.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	2220      	movs	r2, #32
 8002752:	431a      	orrs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2241      	movs	r2, #65	@ 0x41
 800275c:	2120      	movs	r1, #32
 800275e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2242      	movs	r2, #66	@ 0x42
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d1c5      	bne.n	800270e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	e02f      	b.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f837 	bl	8002814 <I2C_IsErrorOccurred>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02d      	b.n	800280a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7ff f80d 	bl	80017cc <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11a      	bne.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2220      	movs	r2, #32
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d013      	beq.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	2220      	movs	r2, #32
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2241      	movs	r2, #65	@ 0x41
 80027e2:	2120      	movs	r1, #32
 80027e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2242      	movs	r2, #66	@ 0x42
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2240      	movs	r2, #64	@ 0x40
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e007      	b.n	800280a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2220      	movs	r2, #32
 8002802:	4013      	ands	r3, r2
 8002804:	2b20      	cmp	r3, #32
 8002806:	d1c8      	bne.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2327      	movs	r3, #39	@ 0x27
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2210      	movs	r2, #16
 800283c:	4013      	ands	r3, r2
 800283e:	d100      	bne.n	8002842 <I2C_IsErrorOccurred+0x2e>
 8002840:	e079      	b.n	8002936 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2210      	movs	r2, #16
 8002848:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800284a:	e057      	b.n	80028fc <I2C_IsErrorOccurred+0xe8>
 800284c:	2227      	movs	r2, #39	@ 0x27
 800284e:	18bb      	adds	r3, r7, r2
 8002850:	18ba      	adds	r2, r7, r2
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	d04f      	beq.n	80028fc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe ffb6 	bl	80017cc <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_IsErrorOccurred+0x5e>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d144      	bne.n	80028fc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	01db      	lsls	r3, r3, #7
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002880:	2013      	movs	r0, #19
 8002882:	183b      	adds	r3, r7, r0
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	2142      	movs	r1, #66	@ 0x42
 8002888:	5c52      	ldrb	r2, [r2, r1]
 800288a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	401a      	ands	r2, r3
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	429a      	cmp	r2, r3
 800289e:	d126      	bne.n	80028ee <I2C_IsErrorOccurred+0xda>
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	01db      	lsls	r3, r3, #7
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d021      	beq.n	80028ee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d01d      	beq.n	80028ee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2180      	movs	r1, #128	@ 0x80
 80028be:	01c9      	lsls	r1, r1, #7
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028c4:	f7fe ff82 	bl	80017cc <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028cc:	e00f      	b.n	80028ee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ce:	f7fe ff7d 	bl	80017cc <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b19      	cmp	r3, #25
 80028da:	d908      	bls.n	80028ee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2220      	movs	r2, #32
 80028e0:	4313      	orrs	r3, r2
 80028e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028e4:	2327      	movs	r3, #39	@ 0x27
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]

              break;
 80028ec:	e006      	b.n	80028fc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2220      	movs	r2, #32
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d1e8      	bne.n	80028ce <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2220      	movs	r2, #32
 8002904:	4013      	ands	r3, r2
 8002906:	2b20      	cmp	r3, #32
 8002908:	d004      	beq.n	8002914 <I2C_IsErrorOccurred+0x100>
 800290a:	2327      	movs	r3, #39	@ 0x27
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d09b      	beq.n	800284c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002914:	2327      	movs	r3, #39	@ 0x27
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2204      	movs	r2, #4
 800292a:	4313      	orrs	r3, r2
 800292c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800292e:	2327      	movs	r3, #39	@ 0x27
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d00c      	beq.n	8002962 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2201      	movs	r2, #1
 800294c:	4313      	orrs	r3, r2
 800294e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	0052      	lsls	r2, r2, #1
 8002958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800295a:	2327      	movs	r3, #39	@ 0x27
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4013      	ands	r3, r2
 800296a:	d00c      	beq.n	8002986 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2208      	movs	r2, #8
 8002970:	4313      	orrs	r3, r2
 8002972:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	00d2      	lsls	r2, r2, #3
 800297c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800297e:	2327      	movs	r3, #39	@ 0x27
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d00c      	beq.n	80029aa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	2202      	movs	r2, #2
 8002994:	4313      	orrs	r3, r2
 8002996:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a2:	2327      	movs	r3, #39	@ 0x27
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80029aa:	2327      	movs	r3, #39	@ 0x27
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fe28 	bl	800260c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	490e      	ldr	r1, [pc, #56]	@ (8002a00 <I2C_IsErrorOccurred+0x1ec>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2241      	movs	r2, #65	@ 0x41
 80029dc:	2120      	movs	r1, #32
 80029de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2242      	movs	r2, #66	@ 0x42
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	@ 0x40
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80029f0:	2327      	movs	r3, #39	@ 0x27
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b00a      	add	sp, #40	@ 0x28
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	240a      	movs	r4, #10
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	1c02      	adds	r2, r0, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	2009      	movs	r0, #9
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	059b      	lsls	r3, r3, #22
 8002a28:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a2a:	183b      	adds	r3, r7, r0
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	0419      	lsls	r1, r3, #16
 8002a30:	23ff      	movs	r3, #255	@ 0xff
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a36:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a4e:	0d51      	lsrs	r1, r2, #21
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	00d2      	lsls	r2, r2, #3
 8002a54:	400a      	ands	r2, r1
 8002a56:	4907      	ldr	r1, [pc, #28]	@ (8002a74 <I2C_TransferConfig+0x70>)
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	43d2      	mvns	r2, r2
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	0011      	movs	r1, r2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b007      	add	sp, #28
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	03ff63ff 	.word	0x03ff63ff

08002a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2241      	movs	r2, #65	@ 0x41
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d138      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2240      	movs	r2, #64	@ 0x40
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e032      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2240      	movs	r2, #64	@ 0x40
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2241      	movs	r2, #65	@ 0x41
 8002aa8:	2124      	movs	r1, #36	@ 0x24
 8002aaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4911      	ldr	r1, [pc, #68]	@ (8002b0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2241      	movs	r2, #65	@ 0x41
 8002af0:	2120      	movs	r1, #32
 8002af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	ffffefff 	.word	0xffffefff

08002b10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2241      	movs	r2, #65	@ 0x41
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d139      	bne.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2240      	movs	r2, #64	@ 0x40
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e033      	b.n	8002b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2241      	movs	r2, #65	@ 0x41
 8002b40:	2124      	movs	r1, #36	@ 0x24
 8002b42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ba4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2241      	movs	r2, #65	@ 0x41
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2240      	movs	r2, #64	@ 0x40
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b004      	add	sp, #16
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	fffff0ff 	.word	0xfffff0ff

08002ba8 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1d0      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x1e>
 8002bc4:	e069      	b.n	8002c9a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	4bc8      	ldr	r3, [pc, #800]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2238      	movs	r2, #56	@ 0x38
 8002bcc:	4013      	ands	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d15d      	bne.n	8002c9a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1bc      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	025b      	lsls	r3, r3, #9
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_OscConfig+0x56>
 8002bee:	4bbe      	ldr	r3, [pc, #760]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0249      	lsls	r1, r1, #9
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e020      	b.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	23a0      	movs	r3, #160	@ 0xa0
 8002c04:	02db      	lsls	r3, r3, #11
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10e      	bne.n	8002c28 <HAL_RCC_OscConfig+0x80>
 8002c0a:	4bb7      	ldr	r3, [pc, #732]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4bb6      	ldr	r3, [pc, #728]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c10:	2180      	movs	r1, #128	@ 0x80
 8002c12:	02c9      	lsls	r1, r1, #11
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4bb3      	ldr	r3, [pc, #716]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4bb2      	ldr	r3, [pc, #712]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c1e:	2180      	movs	r1, #128	@ 0x80
 8002c20:	0249      	lsls	r1, r1, #9
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c28:	4baf      	ldr	r3, [pc, #700]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4bae      	ldr	r3, [pc, #696]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c2e:	49af      	ldr	r1, [pc, #700]	@ (8002eec <HAL_RCC_OscConfig+0x344>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4bac      	ldr	r3, [pc, #688]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4bab      	ldr	r3, [pc, #684]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c3a:	49ad      	ldr	r1, [pc, #692]	@ (8002ef0 <HAL_RCC_OscConfig+0x348>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d014      	beq.n	8002c72 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fdc0 	bl	80017cc <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c52:	f7fe fdbb 	bl	80017cc <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	@ 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e17b      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c64:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0xaa>
 8002c70:	e013      	b.n	8002c9a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fdab 	bl	80017cc <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fda6 	bl	80017cc <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e166      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4b96      	ldr	r3, [pc, #600]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	4013      	ands	r3, r2
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0xfe>
 8002ca4:	e086      	b.n	8002db4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca6:	4b90      	ldr	r3, [pc, #576]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2238      	movs	r2, #56	@ 0x38
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d12f      	bne.n	8002d16 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e14c      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b89      	ldr	r3, [pc, #548]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a8b      	ldr	r2, [pc, #556]	@ (8002ef4 <HAL_RCC_OscConfig+0x34c>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	021a      	lsls	r2, r3, #8
 8002cd2:	4b85      	ldr	r3, [pc, #532]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cde:	4b82      	ldr	r3, [pc, #520]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a85      	ldr	r2, [pc, #532]	@ (8002ef8 <HAL_RCC_OscConfig+0x350>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	4a7f      	ldr	r2, [pc, #508]	@ (8002efc <HAL_RCC_OscConfig+0x354>)
 8002cfe:	40da      	lsrs	r2, r3
 8002d00:	4b7f      	ldr	r3, [pc, #508]	@ (8002f00 <HAL_RCC_OscConfig+0x358>)
 8002d02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d04:	4b7f      	ldr	r3, [pc, #508]	@ (8002f04 <HAL_RCC_OscConfig+0x35c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fe fd03 	bl	8001714 <HAL_InitTick>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d050      	beq.n	8002db4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e122      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d1e:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	@ (8002ef8 <HAL_RCC_OscConfig+0x350>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002d32:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	0049      	lsls	r1, r1, #1
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fd44 	bl	80017cc <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fd3f 	bl	80017cc <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0ff      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_RCC_OscConfig+0x34c>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	e019      	b.n	8002db4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002d86:	4960      	ldr	r1, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x360>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fd1e 	bl	80017cc <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fd19 	bl	80017cc <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0d9      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d042      	beq.n	8002e44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2238      	movs	r2, #56	@ 0x38
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b18      	cmp	r3, #24
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d138      	bne.n	8002e44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0c2      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002dde:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002de0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002de4:	2101      	movs	r1, #1
 8002de6:	430a      	orrs	r2, r1
 8002de8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe fcef 	bl	80017cc <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fcea 	bl	80017cc <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0aa      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e06:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d0f1      	beq.n	8002df4 <HAL_RCC_OscConfig+0x24c>
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e12:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	438a      	bics	r2, r1
 8002e1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fcd5 	bl	80017cc <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e28:	f7fe fcd0 	bl	80017cc <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e090      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d1f1      	bne.n	8002e28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d100      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e4e:	e084      	b.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e50:	230f      	movs	r3, #15
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e58:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2238      	movs	r2, #56	@ 0x38
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d000      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2c6>
 8002e6c:	e075      	b.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e074      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2e0>
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x31a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x302>
 8002e90:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e94:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e96:	2104      	movs	r1, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002e9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x31a>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002eac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002eb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_OscConfig+0x340>)
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d028      	beq.n	8002f1c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe fc7f 	bl	80017cc <HAL_GetTick>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fc7a 	bl	80017cc <HAL_GetTick>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	4a0b      	ldr	r2, [pc, #44]	@ (8002f0c <HAL_RCC_OscConfig+0x364>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d915      	bls.n	8002f10 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e039      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	fffeffff 	.word	0xfffeffff
 8002ef0:	fffbffff 	.word	0xfffbffff
 8002ef4:	ffff80ff 	.word	0xffff80ff
 8002ef8:	ffffc7ff 	.word	0xffffc7ff
 8002efc:	02dc6c00 	.word	0x02dc6c00
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000004 	.word	0x20000004
 8002f08:	fffffeff 	.word	0xfffffeff
 8002f0c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <HAL_RCC_OscConfig+0x3bc>)
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0dc      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x32c>
 8002f1a:	e013      	b.n	8002f44 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fc56 	bl	80017cc <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f24:	e009      	b.n	8002f3a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe fc51 	bl	80017cc <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <HAL_RCC_OscConfig+0x3c0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e010      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCC_OscConfig+0x3bc>)
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f44:	230f      	movs	r3, #15
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_OscConfig+0x3bc>)
 8002f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_OscConfig+0x3bc>)
 8002f54:	4905      	ldr	r1, [pc, #20]	@ (8002f6c <HAL_RCC_OscConfig+0x3c4>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b006      	add	sp, #24
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	00001388 	.word	0x00001388
 8002f6c:	efffffff 	.word	0xefffffff

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0df      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b71      	ldr	r3, [pc, #452]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d91e      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b6e      	ldr	r3, [pc, #440]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2207      	movs	r2, #7
 8002f98:	4393      	bics	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fc12 	bl	80017cc <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fe fc0d 	bl	80017cc <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a65      	ldr	r2, [pc, #404]	@ (8003150 <HAL_RCC_ClockConfig+0x1e0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0c0      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fc2:	4b62      	ldr	r3, [pc, #392]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	4013      	ands	r3, r2
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d017      	beq.n	800300a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <HAL_RCC_ClockConfig+0x1e8>)
 8002fea:	401a      	ands	r2, r3
 8002fec:	4b59      	ldr	r3, [pc, #356]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8002fee:	21b0      	movs	r1, #176	@ 0xb0
 8002ff0:	0109      	lsls	r1, r1, #4
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff6:	4b57      	ldr	r3, [pc, #348]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4a58      	ldr	r2, [pc, #352]	@ (800315c <HAL_RCC_ClockConfig+0x1ec>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4b53      	ldr	r3, [pc, #332]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d04b      	beq.n	80030ac <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301c:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	4013      	ands	r3, r2
 8003026:	d11f      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e08b      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003034:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4013      	ands	r3, r2
 800303e:	d113      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07f      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d106      	bne.n	800305a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800304c:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	2202      	movs	r2, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d108      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e074      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	2202      	movs	r2, #2
 8003060:	4013      	ands	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e06d      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003068:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2207      	movs	r2, #7
 800306e:	4393      	bics	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fe fba6 	bl	80017cc <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	e009      	b.n	800309a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003086:	f7fe fba1 	bl	80017cc <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	4a2f      	ldr	r2, [pc, #188]	@ (8003150 <HAL_RCC_ClockConfig+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e054      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2e      	ldr	r3, [pc, #184]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2238      	movs	r2, #56	@ 0x38
 80030a0:	401a      	ands	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1ec      	bne.n	8003086 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b27      	ldr	r3, [pc, #156]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2207      	movs	r2, #7
 80030b2:	4013      	ands	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d21e      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2207      	movs	r2, #7
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	4b21      	ldr	r3, [pc, #132]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030cc:	f7fe fb7e 	bl	80017cc <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030d6:	f7fe fb79 	bl	80017cc <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <HAL_RCC_ClockConfig+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e02c      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ea:	4b18      	ldr	r3, [pc, #96]	@ (800314c <HAL_RCC_ClockConfig+0x1dc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2207      	movs	r2, #7
 80030f0:	4013      	ands	r3, r2
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2204      	movs	r2, #4
 80030fe:	4013      	ands	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003102:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003116:	f000 f82b 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800311a:	0001      	movs	r1, r0
 800311c:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <HAL_RCC_ClockConfig+0x1e4>)
 800311e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	220f      	movs	r2, #15
 8003124:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003126:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <HAL_RCC_ClockConfig+0x1f4>)
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800312c:	221f      	movs	r2, #31
 800312e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003130:	000a      	movs	r2, r1
 8003132:	40da      	lsrs	r2, r3
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_RCC_ClockConfig+0x1f8>)
 8003136:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_RCC_ClockConfig+0x1fc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0018      	movs	r0, r3
 800313e:	f7fe fae9 	bl	8001714 <HAL_InitTick>
 8003142:	0003      	movs	r3, r0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40022000 	.word	0x40022000
 8003150:	00001388 	.word	0x00001388
 8003154:	40021000 	.word	0x40021000
 8003158:	ffff84ff 	.word	0xffff84ff
 800315c:	fffff0ff 	.word	0xfffff0ff
 8003160:	ffff8fff 	.word	0xffff8fff
 8003164:	08007bf0 	.word	0x08007bf0
 8003168:	20000000 	.word	0x20000000
 800316c:	20000004 	.word	0x20000004

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2238      	movs	r2, #56	@ 0x38
 800317c:	4013      	ands	r3, r2
 800317e:	d10f      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0adb      	lsrs	r3, r3, #11
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	2201      	movs	r2, #1
 800318c:	409a      	lsls	r2, r3
 800318e:	0013      	movs	r3, r2
 8003190:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	4815      	ldr	r0, [pc, #84]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x7c>)
 8003196:	f7fc ffc1 	bl	800011c <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	e01e      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2238      	movs	r2, #56	@ 0x38
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d102      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x80>)
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	e015      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031b2:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2238      	movs	r2, #56	@ 0x38
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d103      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2238      	movs	r2, #56	@ 0x38
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d103      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031d2:	23fa      	movs	r3, #250	@ 0xfa
 80031d4:	01db      	lsls	r3, r3, #7
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e001      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80031de:	687b      	ldr	r3, [r7, #4]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	02dc6c00 	.word	0x02dc6c00
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031f8:	f7ff ffba 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 80031fc:	0001      	movs	r1, r0
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x30>)
 8003200:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	220f      	movs	r2, #15
 8003206:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003208:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_RCC_GetHCLKFreq+0x34>)
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800320e:	221f      	movs	r2, #31
 8003210:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003212:	000a      	movs	r2, r1
 8003214:	40da      	lsrs	r2, r3
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_GetHCLKFreq+0x38>)
 8003218:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <HAL_RCC_GetHCLKFreq+0x38>)
 800321c:	681b      	ldr	r3, [r3, #0]
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08007bf0 	.word	0x08007bf0
 800322c:	20000000 	.word	0x20000000

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003234:	f7ff ffde 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003238:	0001      	movs	r1, r0
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x28>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0b1b      	lsrs	r3, r3, #12
 8003240:	2207      	movs	r2, #7
 8003242:	401a      	ands	r2, r3
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	58d3      	ldr	r3, [r2, r3]
 800324a:	221f      	movs	r2, #31
 800324c:	4013      	ands	r3, r2
 800324e:	40d9      	lsrs	r1, r3
 8003250:	000b      	movs	r3, r1
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	08007c30 	.word	0x08007c30

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003268:	2313      	movs	r3, #19
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003270:	2312      	movs	r3, #18
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2240      	movs	r2, #64	@ 0x40
 800327e:	4013      	ands	r3, r2
 8003280:	d100      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003282:	e079      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003284:	2011      	movs	r0, #17
 8003286:	183b      	adds	r3, r7, r0
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328c:	4b63      	ldr	r3, [pc, #396]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	055b      	lsls	r3, r3, #21
 8003294:	4013      	ands	r3, r2
 8003296:	d110      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	4b60      	ldr	r3, [pc, #384]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800329c:	4b5f      	ldr	r3, [pc, #380]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	0549      	lsls	r1, r1, #21
 80032a2:	430a      	orrs	r2, r1
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032a6:	4b5d      	ldr	r3, [pc, #372]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	055b      	lsls	r3, r3, #21
 80032ae:	4013      	ands	r3, r2
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b4:	183b      	adds	r3, r7, r0
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80032ba:	4b58      	ldr	r3, [pc, #352]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032be:	23c0      	movs	r3, #192	@ 0xc0
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d019      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80032d6:	4b51      	ldr	r3, [pc, #324]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	4a51      	ldr	r2, [pc, #324]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e0:	4b4e      	ldr	r3, [pc, #312]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032e4:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e6:	2180      	movs	r1, #128	@ 0x80
 80032e8:	0249      	lsls	r1, r1, #9
 80032ea:	430a      	orrs	r2, r1
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ee:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032f2:	4b4a      	ldr	r3, [pc, #296]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f4:	494b      	ldr	r1, [pc, #300]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80032fa:	4b48      	ldr	r3, [pc, #288]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2201      	movs	r2, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d016      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fa60 	bl	80017cc <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003310:	e00c      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe fa5b 	bl	80017cc <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d904      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003322:	2313      	movs	r3, #19
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
          break;
 800332a:	e004      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800332c:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d0ed      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003336:	2313      	movs	r3, #19
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003340:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	4a36      	ldr	r2, [pc, #216]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	4b33      	ldr	r3, [pc, #204]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003350:	430a      	orrs	r2, r1
 8003352:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003354:	e005      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003356:	2312      	movs	r3, #18
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2213      	movs	r2, #19
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003362:	2311      	movs	r3, #17
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b2b      	ldr	r3, [pc, #172]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800336e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003370:	4b2a      	ldr	r3, [pc, #168]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003372:	492e      	ldr	r1, [pc, #184]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003374:	400a      	ands	r2, r1
 8003376:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	2203      	movs	r2, #3
 8003388:	4393      	bics	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	4b22      	ldr	r3, [pc, #136]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003392:	430a      	orrs	r2, r1
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2202      	movs	r2, #2
 800339c:	4013      	ands	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a0:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a4:	4a22      	ldr	r2, [pc, #136]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2220      	movs	r2, #32
 80033ba:	4013      	ands	r3, r2
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	0899      	lsrs	r1, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2204      	movs	r2, #4
 80033d6:	4013      	ands	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2280      	movs	r2, #128	@ 0x80
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80033f8:	4b08      	ldr	r3, [pc, #32]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	22e0      	movs	r2, #224	@ 0xe0
 80033fe:	4393      	bics	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800340c:	2312      	movs	r3, #18
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	40021000 	.word	0x40021000
 8003420:	fffffcff 	.word	0xfffffcff
 8003424:	fffeffff 	.word	0xfffeffff
 8003428:	00001388 	.word	0x00001388
 800342c:	efffffff 	.word	0xefffffff
 8003430:	ffffcfff 	.word	0xffffcfff
 8003434:	ffff3fff 	.word	0xffff3fff

08003438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e04a      	b.n	80034e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	223d      	movs	r2, #61	@ 0x3d
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223c      	movs	r2, #60	@ 0x3c
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f7fd ff4d 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223d      	movs	r2, #61	@ 0x3d
 800346a:	2102      	movs	r1, #2
 800346c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	0019      	movs	r1, r3
 8003478:	0010      	movs	r0, r2
 800347a:	f000 fb9d 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2248      	movs	r2, #72	@ 0x48
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223e      	movs	r2, #62	@ 0x3e
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223f      	movs	r2, #63	@ 0x3f
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2241      	movs	r2, #65	@ 0x41
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2242      	movs	r2, #66	@ 0x42
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2243      	movs	r2, #67	@ 0x43
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2244      	movs	r2, #68	@ 0x44
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2245      	movs	r2, #69	@ 0x45
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2246      	movs	r2, #70	@ 0x46
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2247      	movs	r2, #71	@ 0x47
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	@ 0x3d
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e04a      	b.n	8003590 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	223d      	movs	r2, #61	@ 0x3d
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	223c      	movs	r2, #60	@ 0x3c
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f841 	bl	8003598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223d      	movs	r2, #61	@ 0x3d
 800351a:	2102      	movs	r1, #2
 800351c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	0019      	movs	r1, r3
 8003528:	0010      	movs	r0, r2
 800352a:	f000 fb45 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2248      	movs	r2, #72	@ 0x48
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	223e      	movs	r2, #62	@ 0x3e
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	223f      	movs	r2, #63	@ 0x3f
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2240      	movs	r2, #64	@ 0x40
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2241      	movs	r2, #65	@ 0x41
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2242      	movs	r2, #66	@ 0x42
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2243      	movs	r2, #67	@ 0x43
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2244      	movs	r2, #68	@ 0x44
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2245      	movs	r2, #69	@ 0x45
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2246      	movs	r2, #70	@ 0x46
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2247      	movs	r2, #71	@ 0x47
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223d      	movs	r2, #61	@ 0x3d
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <HAL_TIM_PWM_Start+0x22>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	223e      	movs	r2, #62	@ 0x3e
 80035bc:	5c9b      	ldrb	r3, [r3, r2]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	4193      	sbcs	r3, r2
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e037      	b.n	800363a <HAL_TIM_PWM_Start+0x92>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d108      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x3a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	223f      	movs	r2, #63	@ 0x3f
 80035d4:	5c9b      	ldrb	r3, [r3, r2]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	4193      	sbcs	r3, r2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e02b      	b.n	800363a <HAL_TIM_PWM_Start+0x92>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d108      	bne.n	80035fa <HAL_TIM_PWM_Start+0x52>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2240      	movs	r2, #64	@ 0x40
 80035ec:	5c9b      	ldrb	r3, [r3, r2]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	1e5a      	subs	r2, r3, #1
 80035f4:	4193      	sbcs	r3, r2
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e01f      	b.n	800363a <HAL_TIM_PWM_Start+0x92>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d108      	bne.n	8003612 <HAL_TIM_PWM_Start+0x6a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2241      	movs	r2, #65	@ 0x41
 8003604:	5c9b      	ldrb	r3, [r3, r2]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	4193      	sbcs	r3, r2
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e013      	b.n	800363a <HAL_TIM_PWM_Start+0x92>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b10      	cmp	r3, #16
 8003616:	d108      	bne.n	800362a <HAL_TIM_PWM_Start+0x82>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2242      	movs	r2, #66	@ 0x42
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	4193      	sbcs	r3, r2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e007      	b.n	800363a <HAL_TIM_PWM_Start+0x92>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2243      	movs	r2, #67	@ 0x43
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	1e5a      	subs	r2, r3, #1
 8003636:	4193      	sbcs	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07b      	b.n	800373a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0xaa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	223e      	movs	r2, #62	@ 0x3e
 800364c:	2102      	movs	r1, #2
 800364e:	5499      	strb	r1, [r3, r2]
 8003650:	e023      	b.n	800369a <HAL_TIM_PWM_Start+0xf2>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0xba>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	223f      	movs	r2, #63	@ 0x3f
 800365c:	2102      	movs	r1, #2
 800365e:	5499      	strb	r1, [r3, r2]
 8003660:	e01b      	b.n	800369a <HAL_TIM_PWM_Start+0xf2>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Start+0xca>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2240      	movs	r2, #64	@ 0x40
 800366c:	2102      	movs	r1, #2
 800366e:	5499      	strb	r1, [r3, r2]
 8003670:	e013      	b.n	800369a <HAL_TIM_PWM_Start+0xf2>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d104      	bne.n	8003682 <HAL_TIM_PWM_Start+0xda>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2241      	movs	r2, #65	@ 0x41
 800367c:	2102      	movs	r1, #2
 800367e:	5499      	strb	r1, [r3, r2]
 8003680:	e00b      	b.n	800369a <HAL_TIM_PWM_Start+0xf2>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b10      	cmp	r3, #16
 8003686:	d104      	bne.n	8003692 <HAL_TIM_PWM_Start+0xea>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2242      	movs	r2, #66	@ 0x42
 800368c:	2102      	movs	r1, #2
 800368e:	5499      	strb	r1, [r3, r2]
 8003690:	e003      	b.n	800369a <HAL_TIM_PWM_Start+0xf2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2243      	movs	r2, #67	@ 0x43
 8003696:	2102      	movs	r1, #2
 8003698:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 fd96 	bl	80041d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a25      	ldr	r2, [pc, #148]	@ (8003744 <HAL_TIM_PWM_Start+0x19c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x11e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	@ (8003748 <HAL_TIM_PWM_Start+0x1a0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x11e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	@ (800374c <HAL_TIM_PWM_Start+0x1a4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_Start+0x122>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_TIM_PWM_Start+0x124>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2180      	movs	r1, #128	@ 0x80
 80036dc:	0209      	lsls	r1, r1, #8
 80036de:	430a      	orrs	r2, r1
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_TIM_PWM_Start+0x19c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x14e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_TIM_PWM_Start+0x1a8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d116      	bne.n	8003724 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <HAL_TIM_PWM_Start+0x1ac>)
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d016      	beq.n	8003736 <HAL_TIM_PWM_Start+0x18e>
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	025b      	lsls	r3, r3, #9
 800370e:	429a      	cmp	r2, r3
 8003710:	d011      	beq.n	8003736 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	e008      	b.n	8003736 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e000      	b.n	8003738 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40014400 	.word	0x40014400
 800374c:	40014800 	.word	0x40014800
 8003750:	40000400 	.word	0x40000400
 8003754:	00010007 	.word	0x00010007

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2202      	movs	r2, #2
 8003774:	4013      	ands	r3, r2
 8003776:	d021      	beq.n	80037bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d01d      	beq.n	80037bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2203      	movs	r2, #3
 8003786:	4252      	negs	r2, r2
 8003788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2203      	movs	r2, #3
 8003798:	4013      	ands	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 f9f2 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 f9e5 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f9f1 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2204      	movs	r2, #4
 80037c0:	4013      	ands	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2204      	movs	r2, #4
 80037c8:	4013      	ands	r3, r2
 80037ca:	d01e      	beq.n	800380a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2205      	movs	r2, #5
 80037d2:	4252      	negs	r2, r2
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	23c0      	movs	r3, #192	@ 0xc0
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f9cb 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 80037f2:	e007      	b.n	8003804 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 f9be 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f9ca 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2208      	movs	r2, #8
 800380e:	4013      	ands	r3, r2
 8003810:	d021      	beq.n	8003856 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	4013      	ands	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2209      	movs	r2, #9
 8003820:	4252      	negs	r2, r2
 8003822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2204      	movs	r2, #4
 8003828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2203      	movs	r2, #3
 8003832:	4013      	ands	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f9a5 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 800383e:	e007      	b.n	8003850 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f998 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f9a4 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2210      	movs	r2, #16
 800385a:	4013      	ands	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2210      	movs	r2, #16
 8003862:	4013      	ands	r3, r2
 8003864:	d01e      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2211      	movs	r2, #17
 800386c:	4252      	negs	r2, r2
 800386e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2208      	movs	r2, #8
 8003874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	23c0      	movs	r3, #192	@ 0xc0
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4013      	ands	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f97e 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 800388c:	e007      	b.n	800389e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f971 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f97d 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2201      	movs	r2, #1
 80038a8:	4013      	ands	r3, r2
 80038aa:	d00c      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d008      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2202      	movs	r2, #2
 80038ba:	4252      	negs	r2, r2
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 f951 	bl	8003b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2280      	movs	r2, #128	@ 0x80
 80038ca:	4013      	ands	r3, r2
 80038cc:	d104      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	019b      	lsls	r3, r3, #6
 80038d4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038d6:	d00b      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2280      	movs	r2, #128	@ 0x80
 80038dc:	4013      	ands	r3, r2
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_TIM_IRQHandler+0x208>)
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fc9d 	bl	800422a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	4013      	ands	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <HAL_TIM_IRQHandler+0x20c>)
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fc94 	bl	800423a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2240      	movs	r2, #64	@ 0x40
 8003916:	4013      	ands	r3, r2
 8003918:	d00c      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2240      	movs	r2, #64	@ 0x40
 800391e:	4013      	ands	r3, r2
 8003920:	d008      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2241      	movs	r2, #65	@ 0x41
 8003928:	4252      	negs	r2, r2
 800392a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0018      	movs	r0, r3
 8003930:	f000 f93a 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2220      	movs	r2, #32
 8003938:	4013      	ands	r3, r2
 800393a:	d00c      	beq.n	8003956 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	4013      	ands	r3, r2
 8003942:	d008      	beq.n	8003956 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2221      	movs	r2, #33	@ 0x21
 800394a:	4252      	negs	r2, r2
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fc62 	bl	800421a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	ffffdf7f 	.word	0xffffdf7f
 8003964:	fffffeff 	.word	0xfffffeff

08003968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2317      	movs	r3, #23
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	223c      	movs	r2, #60	@ 0x3c
 8003980:	5c9b      	ldrb	r3, [r3, r2]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003986:	2302      	movs	r3, #2
 8003988:	e0e5      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	223c      	movs	r2, #60	@ 0x3c
 800398e:	2101      	movs	r1, #1
 8003990:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b14      	cmp	r3, #20
 8003996:	d900      	bls.n	800399a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003998:	e0d1      	b.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	4b70      	ldr	r3, [pc, #448]	@ (8003b60 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f974 	bl	8003c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2108      	movs	r1, #8
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2104      	movs	r1, #4
 80039d0:	438a      	bics	r2, r1
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	619a      	str	r2, [r3, #24]
      break;
 80039e6:	e0af      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f9d3 	bl	8003d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	0109      	lsls	r1, r1, #4
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4954      	ldr	r1, [pc, #336]	@ (8003b64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      break;
 8003a2c:	e08c      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fa2e 	bl	8003e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2108      	movs	r1, #8
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2104      	movs	r1, #4
 8003a58:	438a      	bics	r2, r1
 8003a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69d9      	ldr	r1, [r3, #28]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
      break;
 8003a6e:	e06b      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	0011      	movs	r1, r2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fa8f 	bl	8003f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0109      	lsls	r1, r1, #4
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4932      	ldr	r1, [pc, #200]	@ (8003b64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69d9      	ldr	r1, [r3, #28]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e048      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fad0 	bl	8004064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2108      	movs	r1, #8
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2104      	movs	r1, #4
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003af6:	e027      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	0011      	movs	r1, r2
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fb09 	bl	8004118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2180      	movs	r1, #128	@ 0x80
 8003b12:	0109      	lsls	r1, r1, #4
 8003b14:	430a      	orrs	r2, r1
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4910      	ldr	r1, [pc, #64]	@ (8003b64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b3c:	e004      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b3e:	2317      	movs	r3, #23
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	223c      	movs	r2, #60	@ 0x3c
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b50:	2317      	movs	r3, #23
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b006      	add	sp, #24
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	08007c50 	.word	0x08007c50
 8003b64:	fffffbff 	.word	0xfffffbff

08003b68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a2e      	ldr	r2, [pc, #184]	@ (8003c84 <TIM_Base_SetConfig+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x20>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <TIM_Base_SetConfig+0xd0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2270      	movs	r2, #112	@ 0x70
 8003bdc:	4393      	bics	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a25      	ldr	r2, [pc, #148]	@ (8003c84 <TIM_Base_SetConfig+0xcc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00f      	beq.n	8003c12 <TIM_Base_SetConfig+0x5a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a24      	ldr	r2, [pc, #144]	@ (8003c88 <TIM_Base_SetConfig+0xd0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_Base_SetConfig+0x5a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a23      	ldr	r2, [pc, #140]	@ (8003c8c <TIM_Base_SetConfig+0xd4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_Base_SetConfig+0x5a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a22      	ldr	r2, [pc, #136]	@ (8003c90 <TIM_Base_SetConfig+0xd8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_Base_SetConfig+0x5a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a21      	ldr	r2, [pc, #132]	@ (8003c94 <TIM_Base_SetConfig+0xdc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a20      	ldr	r2, [pc, #128]	@ (8003c98 <TIM_Base_SetConfig+0xe0>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2280      	movs	r2, #128	@ 0x80
 8003c28:	4393      	bics	r3, r2
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	@ (8003c84 <TIM_Base_SetConfig+0xcc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0xa4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	@ (8003c90 <TIM_Base_SetConfig+0xd8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0xa4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0f      	ldr	r2, [pc, #60]	@ (8003c94 <TIM_Base_SetConfig+0xdc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40002000 	.word	0x40002000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800
 8003c98:	fffffcff 	.word	0xfffffcff

08003c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4393      	bics	r3, r2
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003d84 <TIM_OC1_SetConfig+0xe8>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	@ (8003d88 <TIM_OC1_SetConfig+0xec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC1_SetConfig+0x6e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	@ (8003d8c <TIM_OC1_SetConfig+0xf0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC1_SetConfig+0x6e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a22      	ldr	r2, [pc, #136]	@ (8003d90 <TIM_OC1_SetConfig+0xf4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4393      	bics	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4393      	bics	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a18      	ldr	r2, [pc, #96]	@ (8003d88 <TIM_OC1_SetConfig+0xec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC1_SetConfig+0xa0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <TIM_OC1_SetConfig+0xf0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC1_SetConfig+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <TIM_OC1_SetConfig+0xf4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d111      	bne.n	8003d60 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <TIM_OC1_SetConfig+0xf8>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <TIM_OC1_SetConfig+0xfc>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b006      	add	sp, #24
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	fffeff8f 	.word	0xfffeff8f
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800
 8003d94:	fffffeff 	.word	0xfffffeff
 8003d98:	fffffdff 	.word	0xfffffdff

08003d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	2210      	movs	r2, #16
 8003db2:	4393      	bics	r3, r2
 8003db4:	001a      	movs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <TIM_OC2_SetConfig+0xe0>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <TIM_OC2_SetConfig+0xe4>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2220      	movs	r2, #32
 8003de6:	4393      	bics	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	@ (8003e84 <TIM_OC2_SetConfig+0xe8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	4393      	bics	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2240      	movs	r2, #64	@ 0x40
 8003e16:	4393      	bics	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <TIM_OC2_SetConfig+0xe8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_OC2_SetConfig+0x96>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <TIM_OC2_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC2_SetConfig+0x96>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <TIM_OC2_SetConfig+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <TIM_OC2_SetConfig+0xf4>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <TIM_OC2_SetConfig+0xf8>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	feff8fff 	.word	0xfeff8fff
 8003e80:	fffffcff 	.word	0xfffffcff
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	fffffbff 	.word	0xfffffbff
 8003e94:	fffff7ff 	.word	0xfffff7ff

08003e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a31      	ldr	r2, [pc, #196]	@ (8003f74 <TIM_OC3_SetConfig+0xdc>)
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8003f78 <TIM_OC3_SetConfig+0xe0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	4393      	bics	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a27      	ldr	r2, [pc, #156]	@ (8003f7c <TIM_OC3_SetConfig+0xe4>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	@ (8003f80 <TIM_OC3_SetConfig+0xe8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	@ (8003f84 <TIM_OC3_SetConfig+0xec>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f88 <TIM_OC3_SetConfig+0xf0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	@ (8003f80 <TIM_OC3_SetConfig+0xe8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC3_SetConfig+0x92>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <TIM_OC3_SetConfig+0xf4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x92>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <TIM_OC3_SetConfig+0xf8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d113      	bne.n	8003f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <TIM_OC3_SetConfig+0xfc>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <TIM_OC3_SetConfig+0x100>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	fffffeff 	.word	0xfffffeff
 8003f78:	fffeff8f 	.word	0xfffeff8f
 8003f7c:	fffffdff 	.word	0xfffffdff
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	fffff7ff 	.word	0xfffff7ff
 8003f88:	fffffbff 	.word	0xfffffbff
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800
 8003f94:	ffffefff 	.word	0xffffefff
 8003f98:	ffffdfff 	.word	0xffffdfff

08003f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	@ (8004044 <TIM_OC4_SetConfig+0xa8>)
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a20      	ldr	r2, [pc, #128]	@ (8004048 <TIM_OC4_SetConfig+0xac>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <TIM_OC4_SetConfig+0xb0>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <TIM_OC4_SetConfig+0xb4>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <TIM_OC4_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC4_SetConfig+0x70>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <TIM_OC4_SetConfig+0xbc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC4_SetConfig+0x70>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a15      	ldr	r2, [pc, #84]	@ (800405c <TIM_OC4_SetConfig+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4a14      	ldr	r2, [pc, #80]	@ (8004060 <TIM_OC4_SetConfig+0xc4>)
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b006      	add	sp, #24
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	ffffefff 	.word	0xffffefff
 8004048:	feff8fff 	.word	0xfeff8fff
 800404c:	fffffcff 	.word	0xfffffcff
 8004050:	ffffdfff 	.word	0xffffdfff
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	ffffbfff 	.word	0xffffbfff

08004064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <TIM_OC5_SetConfig+0x9c>)
 800407a:	401a      	ands	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a1d      	ldr	r2, [pc, #116]	@ (8004104 <TIM_OC5_SetConfig+0xa0>)
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <TIM_OC5_SetConfig+0xa4>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <TIM_OC5_SetConfig+0xa8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC5_SetConfig+0x66>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <TIM_OC5_SetConfig+0xac>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC5_SetConfig+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <TIM_OC5_SetConfig+0xb0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d109      	bne.n	80040de <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004100 <TIM_OC5_SetConfig+0x9c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	fffeffff 	.word	0xfffeffff
 8004104:	fffeff8f 	.word	0xfffeff8f
 8004108:	fffdffff 	.word	0xfffdffff
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4a22      	ldr	r2, [pc, #136]	@ (80041b8 <TIM_OC6_SetConfig+0xa0>)
 800412e:	401a      	ands	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a1e      	ldr	r2, [pc, #120]	@ (80041bc <TIM_OC6_SetConfig+0xa4>)
 8004144:	4013      	ands	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4a1a      	ldr	r2, [pc, #104]	@ (80041c0 <TIM_OC6_SetConfig+0xa8>)
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	051b      	lsls	r3, r3, #20
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <TIM_OC6_SetConfig+0xac>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_OC6_SetConfig+0x68>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <TIM_OC6_SetConfig+0xb0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC6_SetConfig+0x68>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <TIM_OC6_SetConfig+0xb4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a13      	ldr	r2, [pc, #76]	@ (80041d0 <TIM_OC6_SetConfig+0xb8>)
 8004184:	4013      	ands	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b006      	add	sp, #24
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	ffefffff 	.word	0xffefffff
 80041bc:	feff8fff 	.word	0xfeff8fff
 80041c0:	ffdfffff 	.word	0xffdfffff
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800
 80041d0:	fffbffff 	.word	0xfffbffff

080041d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	221f      	movs	r2, #31
 80041e4:	4013      	ands	r3, r2
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	0013      	movs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	43d2      	mvns	r2, r2
 80041f6:	401a      	ands	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	211f      	movs	r1, #31
 8004204:	400b      	ands	r3, r1
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4099      	lsls	r1, r3
 800420a:	000b      	movs	r3, r1
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b006      	add	sp, #24
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b002      	add	sp, #8
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e046      	b.n	80042ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2288      	movs	r2, #136	@ 0x88
 8004262:	589b      	ldr	r3, [r3, r2]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2284      	movs	r2, #132	@ 0x84
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f7fd f8a8 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2288      	movs	r2, #136	@ 0x88
 800427c:	2124      	movs	r1, #36	@ 0x24
 800427e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f000 fef6 	bl	800508c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 fd74 	bl	8004d90 <UART_SetConfig>
 80042a8:	0003      	movs	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e01c      	b.n	80042ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	490d      	ldr	r1, [pc, #52]	@ (80042f4 <HAL_UART_Init+0xa8>)
 80042be:	400a      	ands	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	212a      	movs	r1, #42	@ 0x2a
 80042ce:	438a      	bics	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 ff85 	bl	80051f4 <UART_CheckIdleState>
 80042ea:	0003      	movs	r3, r0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	ffffb7ff 	.word	0xffffb7ff

080042f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	@ 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	1dbb      	adds	r3, r7, #6
 8004306:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2288      	movs	r2, #136	@ 0x88
 800430c:	589b      	ldr	r3, [r3, r2]
 800430e:	2b20      	cmp	r3, #32
 8004310:	d000      	beq.n	8004314 <HAL_UART_Transmit+0x1c>
 8004312:	e090      	b.n	8004436 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_Transmit+0x2a>
 800431a:	1dbb      	adds	r3, r7, #6
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e088      	b.n	8004438 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	015b      	lsls	r3, r3, #5
 800432e:	429a      	cmp	r2, r3
 8004330:	d109      	bne.n	8004346 <HAL_UART_Transmit+0x4e>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2201      	movs	r2, #1
 800433e:	4013      	ands	r3, r2
 8004340:	d001      	beq.n	8004346 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e078      	b.n	8004438 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2290      	movs	r2, #144	@ 0x90
 800434a:	2100      	movs	r1, #0
 800434c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2288      	movs	r2, #136	@ 0x88
 8004352:	2121      	movs	r1, #33	@ 0x21
 8004354:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fd fa39 	bl	80017cc <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1dba      	adds	r2, r7, #6
 8004362:	2154      	movs	r1, #84	@ 0x54
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1dba      	adds	r2, r7, #6
 800436c:	2156      	movs	r1, #86	@ 0x56
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	2380      	movs	r3, #128	@ 0x80
 8004378:	015b      	lsls	r3, r3, #5
 800437a:	429a      	cmp	r2, r3
 800437c:	d108      	bne.n	8004390 <HAL_UART_Transmit+0x98>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e003      	b.n	8004398 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004398:	e030      	b.n	80043fc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	0013      	movs	r3, r2
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	@ 0x80
 80043a8:	f000 ffce 	bl	8005348 <UART_WaitOnFlagUntilTimeout>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d005      	beq.n	80043bc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2288      	movs	r2, #136	@ 0x88
 80043b4:	2120      	movs	r1, #32
 80043b6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e03d      	b.n	8004438 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	001a      	movs	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	05d2      	lsls	r2, r2, #23
 80043ce:	0dd2      	lsrs	r2, r2, #23
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	3302      	adds	r3, #2
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	e007      	b.n	80043ea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	3301      	adds	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2256      	movs	r2, #86	@ 0x56
 80043ee:	5a9b      	ldrh	r3, [r3, r2]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b299      	uxth	r1, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2256      	movs	r2, #86	@ 0x56
 80043fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2256      	movs	r2, #86	@ 0x56
 8004400:	5a9b      	ldrh	r3, [r3, r2]
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1c8      	bne.n	800439a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0013      	movs	r3, r2
 8004412:	2200      	movs	r2, #0
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	f000 ff97 	bl	8005348 <UART_WaitOnFlagUntilTimeout>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2288      	movs	r2, #136	@ 0x88
 8004422:	2120      	movs	r1, #32
 8004424:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2288      	movs	r2, #136	@ 0x88
 800442e:	2120      	movs	r1, #32
 8004430:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b008      	add	sp, #32
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	1dbb      	adds	r3, r7, #6
 800444e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	228c      	movs	r2, #140	@ 0x8c
 8004454:	589b      	ldr	r3, [r3, r2]
 8004456:	2b20      	cmp	r3, #32
 8004458:	d000      	beq.n	800445c <HAL_UART_Receive+0x1c>
 800445a:	e0d0      	b.n	80045fe <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_UART_Receive+0x2a>
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0c8      	b.n	8004600 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	015b      	lsls	r3, r3, #5
 8004476:	429a      	cmp	r2, r3
 8004478:	d109      	bne.n	800448e <HAL_UART_Receive+0x4e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2201      	movs	r2, #1
 8004486:	4013      	ands	r3, r2
 8004488:	d001      	beq.n	800448e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0b8      	b.n	8004600 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2290      	movs	r2, #144	@ 0x90
 8004492:	2100      	movs	r1, #0
 8004494:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	228c      	movs	r2, #140	@ 0x8c
 800449a:	2122      	movs	r1, #34	@ 0x22
 800449c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a4:	f7fd f992 	bl	80017cc <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1dba      	adds	r2, r7, #6
 80044b0:	215c      	movs	r1, #92	@ 0x5c
 80044b2:	8812      	ldrh	r2, [r2, #0]
 80044b4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1dba      	adds	r2, r7, #6
 80044ba:	215e      	movs	r1, #94	@ 0x5e
 80044bc:	8812      	ldrh	r2, [r2, #0]
 80044be:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	015b      	lsls	r3, r3, #5
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d10d      	bne.n	80044e8 <HAL_UART_Receive+0xa8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <HAL_UART_Receive+0x9e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2260      	movs	r2, #96	@ 0x60
 80044d8:	494b      	ldr	r1, [pc, #300]	@ (8004608 <HAL_UART_Receive+0x1c8>)
 80044da:	5299      	strh	r1, [r3, r2]
 80044dc:	e02e      	b.n	800453c <HAL_UART_Receive+0xfc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2260      	movs	r2, #96	@ 0x60
 80044e2:	21ff      	movs	r1, #255	@ 0xff
 80044e4:	5299      	strh	r1, [r3, r2]
 80044e6:	e029      	b.n	800453c <HAL_UART_Receive+0xfc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_UART_Receive+0xcc>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_UART_Receive+0xc2>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2260      	movs	r2, #96	@ 0x60
 80044fc:	21ff      	movs	r1, #255	@ 0xff
 80044fe:	5299      	strh	r1, [r3, r2]
 8004500:	e01c      	b.n	800453c <HAL_UART_Receive+0xfc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2260      	movs	r2, #96	@ 0x60
 8004506:	217f      	movs	r1, #127	@ 0x7f
 8004508:	5299      	strh	r1, [r3, r2]
 800450a:	e017      	b.n	800453c <HAL_UART_Receive+0xfc>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	055b      	lsls	r3, r3, #21
 8004514:	429a      	cmp	r2, r3
 8004516:	d10d      	bne.n	8004534 <HAL_UART_Receive+0xf4>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_UART_Receive+0xea>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2260      	movs	r2, #96	@ 0x60
 8004524:	217f      	movs	r1, #127	@ 0x7f
 8004526:	5299      	strh	r1, [r3, r2]
 8004528:	e008      	b.n	800453c <HAL_UART_Receive+0xfc>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2260      	movs	r2, #96	@ 0x60
 800452e:	213f      	movs	r1, #63	@ 0x3f
 8004530:	5299      	strh	r1, [r3, r2]
 8004532:	e003      	b.n	800453c <HAL_UART_Receive+0xfc>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2260      	movs	r2, #96	@ 0x60
 8004538:	2100      	movs	r1, #0
 800453a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800453c:	2312      	movs	r3, #18
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	2160      	movs	r1, #96	@ 0x60
 8004544:	5a52      	ldrh	r2, [r2, r1]
 8004546:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	429a      	cmp	r2, r3
 8004552:	d108      	bne.n	8004566 <HAL_UART_Receive+0x126>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e003      	b.n	800456e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800456e:	e03a      	b.n	80045e6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0013      	movs	r3, r2
 800457a:	2200      	movs	r2, #0
 800457c:	2120      	movs	r1, #32
 800457e:	f000 fee3 	bl	8005348 <UART_WaitOnFlagUntilTimeout>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	228c      	movs	r2, #140	@ 0x8c
 800458a:	2120      	movs	r1, #32
 800458c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e036      	b.n	8004600 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10e      	bne.n	80045b6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2212      	movs	r2, #18
 80045a2:	18ba      	adds	r2, r7, r2
 80045a4:	8812      	ldrh	r2, [r2, #0]
 80045a6:	4013      	ands	r3, r2
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3302      	adds	r3, #2
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e00e      	b.n	80045d4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2212      	movs	r2, #18
 80045c0:	18ba      	adds	r2, r7, r2
 80045c2:	8812      	ldrh	r2, [r2, #0]
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	4013      	ands	r3, r2
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	225e      	movs	r2, #94	@ 0x5e
 80045d8:	5a9b      	ldrh	r3, [r3, r2]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b299      	uxth	r1, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	225e      	movs	r2, #94	@ 0x5e
 80045e4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	225e      	movs	r2, #94	@ 0x5e
 80045ea:	5a9b      	ldrh	r3, [r3, r2]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1be      	bne.n	8004570 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	228c      	movs	r2, #140	@ 0x8c
 80045f6:	2120      	movs	r1, #32
 80045f8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b008      	add	sp, #32
 8004606:	bd80      	pop	{r7, pc}
 8004608:	000001ff 	.word	0x000001ff

0800460c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	1dbb      	adds	r3, r7, #6
 8004618:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	228c      	movs	r2, #140	@ 0x8c
 800461e:	589b      	ldr	r3, [r3, r2]
 8004620:	2b20      	cmp	r3, #32
 8004622:	d145      	bne.n	80046b0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_Receive_IT+0x26>
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e03d      	b.n	80046b2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	429a      	cmp	r2, r3
 8004640:	d109      	bne.n	8004656 <HAL_UART_Receive_IT+0x4a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2201      	movs	r2, #1
 800464e:	4013      	ands	r3, r2
 8004650:	d001      	beq.n	8004656 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e02d      	b.n	80046b2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	4013      	ands	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800466a:	f3ef 8310 	mrs	r3, PRIMASK
 800466e:	613b      	str	r3, [r7, #16]
  return(result);
 8004670:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f383 8810 	msr	PRIMASK, r3
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	04c9      	lsls	r1, r1, #19
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800469e:	1dbb      	adds	r3, r7, #6
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f000 febe 	bl	8005428 <UART_Start_Receive_IT>
 80046ac:	0003      	movs	r3, r0
 80046ae:	e000      	b.n	80046b2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b008      	add	sp, #32
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b0aa      	sub	sp, #168	@ 0xa8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	22a4      	movs	r2, #164	@ 0xa4
 80046cc:	18b9      	adds	r1, r7, r2
 80046ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	20a0      	movs	r0, #160	@ 0xa0
 80046d8:	1839      	adds	r1, r7, r0
 80046da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	249c      	movs	r4, #156	@ 0x9c
 80046e4:	1939      	adds	r1, r7, r4
 80046e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046e8:	0011      	movs	r1, r2
 80046ea:	18bb      	adds	r3, r7, r2
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4aa2      	ldr	r2, [pc, #648]	@ (8004978 <HAL_UART_IRQHandler+0x2bc>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	2298      	movs	r2, #152	@ 0x98
 80046f4:	18bd      	adds	r5, r7, r2
 80046f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80046f8:	18bb      	adds	r3, r7, r2
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11a      	bne.n	8004736 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004700:	187b      	adds	r3, r7, r1
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2220      	movs	r2, #32
 8004706:	4013      	ands	r3, r2
 8004708:	d015      	beq.n	8004736 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800470a:	183b      	adds	r3, r7, r0
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2220      	movs	r2, #32
 8004710:	4013      	ands	r3, r2
 8004712:	d105      	bne.n	8004720 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004714:	193b      	adds	r3, r7, r4
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	055b      	lsls	r3, r3, #21
 800471c:	4013      	ands	r3, r2
 800471e:	d00a      	beq.n	8004736 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	2b00      	cmp	r3, #0
 8004726:	d100      	bne.n	800472a <HAL_UART_IRQHandler+0x6e>
 8004728:	e2fb      	b.n	8004d22 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	0010      	movs	r0, r2
 8004732:	4798      	blx	r3
      }
      return;
 8004734:	e2f5      	b.n	8004d22 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004736:	2398      	movs	r3, #152	@ 0x98
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d100      	bne.n	8004742 <HAL_UART_IRQHandler+0x86>
 8004740:	e122      	b.n	8004988 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004742:	239c      	movs	r3, #156	@ 0x9c
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a8c      	ldr	r2, [pc, #560]	@ (800497c <HAL_UART_IRQHandler+0x2c0>)
 800474a:	4013      	ands	r3, r2
 800474c:	d106      	bne.n	800475c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800474e:	23a0      	movs	r3, #160	@ 0xa0
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a8a      	ldr	r2, [pc, #552]	@ (8004980 <HAL_UART_IRQHandler+0x2c4>)
 8004756:	4013      	ands	r3, r2
 8004758:	d100      	bne.n	800475c <HAL_UART_IRQHandler+0xa0>
 800475a:	e115      	b.n	8004988 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800475c:	23a4      	movs	r3, #164	@ 0xa4
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d012      	beq.n	800478e <HAL_UART_IRQHandler+0xd2>
 8004768:	23a0      	movs	r3, #160	@ 0xa0
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4013      	ands	r3, r2
 8004774:	d00b      	beq.n	800478e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2290      	movs	r2, #144	@ 0x90
 8004782:	589b      	ldr	r3, [r3, r2]
 8004784:	2201      	movs	r2, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2190      	movs	r1, #144	@ 0x90
 800478c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800478e:	23a4      	movs	r3, #164	@ 0xa4
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2202      	movs	r2, #2
 8004796:	4013      	ands	r3, r2
 8004798:	d011      	beq.n	80047be <HAL_UART_IRQHandler+0x102>
 800479a:	239c      	movs	r3, #156	@ 0x9c
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4013      	ands	r3, r2
 80047a4:	d00b      	beq.n	80047be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2202      	movs	r2, #2
 80047ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2290      	movs	r2, #144	@ 0x90
 80047b2:	589b      	ldr	r3, [r3, r2]
 80047b4:	2204      	movs	r2, #4
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2190      	movs	r1, #144	@ 0x90
 80047bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047be:	23a4      	movs	r3, #164	@ 0xa4
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2204      	movs	r2, #4
 80047c6:	4013      	ands	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_UART_IRQHandler+0x132>
 80047ca:	239c      	movs	r3, #156	@ 0x9c
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2204      	movs	r2, #4
 80047dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2290      	movs	r2, #144	@ 0x90
 80047e2:	589b      	ldr	r3, [r3, r2]
 80047e4:	2202      	movs	r2, #2
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2190      	movs	r1, #144	@ 0x90
 80047ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ee:	23a4      	movs	r3, #164	@ 0xa4
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2208      	movs	r2, #8
 80047f6:	4013      	ands	r3, r2
 80047f8:	d017      	beq.n	800482a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047fa:	23a0      	movs	r3, #160	@ 0xa0
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2220      	movs	r2, #32
 8004802:	4013      	ands	r3, r2
 8004804:	d105      	bne.n	8004812 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004806:	239c      	movs	r3, #156	@ 0x9c
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5b      	ldr	r2, [pc, #364]	@ (800497c <HAL_UART_IRQHandler+0x2c0>)
 800480e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004810:	d00b      	beq.n	800482a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2208      	movs	r2, #8
 8004818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2290      	movs	r2, #144	@ 0x90
 800481e:	589b      	ldr	r3, [r3, r2]
 8004820:	2208      	movs	r2, #8
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2190      	movs	r1, #144	@ 0x90
 8004828:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800482a:	23a4      	movs	r3, #164	@ 0xa4
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	4013      	ands	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_UART_IRQHandler+0x1a4>
 8004838:	23a0      	movs	r3, #160	@ 0xa0
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	04db      	lsls	r3, r3, #19
 8004842:	4013      	ands	r3, r2
 8004844:	d00c      	beq.n	8004860 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2290      	movs	r2, #144	@ 0x90
 8004854:	589b      	ldr	r3, [r3, r2]
 8004856:	2220      	movs	r2, #32
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2190      	movs	r1, #144	@ 0x90
 800485e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2290      	movs	r2, #144	@ 0x90
 8004864:	589b      	ldr	r3, [r3, r2]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <HAL_UART_IRQHandler+0x1b0>
 800486a:	e25c      	b.n	8004d26 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800486c:	23a4      	movs	r3, #164	@ 0xa4
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2220      	movs	r2, #32
 8004874:	4013      	ands	r3, r2
 8004876:	d015      	beq.n	80048a4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004878:	23a0      	movs	r3, #160	@ 0xa0
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2220      	movs	r2, #32
 8004880:	4013      	ands	r3, r2
 8004882:	d106      	bne.n	8004892 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004884:	239c      	movs	r3, #156	@ 0x9c
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	055b      	lsls	r3, r3, #21
 800488e:	4013      	ands	r3, r2
 8004890:	d008      	beq.n	80048a4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	0010      	movs	r0, r2
 80048a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2290      	movs	r2, #144	@ 0x90
 80048a8:	589b      	ldr	r3, [r3, r2]
 80048aa:	2194      	movs	r1, #148	@ 0x94
 80048ac:	187a      	adds	r2, r7, r1
 80048ae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2240      	movs	r2, #64	@ 0x40
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d004      	beq.n	80048c8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2228      	movs	r2, #40	@ 0x28
 80048c4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c6:	d04c      	beq.n	8004962 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fed0 	bl	8005670 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	4013      	ands	r3, r2
 80048da:	2b40      	cmp	r3, #64	@ 0x40
 80048dc:	d13c      	bne.n	8004958 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80048e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	2090      	movs	r0, #144	@ 0x90
 80048e8:	183a      	adds	r2, r7, r0
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	2301      	movs	r3, #1
 80048ee:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2140      	movs	r1, #64	@ 0x40
 8004904:	438a      	bics	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	183b      	adds	r3, r7, r0
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2280      	movs	r2, #128	@ 0x80
 800491a:	589b      	ldr	r3, [r3, r2]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2280      	movs	r2, #128	@ 0x80
 8004924:	589b      	ldr	r3, [r3, r2]
 8004926:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <HAL_UART_IRQHandler+0x2c8>)
 8004928:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	589b      	ldr	r3, [r3, r2]
 8004930:	0018      	movs	r0, r3
 8004932:	f7fd f8b9 	bl	8001aa8 <HAL_DMA_Abort_IT>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d01c      	beq.n	8004974 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2280      	movs	r2, #128	@ 0x80
 800493e:	589b      	ldr	r3, [r3, r2]
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	2180      	movs	r1, #128	@ 0x80
 8004946:	5852      	ldr	r2, [r2, r1]
 8004948:	0010      	movs	r0, r2
 800494a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	e012      	b.n	8004974 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 fa09 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004956:	e00d      	b.n	8004974 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fa04 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	e008      	b.n	8004974 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 f9ff 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2290      	movs	r2, #144	@ 0x90
 800496e:	2100      	movs	r1, #0
 8004970:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004972:	e1d8      	b.n	8004d26 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	46c0      	nop			@ (mov r8, r8)
    return;
 8004976:	e1d6      	b.n	8004d26 <HAL_UART_IRQHandler+0x66a>
 8004978:	0000080f 	.word	0x0000080f
 800497c:	10000001 	.word	0x10000001
 8004980:	04000120 	.word	0x04000120
 8004984:	0800573d 	.word	0x0800573d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d000      	beq.n	8004992 <HAL_UART_IRQHandler+0x2d6>
 8004990:	e15d      	b.n	8004c4e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004992:	23a4      	movs	r3, #164	@ 0xa4
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2210      	movs	r2, #16
 800499a:	4013      	ands	r3, r2
 800499c:	d100      	bne.n	80049a0 <HAL_UART_IRQHandler+0x2e4>
 800499e:	e156      	b.n	8004c4e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049a0:	23a0      	movs	r3, #160	@ 0xa0
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2210      	movs	r2, #16
 80049a8:	4013      	ands	r3, r2
 80049aa:	d100      	bne.n	80049ae <HAL_UART_IRQHandler+0x2f2>
 80049ac:	e14f      	b.n	8004c4e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2240      	movs	r2, #64	@ 0x40
 80049be:	4013      	ands	r3, r2
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d000      	beq.n	80049c6 <HAL_UART_IRQHandler+0x30a>
 80049c4:	e0c3      	b.n	8004b4e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2280      	movs	r2, #128	@ 0x80
 80049ca:	589b      	ldr	r3, [r3, r2]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	217e      	movs	r1, #126	@ 0x7e
 80049d2:	187b      	adds	r3, r7, r1
 80049d4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d100      	bne.n	80049e0 <HAL_UART_IRQHandler+0x324>
 80049de:	e097      	b.n	8004b10 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	225c      	movs	r2, #92	@ 0x5c
 80049e4:	5a9b      	ldrh	r3, [r3, r2]
 80049e6:	187a      	adds	r2, r7, r1
 80049e8:	8812      	ldrh	r2, [r2, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d300      	bcc.n	80049f0 <HAL_UART_IRQHandler+0x334>
 80049ee:	e08f      	b.n	8004b10 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	187a      	adds	r2, r7, r1
 80049f4:	215e      	movs	r1, #94	@ 0x5e
 80049f6:	8812      	ldrh	r2, [r2, #0]
 80049f8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	589b      	ldr	r3, [r3, r2]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2220      	movs	r2, #32
 8004a06:	4013      	ands	r3, r2
 8004a08:	d170      	bne.n	8004aec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a14:	2301      	movs	r3, #1
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	49c4      	ldr	r1, [pc, #784]	@ (8004d3c <HAL_UART_IRQHandler+0x680>)
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a46:	2301      	movs	r3, #1
 8004a48:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			@ (mov r8, r8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	438a      	bics	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a78:	2301      	movs	r3, #1
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2140      	movs	r1, #64	@ 0x40
 8004a90:	438a      	bics	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a96:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	228c      	movs	r2, #140	@ 0x8c
 8004aa4:	2120      	movs	r1, #32
 8004aa6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ab8:	2301      	movs	r3, #1
 8004aba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2110      	movs	r1, #16
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	589b      	ldr	r3, [r3, r2]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7fc ff7c 	bl	80019e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	225c      	movs	r2, #92	@ 0x5c
 8004af6:	5a9a      	ldrh	r2, [r3, r2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	215e      	movs	r1, #94	@ 0x5e
 8004afc:	5a5b      	ldrh	r3, [r3, r1]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 f935 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b0e:	e10c      	b.n	8004d2a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	225c      	movs	r2, #92	@ 0x5c
 8004b14:	5a9b      	ldrh	r3, [r3, r2]
 8004b16:	227e      	movs	r2, #126	@ 0x7e
 8004b18:	18ba      	adds	r2, r7, r2
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d000      	beq.n	8004b22 <HAL_UART_IRQHandler+0x466>
 8004b20:	e103      	b.n	8004d2a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2280      	movs	r2, #128	@ 0x80
 8004b26:	589b      	ldr	r3, [r3, r2]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d000      	beq.n	8004b36 <HAL_UART_IRQHandler+0x47a>
 8004b34:	e0f9      	b.n	8004d2a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	225c      	movs	r2, #92	@ 0x5c
 8004b40:	5a9a      	ldrh	r2, [r3, r2]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0011      	movs	r1, r2
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 f916 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
      return;
 8004b4c:	e0ed      	b.n	8004d2a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	225c      	movs	r2, #92	@ 0x5c
 8004b52:	5a99      	ldrh	r1, [r3, r2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	225e      	movs	r2, #94	@ 0x5e
 8004b58:	5a9b      	ldrh	r3, [r3, r2]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	208e      	movs	r0, #142	@ 0x8e
 8004b5e:	183b      	adds	r3, r7, r0
 8004b60:	1a8a      	subs	r2, r1, r2
 8004b62:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	225e      	movs	r2, #94	@ 0x5e
 8004b68:	5a9b      	ldrh	r3, [r3, r2]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d100      	bne.n	8004b72 <HAL_UART_IRQHandler+0x4b6>
 8004b70:	e0dd      	b.n	8004d2e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8004b72:	183b      	adds	r3, r7, r0
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d100      	bne.n	8004b7c <HAL_UART_IRQHandler+0x4c0>
 8004b7a:	e0d8      	b.n	8004d2e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b82:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b84:	2488      	movs	r4, #136	@ 0x88
 8004b86:	193a      	adds	r2, r7, r4
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f383 8810 	msr	PRIMASK, r3
}
 8004b94:	46c0      	nop			@ (mov r8, r8)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4967      	ldr	r1, [pc, #412]	@ (8004d40 <HAL_UART_IRQHandler+0x684>)
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	193b      	adds	r3, r7, r4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f383 8810 	msr	PRIMASK, r3
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bba:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bbc:	2484      	movs	r4, #132	@ 0x84
 8004bbe:	193a      	adds	r2, r7, r4
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	495a      	ldr	r1, [pc, #360]	@ (8004d44 <HAL_UART_IRQHandler+0x688>)
 8004bda:	400a      	ands	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	228c      	movs	r2, #140	@ 0x8c
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c08:	2480      	movs	r4, #128	@ 0x80
 8004c0a:	193a      	adds	r2, r7, r4
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2110      	movs	r1, #16
 8004c26:	438a      	bics	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	193b      	adds	r3, r7, r4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c3e:	183b      	adds	r3, r7, r0
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 f896 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c4c:	e06f      	b.n	8004d2e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c4e:	23a4      	movs	r3, #164	@ 0xa4
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	035b      	lsls	r3, r3, #13
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d010      	beq.n	8004c7e <HAL_UART_IRQHandler+0x5c2>
 8004c5c:	239c      	movs	r3, #156	@ 0x9c
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	03db      	lsls	r3, r3, #15
 8004c66:	4013      	ands	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2280      	movs	r2, #128	@ 0x80
 8004c70:	0352      	lsls	r2, r2, #13
 8004c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f001 fa98 	bl	80061ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c7c:	e05a      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c7e:	23a4      	movs	r3, #164	@ 0xa4
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2280      	movs	r2, #128	@ 0x80
 8004c86:	4013      	ands	r3, r2
 8004c88:	d016      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c8a:	23a0      	movs	r3, #160	@ 0xa0
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2280      	movs	r2, #128	@ 0x80
 8004c92:	4013      	ands	r3, r2
 8004c94:	d106      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c96:	239c      	movs	r3, #156	@ 0x9c
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d042      	beq.n	8004d32 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	0010      	movs	r0, r2
 8004cb4:	4798      	blx	r3
    }
    return;
 8004cb6:	e03c      	b.n	8004d32 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cb8:	23a4      	movs	r3, #164	@ 0xa4
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2240      	movs	r2, #64	@ 0x40
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d00a      	beq.n	8004cda <HAL_UART_IRQHandler+0x61e>
 8004cc4:	23a0      	movs	r3, #160	@ 0xa0
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2240      	movs	r2, #64	@ 0x40
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 fd45 	bl	8005762 <UART_EndTransmit_IT>
    return;
 8004cd8:	e02c      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004cda:	23a4      	movs	r3, #164	@ 0xa4
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0x644>
 8004ce8:	23a0      	movs	r3, #160	@ 0xa0
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	05db      	lsls	r3, r3, #23
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f001 fa67 	bl	80061cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cfe:	e019      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d00:	23a4      	movs	r3, #164	@ 0xa4
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	045b      	lsls	r3, r3, #17
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d012      	beq.n	8004d34 <HAL_UART_IRQHandler+0x678>
 8004d0e:	23a0      	movs	r3, #160	@ 0xa0
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	da0d      	bge.n	8004d34 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f001 fa4e 	bl	80061bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d20:	e008      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
      return;
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	e006      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
    return;
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	e004      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
      return;
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	e002      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
      return;
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	e000      	b.n	8004d34 <HAL_UART_IRQHandler+0x678>
    return;
 8004d32:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b02a      	add	sp, #168	@ 0xa8
 8004d38:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	fffffeff 	.word	0xfffffeff
 8004d40:	fffffedf 	.word	0xfffffedf
 8004d44:	effffffe 	.word	0xeffffffe

08004d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	000a      	movs	r2, r1
 8004d82:	1cbb      	adds	r3, r7, #2
 8004d84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b002      	add	sp, #8
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d98:	231e      	movs	r3, #30
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4aab      	ldr	r2, [pc, #684]	@ (800506c <UART_SetConfig+0x2dc>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4aa6      	ldr	r2, [pc, #664]	@ (8005070 <UART_SetConfig+0x2e0>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a9d      	ldr	r2, [pc, #628]	@ (8005074 <UART_SetConfig+0x2e4>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	220f      	movs	r2, #15
 8004e14:	4393      	bics	r3, r2
 8004e16:	0019      	movs	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a93      	ldr	r2, [pc, #588]	@ (8005078 <UART_SetConfig+0x2e8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d127      	bne.n	8004e7e <UART_SetConfig+0xee>
 8004e2e:	4b93      	ldr	r3, [pc, #588]	@ (800507c <UART_SetConfig+0x2ec>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	2203      	movs	r2, #3
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d017      	beq.n	8004e6a <UART_SetConfig+0xda>
 8004e3a:	d81b      	bhi.n	8004e74 <UART_SetConfig+0xe4>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d00a      	beq.n	8004e56 <UART_SetConfig+0xc6>
 8004e40:	d818      	bhi.n	8004e74 <UART_SetConfig+0xe4>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <UART_SetConfig+0xbc>
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00a      	beq.n	8004e60 <UART_SetConfig+0xd0>
 8004e4a:	e013      	b.n	8004e74 <UART_SetConfig+0xe4>
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e021      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e56:	231f      	movs	r3, #31
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e01c      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e60:	231f      	movs	r3, #31
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2204      	movs	r2, #4
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e017      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e6a:	231f      	movs	r3, #31
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	2208      	movs	r2, #8
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e012      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e74:	231f      	movs	r3, #31
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2210      	movs	r2, #16
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e00d      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7f      	ldr	r2, [pc, #508]	@ (8005080 <UART_SetConfig+0x2f0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d104      	bne.n	8004e92 <UART_SetConfig+0x102>
 8004e88:	231f      	movs	r3, #31
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e003      	b.n	8004e9a <UART_SetConfig+0x10a>
 8004e92:	231f      	movs	r3, #31
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	2210      	movs	r2, #16
 8004e98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	2380      	movs	r3, #128	@ 0x80
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d000      	beq.n	8004ea8 <UART_SetConfig+0x118>
 8004ea6:	e06f      	b.n	8004f88 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004ea8:	231f      	movs	r3, #31
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d01f      	beq.n	8004ef2 <UART_SetConfig+0x162>
 8004eb2:	dc22      	bgt.n	8004efa <UART_SetConfig+0x16a>
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d017      	beq.n	8004ee8 <UART_SetConfig+0x158>
 8004eb8:	dc1f      	bgt.n	8004efa <UART_SetConfig+0x16a>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <UART_SetConfig+0x134>
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d005      	beq.n	8004ece <UART_SetConfig+0x13e>
 8004ec2:	e01a      	b.n	8004efa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fe f9b4 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	61bb      	str	r3, [r7, #24]
        break;
 8004ecc:	e01c      	b.n	8004f08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004ece:	4b6b      	ldr	r3, [pc, #428]	@ (800507c <UART_SetConfig+0x2ec>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	3301      	adds	r3, #1
 8004eda:	0019      	movs	r1, r3
 8004edc:	4869      	ldr	r0, [pc, #420]	@ (8005084 <UART_SetConfig+0x2f4>)
 8004ede:	f7fb f91d 	bl	800011c <__udivsi3>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	61bb      	str	r3, [r7, #24]
        break;
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee8:	f7fe f942 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8004eec:	0003      	movs	r3, r0
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e00a      	b.n	8004f08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e006      	b.n	8004f08 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004efe:	231e      	movs	r3, #30
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
        break;
 8004f06:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d100      	bne.n	8004f10 <UART_SetConfig+0x180>
 8004f0e:	e097      	b.n	8005040 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f14:	4b5c      	ldr	r3, [pc, #368]	@ (8005088 <UART_SetConfig+0x2f8>)
 8004f16:	0052      	lsls	r2, r2, #1
 8004f18:	5ad3      	ldrh	r3, [r2, r3]
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	69b8      	ldr	r0, [r7, #24]
 8004f1e:	f7fb f8fd 	bl	800011c <__udivsi3>
 8004f22:	0003      	movs	r3, r0
 8004f24:	005a      	lsls	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	18d2      	adds	r2, r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0019      	movs	r1, r3
 8004f34:	0010      	movs	r0, r2
 8004f36:	f7fb f8f1 	bl	800011c <__udivsi3>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d91c      	bls.n	8004f7e <UART_SetConfig+0x1ee>
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	2380      	movs	r3, #128	@ 0x80
 8004f48:	025b      	lsls	r3, r3, #9
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d217      	bcs.n	8004f7e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	200e      	movs	r0, #14
 8004f54:	183b      	adds	r3, r7, r0
 8004f56:	210f      	movs	r1, #15
 8004f58:	438a      	bics	r2, r1
 8004f5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2207      	movs	r2, #7
 8004f64:	4013      	ands	r3, r2
 8004f66:	b299      	uxth	r1, r3
 8004f68:	183b      	adds	r3, r7, r0
 8004f6a:	183a      	adds	r2, r7, r0
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	183a      	adds	r2, r7, r0
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e060      	b.n	8005040 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7e:	231e      	movs	r3, #30
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e05b      	b.n	8005040 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f88:	231f      	movs	r3, #31
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d01f      	beq.n	8004fd2 <UART_SetConfig+0x242>
 8004f92:	dc22      	bgt.n	8004fda <UART_SetConfig+0x24a>
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d017      	beq.n	8004fc8 <UART_SetConfig+0x238>
 8004f98:	dc1f      	bgt.n	8004fda <UART_SetConfig+0x24a>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <UART_SetConfig+0x214>
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d005      	beq.n	8004fae <UART_SetConfig+0x21e>
 8004fa2:	e01a      	b.n	8004fda <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fe f944 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	61bb      	str	r3, [r7, #24]
        break;
 8004fac:	e01c      	b.n	8004fe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004fae:	4b33      	ldr	r3, [pc, #204]	@ (800507c <UART_SetConfig+0x2ec>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	3301      	adds	r3, #1
 8004fba:	0019      	movs	r1, r3
 8004fbc:	4831      	ldr	r0, [pc, #196]	@ (8005084 <UART_SetConfig+0x2f4>)
 8004fbe:	f7fb f8ad 	bl	800011c <__udivsi3>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	61bb      	str	r3, [r7, #24]
        break;
 8004fc6:	e00f      	b.n	8004fe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc8:	f7fe f8d2 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	61bb      	str	r3, [r7, #24]
        break;
 8004fd0:	e00a      	b.n	8004fe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	61bb      	str	r3, [r7, #24]
        break;
 8004fd8:	e006      	b.n	8004fe8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fde:	231e      	movs	r3, #30
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
        break;
 8004fe6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d028      	beq.n	8005040 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff2:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <UART_SetConfig+0x2f8>)
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	5ad3      	ldrh	r3, [r2, r3]
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	69b8      	ldr	r0, [r7, #24]
 8004ffc:	f7fb f88e 	bl	800011c <__udivsi3>
 8005000:	0003      	movs	r3, r0
 8005002:	001a      	movs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	18d2      	adds	r2, r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	0019      	movs	r1, r3
 8005012:	0010      	movs	r0, r2
 8005014:	f7fb f882 	bl	800011c <__udivsi3>
 8005018:	0003      	movs	r3, r0
 800501a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d90a      	bls.n	8005038 <UART_SetConfig+0x2a8>
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	025b      	lsls	r3, r3, #9
 8005028:	429a      	cmp	r2, r3
 800502a:	d205      	bcs.n	8005038 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e003      	b.n	8005040 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005038:	231e      	movs	r3, #30
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	226a      	movs	r2, #106	@ 0x6a
 8005044:	2101      	movs	r1, #1
 8005046:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2268      	movs	r2, #104	@ 0x68
 800504c:	2101      	movs	r1, #1
 800504e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800505c:	231e      	movs	r3, #30
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	781b      	ldrb	r3, [r3, #0]
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b008      	add	sp, #32
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	cfff69f3 	.word	0xcfff69f3
 8005070:	ffffcfff 	.word	0xffffcfff
 8005074:	11fff4ff 	.word	0x11fff4ff
 8005078:	40013800 	.word	0x40013800
 800507c:	40021000 	.word	0x40021000
 8005080:	40004400 	.word	0x40004400
 8005084:	02dc6c00 	.word	0x02dc6c00
 8005088:	08007ca4 	.word	0x08007ca4

0800508c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	2208      	movs	r2, #8
 800509a:	4013      	ands	r3, r2
 800509c:	d00b      	beq.n	80050b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a4a      	ldr	r2, [pc, #296]	@ (80051d0 <UART_AdvFeatureConfig+0x144>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	2201      	movs	r2, #1
 80050bc:	4013      	ands	r3, r2
 80050be:	d00b      	beq.n	80050d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a43      	ldr	r2, [pc, #268]	@ (80051d4 <UART_AdvFeatureConfig+0x148>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	2202      	movs	r2, #2
 80050de:	4013      	ands	r3, r2
 80050e0:	d00b      	beq.n	80050fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a3b      	ldr	r2, [pc, #236]	@ (80051d8 <UART_AdvFeatureConfig+0x14c>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	2204      	movs	r2, #4
 8005100:	4013      	ands	r3, r2
 8005102:	d00b      	beq.n	800511c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4a34      	ldr	r2, [pc, #208]	@ (80051dc <UART_AdvFeatureConfig+0x150>)
 800510c:	4013      	ands	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	2210      	movs	r2, #16
 8005122:	4013      	ands	r3, r2
 8005124:	d00b      	beq.n	800513e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a2c      	ldr	r2, [pc, #176]	@ (80051e0 <UART_AdvFeatureConfig+0x154>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	2220      	movs	r2, #32
 8005144:	4013      	ands	r3, r2
 8005146:	d00b      	beq.n	8005160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	4a25      	ldr	r2, [pc, #148]	@ (80051e4 <UART_AdvFeatureConfig+0x158>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2240      	movs	r2, #64	@ 0x40
 8005166:	4013      	ands	r3, r2
 8005168:	d01d      	beq.n	80051a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <UART_AdvFeatureConfig+0x15c>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005186:	2380      	movs	r3, #128	@ 0x80
 8005188:	035b      	lsls	r3, r3, #13
 800518a:	429a      	cmp	r2, r3
 800518c:	d10b      	bne.n	80051a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <UART_AdvFeatureConfig+0x160>)
 8005196:	4013      	ands	r3, r2
 8005198:	0019      	movs	r1, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	4013      	ands	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4a0e      	ldr	r2, [pc, #56]	@ (80051f0 <UART_AdvFeatureConfig+0x164>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	ffff7fff 	.word	0xffff7fff
 80051d4:	fffdffff 	.word	0xfffdffff
 80051d8:	fffeffff 	.word	0xfffeffff
 80051dc:	fffbffff 	.word	0xfffbffff
 80051e0:	ffffefff 	.word	0xffffefff
 80051e4:	ffffdfff 	.word	0xffffdfff
 80051e8:	ffefffff 	.word	0xffefffff
 80051ec:	ff9fffff 	.word	0xff9fffff
 80051f0:	fff7ffff 	.word	0xfff7ffff

080051f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b092      	sub	sp, #72	@ 0x48
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2290      	movs	r2, #144	@ 0x90
 8005200:	2100      	movs	r1, #0
 8005202:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005204:	f7fc fae2 	bl	80017cc <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	4013      	ands	r3, r2
 8005216:	2b08      	cmp	r3, #8
 8005218:	d12d      	bne.n	8005276 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521c:	2280      	movs	r2, #128	@ 0x80
 800521e:	0391      	lsls	r1, r2, #14
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4a47      	ldr	r2, [pc, #284]	@ (8005340 <UART_CheckIdleState+0x14c>)
 8005224:	9200      	str	r2, [sp, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	f000 f88e 	bl	8005348 <UART_WaitOnFlagUntilTimeout>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d022      	beq.n	8005276 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005230:	f3ef 8310 	mrs	r3, PRIMASK
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800523a:	2301      	movs	r3, #1
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2180      	movs	r1, #128	@ 0x80
 8005252:	438a      	bics	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2288      	movs	r2, #136	@ 0x88
 8005266:	2120      	movs	r1, #32
 8005268:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2284      	movs	r2, #132	@ 0x84
 800526e:	2100      	movs	r1, #0
 8005270:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e060      	b.n	8005338 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2204      	movs	r2, #4
 800527e:	4013      	ands	r3, r2
 8005280:	2b04      	cmp	r3, #4
 8005282:	d146      	bne.n	8005312 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005286:	2280      	movs	r2, #128	@ 0x80
 8005288:	03d1      	lsls	r1, r2, #15
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	@ (8005340 <UART_CheckIdleState+0x14c>)
 800528e:	9200      	str	r2, [sp, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	f000 f859 	bl	8005348 <UART_WaitOnFlagUntilTimeout>
 8005296:	1e03      	subs	r3, r0, #0
 8005298:	d03b      	beq.n	8005312 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	60fb      	str	r3, [r7, #12]
  return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4922      	ldr	r1, [pc, #136]	@ (8005344 <UART_CheckIdleState+0x150>)
 80052bc:	400a      	ands	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052cc:	f3ef 8310 	mrs	r3, PRIMASK
 80052d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80052d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d6:	2301      	movs	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f383 8810 	msr	PRIMASK, r3
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	438a      	bics	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	228c      	movs	r2, #140	@ 0x8c
 8005302:	2120      	movs	r1, #32
 8005304:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2284      	movs	r2, #132	@ 0x84
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e012      	b.n	8005338 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2288      	movs	r2, #136	@ 0x88
 8005316:	2120      	movs	r1, #32
 8005318:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	228c      	movs	r2, #140	@ 0x8c
 800531e:	2120      	movs	r1, #32
 8005320:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2284      	movs	r2, #132	@ 0x84
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b010      	add	sp, #64	@ 0x40
 800533e:	bd80      	pop	{r7, pc}
 8005340:	01ffffff 	.word	0x01ffffff
 8005344:	fffffedf 	.word	0xfffffedf

08005348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	1dfb      	adds	r3, r7, #7
 8005356:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005358:	e051      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3301      	adds	r3, #1
 800535e:	d04e      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005360:	f7fc fa34 	bl	80017cc <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e051      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2204      	movs	r2, #4
 8005382:	4013      	ands	r3, r2
 8005384:	d03b      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d038      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b40      	cmp	r3, #64	@ 0x40
 8005390:	d035      	beq.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	2208      	movs	r2, #8
 800539a:	4013      	ands	r3, r2
 800539c:	2b08      	cmp	r3, #8
 800539e:	d111      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2208      	movs	r2, #8
 80053a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 f960 	bl	8005670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2290      	movs	r2, #144	@ 0x90
 80053b4:	2108      	movs	r1, #8
 80053b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2284      	movs	r2, #132	@ 0x84
 80053bc:	2100      	movs	r1, #0
 80053be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e02c      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	2380      	movs	r3, #128	@ 0x80
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	401a      	ands	r2, r3
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d112      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2280      	movs	r2, #128	@ 0x80
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f943 	bl	8005670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2290      	movs	r2, #144	@ 0x90
 80053ee:	2120      	movs	r1, #32
 80053f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2284      	movs	r2, #132	@ 0x84
 80053f6:	2100      	movs	r1, #0
 80053f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e00f      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	425a      	negs	r2, r3
 800540e:	4153      	adcs	r3, r2
 8005410:	b2db      	uxtb	r3, r3
 8005412:	001a      	movs	r2, r3
 8005414:	1dfb      	adds	r3, r7, #7
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d09e      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b004      	add	sp, #16
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b098      	sub	sp, #96	@ 0x60
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	1dbb      	adds	r3, r7, #6
 8005434:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1dba      	adds	r2, r7, #6
 8005440:	215c      	movs	r1, #92	@ 0x5c
 8005442:	8812      	ldrh	r2, [r2, #0]
 8005444:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1dba      	adds	r2, r7, #6
 800544a:	215e      	movs	r1, #94	@ 0x5e
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	015b      	lsls	r3, r3, #5
 800545e:	429a      	cmp	r2, r3
 8005460:	d10d      	bne.n	800547e <UART_Start_Receive_IT+0x56>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <UART_Start_Receive_IT+0x4c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2260      	movs	r2, #96	@ 0x60
 800546e:	497b      	ldr	r1, [pc, #492]	@ (800565c <UART_Start_Receive_IT+0x234>)
 8005470:	5299      	strh	r1, [r3, r2]
 8005472:	e02e      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2260      	movs	r2, #96	@ 0x60
 8005478:	21ff      	movs	r1, #255	@ 0xff
 800547a:	5299      	strh	r1, [r3, r2]
 800547c:	e029      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <UART_Start_Receive_IT+0x7a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <UART_Start_Receive_IT+0x70>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2260      	movs	r2, #96	@ 0x60
 8005492:	21ff      	movs	r1, #255	@ 0xff
 8005494:	5299      	strh	r1, [r3, r2]
 8005496:	e01c      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2260      	movs	r2, #96	@ 0x60
 800549c:	217f      	movs	r1, #127	@ 0x7f
 800549e:	5299      	strh	r1, [r3, r2]
 80054a0:	e017      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	2380      	movs	r3, #128	@ 0x80
 80054a8:	055b      	lsls	r3, r3, #21
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d10d      	bne.n	80054ca <UART_Start_Receive_IT+0xa2>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <UART_Start_Receive_IT+0x98>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2260      	movs	r2, #96	@ 0x60
 80054ba:	217f      	movs	r1, #127	@ 0x7f
 80054bc:	5299      	strh	r1, [r3, r2]
 80054be:	e008      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2260      	movs	r2, #96	@ 0x60
 80054c4:	213f      	movs	r1, #63	@ 0x3f
 80054c6:	5299      	strh	r1, [r3, r2]
 80054c8:	e003      	b.n	80054d2 <UART_Start_Receive_IT+0xaa>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2260      	movs	r2, #96	@ 0x60
 80054ce:	2100      	movs	r1, #0
 80054d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2290      	movs	r2, #144	@ 0x90
 80054d6:	2100      	movs	r1, #0
 80054d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	228c      	movs	r2, #140	@ 0x8c
 80054de:	2122      	movs	r1, #34	@ 0x22
 80054e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054e2:	f3ef 8310 	mrs	r3, PRIMASK
 80054e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80054e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ec:	2301      	movs	r3, #1
 80054ee:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f2:	f383 8810 	msr	PRIMASK, r3
}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2101      	movs	r1, #1
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800550a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800550e:	f383 8810 	msr	PRIMASK, r3
}
 8005512:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	059b      	lsls	r3, r3, #22
 800551c:	429a      	cmp	r2, r3
 800551e:	d150      	bne.n	80055c2 <UART_Start_Receive_IT+0x19a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2268      	movs	r2, #104	@ 0x68
 8005524:	5a9b      	ldrh	r3, [r3, r2]
 8005526:	1dba      	adds	r2, r7, #6
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d349      	bcc.n	80055c2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	2380      	movs	r3, #128	@ 0x80
 8005534:	015b      	lsls	r3, r3, #5
 8005536:	429a      	cmp	r2, r3
 8005538:	d107      	bne.n	800554a <UART_Start_Receive_IT+0x122>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4a46      	ldr	r2, [pc, #280]	@ (8005660 <UART_Start_Receive_IT+0x238>)
 8005546:	675a      	str	r2, [r3, #116]	@ 0x74
 8005548:	e002      	b.n	8005550 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a45      	ldr	r2, [pc, #276]	@ (8005664 <UART_Start_Receive_IT+0x23c>)
 800554e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d019      	beq.n	800558c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005558:	f3ef 8310 	mrs	r3, PRIMASK
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005562:	2301      	movs	r3, #1
 8005564:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	f383 8810 	msr	PRIMASK, r3
}
 800556c:	46c0      	nop			@ (mov r8, r8)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	0049      	lsls	r1, r1, #1
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	f383 8810 	msr	PRIMASK, r3
}
 800558a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800558c:	f3ef 8310 	mrs	r3, PRIMASK
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005594:	657b      	str	r3, [r7, #84]	@ 0x54
 8005596:	2301      	movs	r3, #1
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559c:	f383 8810 	msr	PRIMASK, r3
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2180      	movs	r1, #128	@ 0x80
 80055ae:	0549      	lsls	r1, r1, #21
 80055b0:	430a      	orrs	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	e047      	b.n	8005652 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	015b      	lsls	r3, r3, #5
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d107      	bne.n	80055de <UART_Start_Receive_IT+0x1b6>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a23      	ldr	r2, [pc, #140]	@ (8005668 <UART_Start_Receive_IT+0x240>)
 80055da:	675a      	str	r2, [r3, #116]	@ 0x74
 80055dc:	e002      	b.n	80055e4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a22      	ldr	r2, [pc, #136]	@ (800566c <UART_Start_Receive_IT+0x244>)
 80055e2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d019      	beq.n	8005620 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80055f2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80055f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f6:	2301      	movs	r3, #1
 80055f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2190      	movs	r1, #144	@ 0x90
 800560e:	0049      	lsls	r1, r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	f383 8810 	msr	PRIMASK, r3
}
 800561e:	e018      	b.n	8005652 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005620:	f3ef 8310 	mrs	r3, PRIMASK
 8005624:	613b      	str	r3, [r7, #16]
  return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005628:	653b      	str	r3, [r7, #80]	@ 0x50
 800562a:	2301      	movs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f383 8810 	msr	PRIMASK, r3
}
 8005634:	46c0      	nop			@ (mov r8, r8)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2120      	movs	r1, #32
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005648:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b018      	add	sp, #96	@ 0x60
 800565a:	bd80      	pop	{r7, pc}
 800565c:	000001ff 	.word	0x000001ff
 8005660:	08005e61 	.word	0x08005e61
 8005664:	08005b2d 	.word	0x08005b2d
 8005668:	08005975 	.word	0x08005975
 800566c:	080057bd 	.word	0x080057bd

08005670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	@ 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	617b      	str	r3, [r7, #20]
  return(result);
 800567e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
 8005682:	2301      	movs	r3, #1
 8005684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4926      	ldr	r1, [pc, #152]	@ (8005734 <UART_EndRxTransfer+0xc4>)
 800569a:	400a      	ands	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	623b      	str	r3, [r7, #32]
  return(result);
 80056b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b4:	2301      	movs	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	491b      	ldr	r1, [pc, #108]	@ (8005738 <UART_EndRxTransfer+0xc8>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d118      	bne.n	8005716 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056e4:	f3ef 8310 	mrs	r3, PRIMASK
 80056e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ee:	2301      	movs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2110      	movs	r1, #16
 8005706:	438a      	bics	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	228c      	movs	r2, #140	@ 0x8c
 800571a:	2120      	movs	r1, #32
 800571c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b00e      	add	sp, #56	@ 0x38
 8005730:	bd80      	pop	{r7, pc}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	fffffedf 	.word	0xfffffedf
 8005738:	effffffe 	.word	0xeffffffe

0800573c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	225e      	movs	r2, #94	@ 0x5e
 800574e:	2100      	movs	r1, #0
 8005750:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fb07 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800576a:	f3ef 8310 	mrs	r3, PRIMASK
 800576e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005770:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	2301      	movs	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2140      	movs	r1, #64	@ 0x40
 800578c:	438a      	bics	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f383 8810 	msr	PRIMASK, r3
}
 800579a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2288      	movs	r2, #136	@ 0x88
 80057a0:	2120      	movs	r1, #32
 80057a2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7ff facb 	bl	8004d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b006      	add	sp, #24
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b094      	sub	sp, #80	@ 0x50
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057c4:	204e      	movs	r0, #78	@ 0x4e
 80057c6:	183b      	adds	r3, r7, r0
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	2160      	movs	r1, #96	@ 0x60
 80057cc:	5a52      	ldrh	r2, [r2, r1]
 80057ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	228c      	movs	r2, #140	@ 0x8c
 80057d4:	589b      	ldr	r3, [r3, r2]
 80057d6:	2b22      	cmp	r3, #34	@ 0x22
 80057d8:	d000      	beq.n	80057dc <UART_RxISR_8BIT+0x20>
 80057da:	e0ba      	b.n	8005952 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057e2:	214c      	movs	r1, #76	@ 0x4c
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	183b      	adds	r3, r7, r0
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	400a      	ands	r2, r1
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	225e      	movs	r2, #94	@ 0x5e
 800580c:	5a9b      	ldrh	r3, [r3, r2]
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b299      	uxth	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	225e      	movs	r2, #94	@ 0x5e
 8005818:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	225e      	movs	r2, #94	@ 0x5e
 800581e:	5a9b      	ldrh	r3, [r3, r2]
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d000      	beq.n	8005828 <UART_RxISR_8BIT+0x6c>
 8005826:	e09c      	b.n	8005962 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005828:	f3ef 8310 	mrs	r3, PRIMASK
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005832:	2301      	movs	r3, #1
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			@ (mov r8, r8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4948      	ldr	r1, [pc, #288]	@ (800596c <UART_RxISR_8BIT+0x1b0>)
 800584a:	400a      	ands	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	f383 8810 	msr	PRIMASK, r3
}
 8005858:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800585a:	f3ef 8310 	mrs	r3, PRIMASK
 800585e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	647b      	str	r3, [r7, #68]	@ 0x44
 8005864:	2301      	movs	r3, #1
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	f383 8810 	msr	PRIMASK, r3
}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2101      	movs	r1, #1
 800587c:	438a      	bics	r2, r1
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	f383 8810 	msr	PRIMASK, r3
}
 800588a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	228c      	movs	r2, #140	@ 0x8c
 8005890:	2120      	movs	r1, #32
 8005892:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	041b      	lsls	r3, r3, #16
 80058aa:	4013      	ands	r3, r2
 80058ac:	d018      	beq.n	80058e0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80058b4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058b8:	2301      	movs	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f383 8810 	msr	PRIMASK, r3
}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4928      	ldr	r1, [pc, #160]	@ (8005970 <UART_RxISR_8BIT+0x1b4>)
 80058d0:	400a      	ands	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f383 8810 	msr	PRIMASK, r3
}
 80058de:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d12f      	bne.n	8005948 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f8:	2301      	movs	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f383 8810 	msr	PRIMASK, r3
}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2110      	movs	r1, #16
 8005910:	438a      	bics	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2210      	movs	r2, #16
 8005928:	4013      	ands	r3, r2
 800592a:	2b10      	cmp	r3, #16
 800592c:	d103      	bne.n	8005936 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2210      	movs	r2, #16
 8005934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	225c      	movs	r2, #92	@ 0x5c
 800593a:	5a9a      	ldrh	r2, [r3, r2]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	0011      	movs	r1, r2
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff fa19 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005946:	e00c      	b.n	8005962 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff fa04 	bl	8004d58 <HAL_UART_RxCpltCallback>
}
 8005950:	e007      	b.n	8005962 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2108      	movs	r1, #8
 800595e:	430a      	orrs	r2, r1
 8005960:	619a      	str	r2, [r3, #24]
}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b014      	add	sp, #80	@ 0x50
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	fffffedf 	.word	0xfffffedf
 8005970:	fbffffff 	.word	0xfbffffff

08005974 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b094      	sub	sp, #80	@ 0x50
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800597c:	204e      	movs	r0, #78	@ 0x4e
 800597e:	183b      	adds	r3, r7, r0
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	2160      	movs	r1, #96	@ 0x60
 8005984:	5a52      	ldrh	r2, [r2, r1]
 8005986:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	228c      	movs	r2, #140	@ 0x8c
 800598c:	589b      	ldr	r3, [r3, r2]
 800598e:	2b22      	cmp	r3, #34	@ 0x22
 8005990:	d000      	beq.n	8005994 <UART_RxISR_16BIT+0x20>
 8005992:	e0ba      	b.n	8005b0a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800599a:	214c      	movs	r1, #76	@ 0x4c
 800599c:	187b      	adds	r3, r7, r1
 800599e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	183a      	adds	r2, r7, r0
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	8812      	ldrh	r2, [r2, #0]
 80059ae:	4013      	ands	r3, r2
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ba:	1c9a      	adds	r2, r3, #2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	225e      	movs	r2, #94	@ 0x5e
 80059c4:	5a9b      	ldrh	r3, [r3, r2]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b299      	uxth	r1, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	225e      	movs	r2, #94	@ 0x5e
 80059d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	225e      	movs	r2, #94	@ 0x5e
 80059d6:	5a9b      	ldrh	r3, [r3, r2]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d000      	beq.n	80059e0 <UART_RxISR_16BIT+0x6c>
 80059de:	e09c      	b.n	8005b1a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	623b      	str	r3, [r7, #32]
  return(result);
 80059e6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ea:	2301      	movs	r3, #1
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4948      	ldr	r1, [pc, #288]	@ (8005b24 <UART_RxISR_16BIT+0x1b0>)
 8005a02:	400a      	ands	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a12:	f3ef 8310 	mrs	r3, PRIMASK
 8005a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			@ (mov r8, r8)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	438a      	bics	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	228c      	movs	r2, #140	@ 0x8c
 8005a48:	2120      	movs	r1, #32
 8005a4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	4013      	ands	r3, r2
 8005a64:	d018      	beq.n	8005a98 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a66:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a6c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a70:	2301      	movs	r3, #1
 8005a72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4928      	ldr	r1, [pc, #160]	@ (8005b28 <UART_RxISR_16BIT+0x1b4>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f383 8810 	msr	PRIMASK, r3
}
 8005a96:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d12f      	bne.n	8005b00 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	438a      	bics	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d103      	bne.n	8005aee <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2210      	movs	r2, #16
 8005aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	225c      	movs	r2, #92	@ 0x5c
 8005af2:	5a9a      	ldrh	r2, [r3, r2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff f93d 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005afe:	e00c      	b.n	8005b1a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7ff f928 	bl	8004d58 <HAL_UART_RxCpltCallback>
}
 8005b08:	e007      	b.n	8005b1a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2108      	movs	r1, #8
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b014      	add	sp, #80	@ 0x50
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	fffffedf 	.word	0xfffffedf
 8005b28:	fbffffff 	.word	0xfbffffff

08005b2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0a0      	sub	sp, #128	@ 0x80
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b34:	237a      	movs	r3, #122	@ 0x7a
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	2160      	movs	r1, #96	@ 0x60
 8005b3c:	5a52      	ldrh	r2, [r2, r1]
 8005b3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	228c      	movs	r2, #140	@ 0x8c
 8005b5c:	589b      	ldr	r3, [r3, r2]
 8005b5e:	2b22      	cmp	r3, #34	@ 0x22
 8005b60:	d000      	beq.n	8005b64 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005b62:	e166      	b.n	8005e32 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b64:	236e      	movs	r3, #110	@ 0x6e
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	2168      	movs	r1, #104	@ 0x68
 8005b6c:	5a52      	ldrh	r2, [r2, r1]
 8005b6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b70:	e10d      	b.n	8005d8e <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b78:	216c      	movs	r1, #108	@ 0x6c
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	237a      	movs	r3, #122	@ 0x7a
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b2d9      	uxtb	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	400a      	ands	r2, r1
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	225e      	movs	r2, #94	@ 0x5e
 8005ba4:	5a9b      	ldrh	r3, [r3, r2]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b299      	uxth	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	225e      	movs	r2, #94	@ 0x5e
 8005bb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bbc:	2207      	movs	r2, #7
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d049      	beq.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d010      	beq.n	8005bec <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005bca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2290      	movs	r2, #144	@ 0x90
 8005be0:	589b      	ldr	r3, [r3, r2]
 8005be2:	2201      	movs	r2, #1
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2190      	movs	r1, #144	@ 0x90
 8005bea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bee:	2202      	movs	r2, #2
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2202      	movs	r2, #2
 8005c02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2290      	movs	r2, #144	@ 0x90
 8005c08:	589b      	ldr	r3, [r3, r2]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2190      	movs	r1, #144	@ 0x90
 8005c12:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c16:	2204      	movs	r2, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <UART_RxISR_8BIT_FIFOEN+0x110>
 8005c1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4013      	ands	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2290      	movs	r2, #144	@ 0x90
 8005c30:	589b      	ldr	r3, [r3, r2]
 8005c32:	2202      	movs	r2, #2
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2190      	movs	r1, #144	@ 0x90
 8005c3a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2290      	movs	r2, #144	@ 0x90
 8005c40:	589b      	ldr	r3, [r3, r2]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff f88d 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2290      	movs	r2, #144	@ 0x90
 8005c52:	2100      	movs	r1, #0
 8005c54:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	225e      	movs	r2, #94	@ 0x5e
 8005c5a:	5a9b      	ldrh	r3, [r3, r2]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d000      	beq.n	8005c64 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005c62:	e094      	b.n	8005d8e <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c64:	f3ef 8310 	mrs	r3, PRIMASK
 8005c68:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c6e:	2301      	movs	r3, #1
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			@ (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4971      	ldr	r1, [pc, #452]	@ (8005e4c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4966      	ldr	r1, [pc, #408]	@ (8005e50 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	228c      	movs	r2, #140	@ 0x8c
 8005ccc:	2120      	movs	r1, #32
 8005cce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cea:	f3ef 8310 	mrs	r3, PRIMASK
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4952      	ldr	r1, [pc, #328]	@ (8005e54 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d12:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	f383 8810 	msr	PRIMASK, r3
}
 8005d1a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d12f      	bne.n	8005d84 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8005d30:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d34:	2301      	movs	r3, #1
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2210      	movs	r2, #16
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d103      	bne.n	8005d72 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	225c      	movs	r2, #92	@ 0x5c
 8005d76:	5a9a      	ldrh	r2, [r3, r2]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7fe fffb 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005d82:	e00e      	b.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7fe ffe6 	bl	8004d58 <HAL_UART_RxCpltCallback>
        break;
 8005d8c:	e009      	b.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d8e:	236e      	movs	r3, #110	@ 0x6e
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005d98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d000      	beq.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005da0:	e6e7      	b.n	8005b72 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005da2:	205a      	movs	r0, #90	@ 0x5a
 8005da4:	183b      	adds	r3, r7, r0
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	215e      	movs	r1, #94	@ 0x5e
 8005daa:	5a52      	ldrh	r2, [r2, r1]
 8005dac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dae:	0001      	movs	r1, r0
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d044      	beq.n	8005e42 <UART_RxISR_8BIT_FIFOEN+0x316>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2268      	movs	r2, #104	@ 0x68
 8005dbc:	5a9b      	ldrh	r3, [r3, r2]
 8005dbe:	187a      	adds	r2, r7, r1
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d23d      	bcs.n	8005e42 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f383 8810 	msr	PRIMASK, r3
}
 8005dda:	46c0      	nop			@ (mov r8, r8)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	491c      	ldr	r1, [pc, #112]	@ (8005e58 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005de8:	400a      	ands	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	617b      	str	r3, [r7, #20]
  return(result);
 8005e04:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e08:	2301      	movs	r3, #1
 8005e0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2120      	movs	r1, #32
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e30:	e007      	b.n	8005e42 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2108      	movs	r1, #8
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	619a      	str	r2, [r3, #24]
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b020      	add	sp, #128	@ 0x80
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	fffffeff 	.word	0xfffffeff
 8005e50:	effffffe 	.word	0xeffffffe
 8005e54:	fbffffff 	.word	0xfbffffff
 8005e58:	efffffff 	.word	0xefffffff
 8005e5c:	080057bd 	.word	0x080057bd

08005e60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b0a2      	sub	sp, #136	@ 0x88
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e68:	2382      	movs	r3, #130	@ 0x82
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	2160      	movs	r1, #96	@ 0x60
 8005e70:	5a52      	ldrh	r2, [r2, r1]
 8005e72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	2284      	movs	r2, #132	@ 0x84
 8005e7c:	18ba      	adds	r2, r7, r2
 8005e7e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	228c      	movs	r2, #140	@ 0x8c
 8005e94:	589b      	ldr	r3, [r3, r2]
 8005e96:	2b22      	cmp	r3, #34	@ 0x22
 8005e98:	d000      	beq.n	8005e9c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005e9a:	e170      	b.n	800617e <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e9c:	2376      	movs	r3, #118	@ 0x76
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	2168      	movs	r1, #104	@ 0x68
 8005ea4:	5a52      	ldrh	r2, [r2, r1]
 8005ea6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ea8:	e115      	b.n	80060d6 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb0:	2174      	movs	r1, #116	@ 0x74
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eba:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	2282      	movs	r2, #130	@ 0x82
 8005ec0:	18ba      	adds	r2, r7, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed2:	1c9a      	adds	r2, r3, #2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	225e      	movs	r2, #94	@ 0x5e
 8005edc:	5a9b      	ldrh	r3, [r3, r2]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b299      	uxth	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	225e      	movs	r2, #94	@ 0x5e
 8005ee8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2184      	movs	r1, #132	@ 0x84
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2207      	movs	r2, #7
 8005efc:	4013      	ands	r3, r2
 8005efe:	d04e      	beq.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	d010      	beq.n	8005f2c <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005f0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4013      	ands	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2290      	movs	r2, #144	@ 0x90
 8005f20:	589b      	ldr	r3, [r3, r2]
 8005f22:	2201      	movs	r2, #1
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2190      	movs	r1, #144	@ 0x90
 8005f2a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f2c:	2384      	movs	r3, #132	@ 0x84
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2202      	movs	r2, #2
 8005f34:	4013      	ands	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2202      	movs	r2, #2
 8005f46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2290      	movs	r2, #144	@ 0x90
 8005f4c:	589b      	ldr	r3, [r3, r2]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2190      	movs	r1, #144	@ 0x90
 8005f56:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f58:	2384      	movs	r3, #132	@ 0x84
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	4013      	ands	r3, r2
 8005f62:	d00f      	beq.n	8005f84 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f66:	2201      	movs	r2, #1
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2204      	movs	r2, #4
 8005f72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2290      	movs	r2, #144	@ 0x90
 8005f78:	589b      	ldr	r3, [r3, r2]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2190      	movs	r1, #144	@ 0x90
 8005f82:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2290      	movs	r2, #144	@ 0x90
 8005f88:	589b      	ldr	r3, [r3, r2]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fe fee9 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2290      	movs	r2, #144	@ 0x90
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	225e      	movs	r2, #94	@ 0x5e
 8005fa2:	5a9b      	ldrh	r3, [r3, r2]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d000      	beq.n	8005fac <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005faa:	e094      	b.n	80060d6 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fac:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fbc:	f383 8810 	msr	PRIMASK, r3
}
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4972      	ldr	r1, [pc, #456]	@ (8006198 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005fce:	400a      	ands	r2, r1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fde:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fe8:	2301      	movs	r3, #1
 8005fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fee:	f383 8810 	msr	PRIMASK, r3
}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4967      	ldr	r1, [pc, #412]	@ (800619c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8006000:	400a      	ands	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006006:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800600a:	f383 8810 	msr	PRIMASK, r3
}
 800600e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	228c      	movs	r2, #140	@ 0x8c
 8006014:	2120      	movs	r1, #32
 8006016:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	2380      	movs	r3, #128	@ 0x80
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	4013      	ands	r3, r2
 8006030:	d018      	beq.n	8006064 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006032:	f3ef 8310 	mrs	r3, PRIMASK
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800603a:	667b      	str	r3, [r7, #100]	@ 0x64
 800603c:	2301      	movs	r3, #1
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	f383 8810 	msr	PRIMASK, r3
}
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4953      	ldr	r1, [pc, #332]	@ (80061a0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006054:	400a      	ands	r2, r1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800605a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	f383 8810 	msr	PRIMASK, r3
}
 8006062:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d12f      	bne.n	80060cc <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	663b      	str	r3, [r7, #96]	@ 0x60
 800607c:	2301      	movs	r3, #1
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	f383 8810 	msr	PRIMASK, r3
}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2110      	movs	r1, #16
 8006094:	438a      	bics	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	2210      	movs	r2, #16
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d103      	bne.n	80060ba <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2210      	movs	r2, #16
 80060b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	225c      	movs	r2, #92	@ 0x5c
 80060be:	5a9a      	ldrh	r2, [r3, r2]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0011      	movs	r1, r2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fe fe57 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80060ca:	e010      	b.n	80060ee <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fe fe42 	bl	8004d58 <HAL_UART_RxCpltCallback>
        break;
 80060d4:	e00b      	b.n	80060ee <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060d6:	2376      	movs	r3, #118	@ 0x76
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d006      	beq.n	80060ee <UART_RxISR_16BIT_FIFOEN+0x28e>
 80060e0:	2384      	movs	r3, #132	@ 0x84
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2220      	movs	r2, #32
 80060e8:	4013      	ands	r3, r2
 80060ea:	d000      	beq.n	80060ee <UART_RxISR_16BIT_FIFOEN+0x28e>
 80060ec:	e6dd      	b.n	8005eaa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060ee:	205e      	movs	r0, #94	@ 0x5e
 80060f0:	183b      	adds	r3, r7, r0
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	215e      	movs	r1, #94	@ 0x5e
 80060f6:	5a52      	ldrh	r2, [r2, r1]
 80060f8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060fa:	0001      	movs	r1, r0
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d044      	beq.n	800618e <UART_RxISR_16BIT_FIFOEN+0x32e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2268      	movs	r2, #104	@ 0x68
 8006108:	5a9b      	ldrh	r3, [r3, r2]
 800610a:	187a      	adds	r2, r7, r1
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d23d      	bcs.n	800618e <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006112:	f3ef 8310 	mrs	r3, PRIMASK
 8006116:	60fb      	str	r3, [r7, #12]
  return(result);
 8006118:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800611a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800611c:	2301      	movs	r3, #1
 800611e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f383 8810 	msr	PRIMASK, r3
}
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	491c      	ldr	r1, [pc, #112]	@ (80061a4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8006134:	400a      	ands	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
 8006138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800613a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f383 8810 	msr	PRIMASK, r3
}
 8006142:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006148:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800614a:	f3ef 8310 	mrs	r3, PRIMASK
 800614e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006152:	657b      	str	r3, [r7, #84]	@ 0x54
 8006154:	2301      	movs	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f383 8810 	msr	PRIMASK, r3
}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2120      	movs	r1, #32
 800616c:	430a      	orrs	r2, r1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006172:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800617c:	e007      	b.n	800618e <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2108      	movs	r1, #8
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
}
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b022      	add	sp, #136	@ 0x88
 8006194:	bd80      	pop	{r7, pc}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	fffffeff 	.word	0xfffffeff
 800619c:	effffffe 	.word	0xeffffffe
 80061a0:	fbffffff 	.word	0xfbffffff
 80061a4:	efffffff 	.word	0xefffffff
 80061a8:	08005975 	.word	0x08005975

080061ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b002      	add	sp, #8
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2284      	movs	r2, #132	@ 0x84
 80061e8:	5c9b      	ldrb	r3, [r3, r2]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e027      	b.n	8006242 <HAL_UARTEx_DisableFifoMode+0x66>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2284      	movs	r2, #132	@ 0x84
 80061f6:	2101      	movs	r1, #1
 80061f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2288      	movs	r2, #136	@ 0x88
 80061fe:	2124      	movs	r1, #36	@ 0x24
 8006200:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	438a      	bics	r2, r1
 8006218:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a0b      	ldr	r2, [pc, #44]	@ (800624c <HAL_UARTEx_DisableFifoMode+0x70>)
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2288      	movs	r2, #136	@ 0x88
 8006234:	2120      	movs	r1, #32
 8006236:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2284      	movs	r2, #132	@ 0x84
 800623c:	2100      	movs	r1, #0
 800623e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	b004      	add	sp, #16
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	dfffffff 	.word	0xdfffffff

08006250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2284      	movs	r2, #132	@ 0x84
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006264:	2302      	movs	r3, #2
 8006266:	e02e      	b.n	80062c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2284      	movs	r2, #132	@ 0x84
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2288      	movs	r2, #136	@ 0x88
 8006274:	2124      	movs	r1, #36	@ 0x24
 8006276:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2101      	movs	r1, #1
 800628c:	438a      	bics	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	08d9      	lsrs	r1, r3, #3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f854 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2288      	movs	r2, #136	@ 0x88
 80062b8:	2120      	movs	r1, #32
 80062ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2284      	movs	r2, #132	@ 0x84
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b004      	add	sp, #16
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2284      	movs	r2, #132	@ 0x84
 80062de:	5c9b      	ldrb	r3, [r3, r2]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e02f      	b.n	8006348 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2284      	movs	r2, #132	@ 0x84
 80062ec:	2101      	movs	r1, #1
 80062ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2288      	movs	r2, #136	@ 0x88
 80062f4:	2124      	movs	r1, #36	@ 0x24
 80062f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	438a      	bics	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	4a0e      	ldr	r2, [pc, #56]	@ (8006350 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006318:	4013      	ands	r3, r2
 800631a:	0019      	movs	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	0018      	movs	r0, r3
 800632a:	f000 f813 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2288      	movs	r2, #136	@ 0x88
 800633a:	2120      	movs	r1, #32
 800633c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2284      	movs	r2, #132	@ 0x84
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b004      	add	sp, #16
 800634e:	bd80      	pop	{r7, pc}
 8006350:	f1ffffff 	.word	0xf1ffffff

08006354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	226a      	movs	r2, #106	@ 0x6a
 8006368:	2101      	movs	r1, #1
 800636a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2268      	movs	r2, #104	@ 0x68
 8006370:	2101      	movs	r1, #1
 8006372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006374:	e043      	b.n	80063fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006376:	260f      	movs	r6, #15
 8006378:	19bb      	adds	r3, r7, r6
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800637e:	200e      	movs	r0, #14
 8006380:	183b      	adds	r3, r7, r0
 8006382:	2208      	movs	r2, #8
 8006384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0e5b      	lsrs	r3, r3, #25
 800638e:	b2da      	uxtb	r2, r3
 8006390:	240d      	movs	r4, #13
 8006392:	193b      	adds	r3, r7, r4
 8006394:	2107      	movs	r1, #7
 8006396:	400a      	ands	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0f5b      	lsrs	r3, r3, #29
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	250c      	movs	r5, #12
 80063a6:	197b      	adds	r3, r7, r5
 80063a8:	2107      	movs	r1, #7
 80063aa:	400a      	ands	r2, r1
 80063ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ae:	183b      	adds	r3, r7, r0
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	197a      	adds	r2, r7, r5
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	4914      	ldr	r1, [pc, #80]	@ (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063b8:	5c8a      	ldrb	r2, [r1, r2]
 80063ba:	435a      	muls	r2, r3
 80063bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063be:	197b      	adds	r3, r7, r5
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4a12      	ldr	r2, [pc, #72]	@ (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c6:	0019      	movs	r1, r3
 80063c8:	f7f9 ff32 	bl	8000230 <__divsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	b299      	uxth	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	226a      	movs	r2, #106	@ 0x6a
 80063d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d6:	19bb      	adds	r3, r7, r6
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	193a      	adds	r2, r7, r4
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	490a      	ldr	r1, [pc, #40]	@ (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063e0:	5c8a      	ldrb	r2, [r1, r2]
 80063e2:	435a      	muls	r2, r3
 80063e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	4a08      	ldr	r2, [pc, #32]	@ (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ee:	0019      	movs	r1, r3
 80063f0:	f7f9 ff1e 	bl	8000230 <__divsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	b299      	uxth	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2268      	movs	r2, #104	@ 0x68
 80063fc:	5299      	strh	r1, [r3, r2]
}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b005      	add	sp, #20
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	08007cbc 	.word	0x08007cbc
 800640c:	08007cc4 	.word	0x08007cc4

08006410 <atoi>:
 8006410:	b510      	push	{r4, lr}
 8006412:	220a      	movs	r2, #10
 8006414:	2100      	movs	r1, #0
 8006416:	f000 f88b 	bl	8006530 <strtol>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_strtol_l.isra.0>:
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641e:	b085      	sub	sp, #20
 8006420:	0017      	movs	r7, r2
 8006422:	001e      	movs	r6, r3
 8006424:	9003      	str	r0, [sp, #12]
 8006426:	9101      	str	r1, [sp, #4]
 8006428:	2b24      	cmp	r3, #36	@ 0x24
 800642a:	d823      	bhi.n	8006474 <_strtol_l.isra.0+0x58>
 800642c:	000c      	movs	r4, r1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d020      	beq.n	8006474 <_strtol_l.isra.0+0x58>
 8006432:	4b3d      	ldr	r3, [pc, #244]	@ (8006528 <_strtol_l.isra.0+0x10c>)
 8006434:	2208      	movs	r2, #8
 8006436:	469c      	mov	ip, r3
 8006438:	0023      	movs	r3, r4
 800643a:	4661      	mov	r1, ip
 800643c:	781d      	ldrb	r5, [r3, #0]
 800643e:	3401      	adds	r4, #1
 8006440:	5d48      	ldrb	r0, [r1, r5]
 8006442:	0001      	movs	r1, r0
 8006444:	4011      	ands	r1, r2
 8006446:	4210      	tst	r0, r2
 8006448:	d1f6      	bne.n	8006438 <_strtol_l.isra.0+0x1c>
 800644a:	2d2d      	cmp	r5, #45	@ 0x2d
 800644c:	d119      	bne.n	8006482 <_strtol_l.isra.0+0x66>
 800644e:	7825      	ldrb	r5, [r4, #0]
 8006450:	1c9c      	adds	r4, r3, #2
 8006452:	2301      	movs	r3, #1
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	2210      	movs	r2, #16
 8006458:	0033      	movs	r3, r6
 800645a:	4393      	bics	r3, r2
 800645c:	d11d      	bne.n	800649a <_strtol_l.isra.0+0x7e>
 800645e:	2d30      	cmp	r5, #48	@ 0x30
 8006460:	d115      	bne.n	800648e <_strtol_l.isra.0+0x72>
 8006462:	2120      	movs	r1, #32
 8006464:	7823      	ldrb	r3, [r4, #0]
 8006466:	438b      	bics	r3, r1
 8006468:	2b58      	cmp	r3, #88	@ 0x58
 800646a:	d110      	bne.n	800648e <_strtol_l.isra.0+0x72>
 800646c:	7865      	ldrb	r5, [r4, #1]
 800646e:	3402      	adds	r4, #2
 8006470:	2610      	movs	r6, #16
 8006472:	e012      	b.n	800649a <_strtol_l.isra.0+0x7e>
 8006474:	f000 fae8 	bl	8006a48 <__errno>
 8006478:	2316      	movs	r3, #22
 800647a:	6003      	str	r3, [r0, #0]
 800647c:	2000      	movs	r0, #0
 800647e:	b005      	add	sp, #20
 8006480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006482:	9100      	str	r1, [sp, #0]
 8006484:	2d2b      	cmp	r5, #43	@ 0x2b
 8006486:	d1e6      	bne.n	8006456 <_strtol_l.isra.0+0x3a>
 8006488:	7825      	ldrb	r5, [r4, #0]
 800648a:	1c9c      	adds	r4, r3, #2
 800648c:	e7e3      	b.n	8006456 <_strtol_l.isra.0+0x3a>
 800648e:	2e00      	cmp	r6, #0
 8006490:	d1ee      	bne.n	8006470 <_strtol_l.isra.0+0x54>
 8006492:	360a      	adds	r6, #10
 8006494:	2d30      	cmp	r5, #48	@ 0x30
 8006496:	d100      	bne.n	800649a <_strtol_l.isra.0+0x7e>
 8006498:	3e02      	subs	r6, #2
 800649a:	4a24      	ldr	r2, [pc, #144]	@ (800652c <_strtol_l.isra.0+0x110>)
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	4694      	mov	ip, r2
 80064a0:	4463      	add	r3, ip
 80064a2:	0031      	movs	r1, r6
 80064a4:	0018      	movs	r0, r3
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	f7f9 febe 	bl	8000228 <__aeabi_uidivmod>
 80064ac:	2200      	movs	r2, #0
 80064ae:	4684      	mov	ip, r0
 80064b0:	0010      	movs	r0, r2
 80064b2:	002b      	movs	r3, r5
 80064b4:	3b30      	subs	r3, #48	@ 0x30
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d811      	bhi.n	80064de <_strtol_l.isra.0+0xc2>
 80064ba:	001d      	movs	r5, r3
 80064bc:	42ae      	cmp	r6, r5
 80064be:	dd1d      	ble.n	80064fc <_strtol_l.isra.0+0xe0>
 80064c0:	1c53      	adds	r3, r2, #1
 80064c2:	d009      	beq.n	80064d8 <_strtol_l.isra.0+0xbc>
 80064c4:	2201      	movs	r2, #1
 80064c6:	4252      	negs	r2, r2
 80064c8:	4584      	cmp	ip, r0
 80064ca:	d305      	bcc.n	80064d8 <_strtol_l.isra.0+0xbc>
 80064cc:	d101      	bne.n	80064d2 <_strtol_l.isra.0+0xb6>
 80064ce:	42a9      	cmp	r1, r5
 80064d0:	db11      	blt.n	80064f6 <_strtol_l.isra.0+0xda>
 80064d2:	2201      	movs	r2, #1
 80064d4:	4370      	muls	r0, r6
 80064d6:	1828      	adds	r0, r5, r0
 80064d8:	7825      	ldrb	r5, [r4, #0]
 80064da:	3401      	adds	r4, #1
 80064dc:	e7e9      	b.n	80064b2 <_strtol_l.isra.0+0x96>
 80064de:	002b      	movs	r3, r5
 80064e0:	3b41      	subs	r3, #65	@ 0x41
 80064e2:	2b19      	cmp	r3, #25
 80064e4:	d801      	bhi.n	80064ea <_strtol_l.isra.0+0xce>
 80064e6:	3d37      	subs	r5, #55	@ 0x37
 80064e8:	e7e8      	b.n	80064bc <_strtol_l.isra.0+0xa0>
 80064ea:	002b      	movs	r3, r5
 80064ec:	3b61      	subs	r3, #97	@ 0x61
 80064ee:	2b19      	cmp	r3, #25
 80064f0:	d804      	bhi.n	80064fc <_strtol_l.isra.0+0xe0>
 80064f2:	3d57      	subs	r5, #87	@ 0x57
 80064f4:	e7e2      	b.n	80064bc <_strtol_l.isra.0+0xa0>
 80064f6:	2201      	movs	r2, #1
 80064f8:	4252      	negs	r2, r2
 80064fa:	e7ed      	b.n	80064d8 <_strtol_l.isra.0+0xbc>
 80064fc:	1c53      	adds	r3, r2, #1
 80064fe:	d108      	bne.n	8006512 <_strtol_l.isra.0+0xf6>
 8006500:	2322      	movs	r3, #34	@ 0x22
 8006502:	9a03      	ldr	r2, [sp, #12]
 8006504:	9802      	ldr	r0, [sp, #8]
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	2f00      	cmp	r7, #0
 800650a:	d0b8      	beq.n	800647e <_strtol_l.isra.0+0x62>
 800650c:	1e63      	subs	r3, r4, #1
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	e007      	b.n	8006522 <_strtol_l.isra.0+0x106>
 8006512:	9b00      	ldr	r3, [sp, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d000      	beq.n	800651a <_strtol_l.isra.0+0xfe>
 8006518:	4240      	negs	r0, r0
 800651a:	2f00      	cmp	r7, #0
 800651c:	d0af      	beq.n	800647e <_strtol_l.isra.0+0x62>
 800651e:	2a00      	cmp	r2, #0
 8006520:	d1f4      	bne.n	800650c <_strtol_l.isra.0+0xf0>
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	e7aa      	b.n	800647e <_strtol_l.isra.0+0x62>
 8006528:	08007ccd 	.word	0x08007ccd
 800652c:	7fffffff 	.word	0x7fffffff

08006530 <strtol>:
 8006530:	b510      	push	{r4, lr}
 8006532:	4c04      	ldr	r4, [pc, #16]	@ (8006544 <strtol+0x14>)
 8006534:	0013      	movs	r3, r2
 8006536:	000a      	movs	r2, r1
 8006538:	0001      	movs	r1, r0
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	f7ff ff6e 	bl	800641c <_strtol_l.isra.0>
 8006540:	bd10      	pop	{r4, pc}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	20000018 	.word	0x20000018

08006548 <std>:
 8006548:	2300      	movs	r3, #0
 800654a:	b510      	push	{r4, lr}
 800654c:	0004      	movs	r4, r0
 800654e:	6003      	str	r3, [r0, #0]
 8006550:	6043      	str	r3, [r0, #4]
 8006552:	6083      	str	r3, [r0, #8]
 8006554:	8181      	strh	r1, [r0, #12]
 8006556:	6643      	str	r3, [r0, #100]	@ 0x64
 8006558:	81c2      	strh	r2, [r0, #14]
 800655a:	6103      	str	r3, [r0, #16]
 800655c:	6143      	str	r3, [r0, #20]
 800655e:	6183      	str	r3, [r0, #24]
 8006560:	0019      	movs	r1, r3
 8006562:	2208      	movs	r2, #8
 8006564:	305c      	adds	r0, #92	@ 0x5c
 8006566:	f000 fa19 	bl	800699c <memset>
 800656a:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <std+0x50>)
 800656c:	6224      	str	r4, [r4, #32]
 800656e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <std+0x54>)
 8006572:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <std+0x58>)
 8006576:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006578:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <std+0x5c>)
 800657a:	6323      	str	r3, [r4, #48]	@ 0x30
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <std+0x60>)
 800657e:	429c      	cmp	r4, r3
 8006580:	d005      	beq.n	800658e <std+0x46>
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <std+0x64>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d002      	beq.n	800658e <std+0x46>
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <std+0x68>)
 800658a:	429c      	cmp	r4, r3
 800658c:	d103      	bne.n	8006596 <std+0x4e>
 800658e:	0020      	movs	r0, r4
 8006590:	3058      	adds	r0, #88	@ 0x58
 8006592:	f000 fa83 	bl	8006a9c <__retarget_lock_init_recursive>
 8006596:	bd10      	pop	{r4, pc}
 8006598:	080067c5 	.word	0x080067c5
 800659c:	080067ed 	.word	0x080067ed
 80065a0:	08006825 	.word	0x08006825
 80065a4:	08006851 	.word	0x08006851
 80065a8:	200001e0 	.word	0x200001e0
 80065ac:	20000248 	.word	0x20000248
 80065b0:	200002b0 	.word	0x200002b0

080065b4 <stdio_exit_handler>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4a03      	ldr	r2, [pc, #12]	@ (80065c4 <stdio_exit_handler+0x10>)
 80065b8:	4903      	ldr	r1, [pc, #12]	@ (80065c8 <stdio_exit_handler+0x14>)
 80065ba:	4804      	ldr	r0, [pc, #16]	@ (80065cc <stdio_exit_handler+0x18>)
 80065bc:	f000 f86c 	bl	8006698 <_fwalk_sglue>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	2000000c 	.word	0x2000000c
 80065c8:	08007329 	.word	0x08007329
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <cleanup_stdio>:
 80065d0:	6841      	ldr	r1, [r0, #4]
 80065d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <cleanup_stdio+0x30>)
 80065d4:	b510      	push	{r4, lr}
 80065d6:	0004      	movs	r4, r0
 80065d8:	4299      	cmp	r1, r3
 80065da:	d001      	beq.n	80065e0 <cleanup_stdio+0x10>
 80065dc:	f000 fea4 	bl	8007328 <_fflush_r>
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <cleanup_stdio+0x34>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <cleanup_stdio+0x1e>
 80065e8:	0020      	movs	r0, r4
 80065ea:	f000 fe9d 	bl	8007328 <_fflush_r>
 80065ee:	68e1      	ldr	r1, [r4, #12]
 80065f0:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <cleanup_stdio+0x38>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d002      	beq.n	80065fc <cleanup_stdio+0x2c>
 80065f6:	0020      	movs	r0, r4
 80065f8:	f000 fe96 	bl	8007328 <_fflush_r>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	200001e0 	.word	0x200001e0
 8006604:	20000248 	.word	0x20000248
 8006608:	200002b0 	.word	0x200002b0

0800660c <global_stdio_init.part.0>:
 800660c:	b510      	push	{r4, lr}
 800660e:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <global_stdio_init.part.0+0x28>)
 8006610:	4a09      	ldr	r2, [pc, #36]	@ (8006638 <global_stdio_init.part.0+0x2c>)
 8006612:	2104      	movs	r1, #4
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	4809      	ldr	r0, [pc, #36]	@ (800663c <global_stdio_init.part.0+0x30>)
 8006618:	2200      	movs	r2, #0
 800661a:	f7ff ff95 	bl	8006548 <std>
 800661e:	2201      	movs	r2, #1
 8006620:	2109      	movs	r1, #9
 8006622:	4807      	ldr	r0, [pc, #28]	@ (8006640 <global_stdio_init.part.0+0x34>)
 8006624:	f7ff ff90 	bl	8006548 <std>
 8006628:	2202      	movs	r2, #2
 800662a:	2112      	movs	r1, #18
 800662c:	4805      	ldr	r0, [pc, #20]	@ (8006644 <global_stdio_init.part.0+0x38>)
 800662e:	f7ff ff8b 	bl	8006548 <std>
 8006632:	bd10      	pop	{r4, pc}
 8006634:	20000318 	.word	0x20000318
 8006638:	080065b5 	.word	0x080065b5
 800663c:	200001e0 	.word	0x200001e0
 8006640:	20000248 	.word	0x20000248
 8006644:	200002b0 	.word	0x200002b0

08006648 <__sfp_lock_acquire>:
 8006648:	b510      	push	{r4, lr}
 800664a:	4802      	ldr	r0, [pc, #8]	@ (8006654 <__sfp_lock_acquire+0xc>)
 800664c:	f000 fa27 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8006650:	bd10      	pop	{r4, pc}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	20000321 	.word	0x20000321

08006658 <__sfp_lock_release>:
 8006658:	b510      	push	{r4, lr}
 800665a:	4802      	ldr	r0, [pc, #8]	@ (8006664 <__sfp_lock_release+0xc>)
 800665c:	f000 fa20 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	20000321 	.word	0x20000321

08006668 <__sinit>:
 8006668:	b510      	push	{r4, lr}
 800666a:	0004      	movs	r4, r0
 800666c:	f7ff ffec 	bl	8006648 <__sfp_lock_acquire>
 8006670:	6a23      	ldr	r3, [r4, #32]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <__sinit+0x14>
 8006676:	f7ff ffef 	bl	8006658 <__sfp_lock_release>
 800667a:	bd10      	pop	{r4, pc}
 800667c:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__sinit+0x28>)
 800667e:	6223      	str	r3, [r4, #32]
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <__sinit+0x2c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f6      	bne.n	8006676 <__sinit+0xe>
 8006688:	f7ff ffc0 	bl	800660c <global_stdio_init.part.0>
 800668c:	e7f3      	b.n	8006676 <__sinit+0xe>
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	080065d1 	.word	0x080065d1
 8006694:	20000318 	.word	0x20000318

08006698 <_fwalk_sglue>:
 8006698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669a:	0014      	movs	r4, r2
 800669c:	2600      	movs	r6, #0
 800669e:	9000      	str	r0, [sp, #0]
 80066a0:	9101      	str	r1, [sp, #4]
 80066a2:	68a5      	ldr	r5, [r4, #8]
 80066a4:	6867      	ldr	r7, [r4, #4]
 80066a6:	3f01      	subs	r7, #1
 80066a8:	d504      	bpl.n	80066b4 <_fwalk_sglue+0x1c>
 80066aa:	6824      	ldr	r4, [r4, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d1f8      	bne.n	80066a2 <_fwalk_sglue+0xa>
 80066b0:	0030      	movs	r0, r6
 80066b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066b4:	89ab      	ldrh	r3, [r5, #12]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d908      	bls.n	80066cc <_fwalk_sglue+0x34>
 80066ba:	220e      	movs	r2, #14
 80066bc:	5eab      	ldrsh	r3, [r5, r2]
 80066be:	3301      	adds	r3, #1
 80066c0:	d004      	beq.n	80066cc <_fwalk_sglue+0x34>
 80066c2:	0029      	movs	r1, r5
 80066c4:	9800      	ldr	r0, [sp, #0]
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	4798      	blx	r3
 80066ca:	4306      	orrs	r6, r0
 80066cc:	3568      	adds	r5, #104	@ 0x68
 80066ce:	e7ea      	b.n	80066a6 <_fwalk_sglue+0xe>

080066d0 <iprintf>:
 80066d0:	b40f      	push	{r0, r1, r2, r3}
 80066d2:	b507      	push	{r0, r1, r2, lr}
 80066d4:	4905      	ldr	r1, [pc, #20]	@ (80066ec <iprintf+0x1c>)
 80066d6:	ab04      	add	r3, sp, #16
 80066d8:	6808      	ldr	r0, [r1, #0]
 80066da:	cb04      	ldmia	r3!, {r2}
 80066dc:	6881      	ldr	r1, [r0, #8]
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	f000 fb04 	bl	8006cec <_vfiprintf_r>
 80066e4:	b003      	add	sp, #12
 80066e6:	bc08      	pop	{r3}
 80066e8:	b004      	add	sp, #16
 80066ea:	4718      	bx	r3
 80066ec:	20000018 	.word	0x20000018

080066f0 <putchar>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <putchar+0x10>)
 80066f4:	0001      	movs	r1, r0
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	6882      	ldr	r2, [r0, #8]
 80066fa:	f000 feac 	bl	8007456 <_putc_r>
 80066fe:	bd10      	pop	{r4, pc}
 8006700:	20000018 	.word	0x20000018

08006704 <_puts_r>:
 8006704:	6a03      	ldr	r3, [r0, #32]
 8006706:	b570      	push	{r4, r5, r6, lr}
 8006708:	0005      	movs	r5, r0
 800670a:	000e      	movs	r6, r1
 800670c:	6884      	ldr	r4, [r0, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <_puts_r+0x12>
 8006712:	f7ff ffa9 	bl	8006668 <__sinit>
 8006716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006718:	07db      	lsls	r3, r3, #31
 800671a:	d405      	bmi.n	8006728 <_puts_r+0x24>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	059b      	lsls	r3, r3, #22
 8006720:	d402      	bmi.n	8006728 <_puts_r+0x24>
 8006722:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006724:	f000 f9bb 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	071b      	lsls	r3, r3, #28
 800672c:	d502      	bpl.n	8006734 <_puts_r+0x30>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11f      	bne.n	8006774 <_puts_r+0x70>
 8006734:	0021      	movs	r1, r4
 8006736:	0028      	movs	r0, r5
 8006738:	f000 f8d2 	bl	80068e0 <__swsetup_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	d019      	beq.n	8006774 <_puts_r+0x70>
 8006740:	2501      	movs	r5, #1
 8006742:	426d      	negs	r5, r5
 8006744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d405      	bmi.n	8006756 <_puts_r+0x52>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	059b      	lsls	r3, r3, #22
 800674e:	d402      	bmi.n	8006756 <_puts_r+0x52>
 8006750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006752:	f000 f9a5 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006756:	0028      	movs	r0, r5
 8006758:	bd70      	pop	{r4, r5, r6, pc}
 800675a:	3601      	adds	r6, #1
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da04      	bge.n	800676c <_puts_r+0x68>
 8006762:	69a2      	ldr	r2, [r4, #24]
 8006764:	429a      	cmp	r2, r3
 8006766:	dc16      	bgt.n	8006796 <_puts_r+0x92>
 8006768:	290a      	cmp	r1, #10
 800676a:	d014      	beq.n	8006796 <_puts_r+0x92>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	7831      	ldrb	r1, [r6, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	2900      	cmp	r1, #0
 800677c:	d1ed      	bne.n	800675a <_puts_r+0x56>
 800677e:	60a3      	str	r3, [r4, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da0f      	bge.n	80067a4 <_puts_r+0xa0>
 8006784:	0022      	movs	r2, r4
 8006786:	0028      	movs	r0, r5
 8006788:	310a      	adds	r1, #10
 800678a:	f000 f867 	bl	800685c <__swbuf_r>
 800678e:	3001      	adds	r0, #1
 8006790:	d0d6      	beq.n	8006740 <_puts_r+0x3c>
 8006792:	250a      	movs	r5, #10
 8006794:	e7d6      	b.n	8006744 <_puts_r+0x40>
 8006796:	0022      	movs	r2, r4
 8006798:	0028      	movs	r0, r5
 800679a:	f000 f85f 	bl	800685c <__swbuf_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	d1e8      	bne.n	8006774 <_puts_r+0x70>
 80067a2:	e7cd      	b.n	8006740 <_puts_r+0x3c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	6022      	str	r2, [r4, #0]
 80067aa:	220a      	movs	r2, #10
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e7f0      	b.n	8006792 <_puts_r+0x8e>

080067b0 <puts>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <puts+0x10>)
 80067b4:	0001      	movs	r1, r0
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	f7ff ffa4 	bl	8006704 <_puts_r>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	20000018 	.word	0x20000018

080067c4 <__sread>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	000c      	movs	r4, r1
 80067c8:	250e      	movs	r5, #14
 80067ca:	5f49      	ldrsh	r1, [r1, r5]
 80067cc:	f000 f914 	bl	80069f8 <_read_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	db03      	blt.n	80067dc <__sread+0x18>
 80067d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80067d6:	181b      	adds	r3, r3, r0
 80067d8:	6563      	str	r3, [r4, #84]	@ 0x54
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	4a02      	ldr	r2, [pc, #8]	@ (80067e8 <__sread+0x24>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	e7f9      	b.n	80067da <__sread+0x16>
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	ffffefff 	.word	0xffffefff

080067ec <__swrite>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	001f      	movs	r7, r3
 80067f0:	898b      	ldrh	r3, [r1, #12]
 80067f2:	0005      	movs	r5, r0
 80067f4:	000c      	movs	r4, r1
 80067f6:	0016      	movs	r6, r2
 80067f8:	05db      	lsls	r3, r3, #23
 80067fa:	d505      	bpl.n	8006808 <__swrite+0x1c>
 80067fc:	230e      	movs	r3, #14
 80067fe:	5ec9      	ldrsh	r1, [r1, r3]
 8006800:	2200      	movs	r2, #0
 8006802:	2302      	movs	r3, #2
 8006804:	f000 f8e4 	bl	80069d0 <_lseek_r>
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	4a05      	ldr	r2, [pc, #20]	@ (8006820 <__swrite+0x34>)
 800680c:	0028      	movs	r0, r5
 800680e:	4013      	ands	r3, r2
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	0032      	movs	r2, r6
 8006814:	230e      	movs	r3, #14
 8006816:	5ee1      	ldrsh	r1, [r4, r3]
 8006818:	003b      	movs	r3, r7
 800681a:	f000 f901 	bl	8006a20 <_write_r>
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006820:	ffffefff 	.word	0xffffefff

08006824 <__sseek>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	000c      	movs	r4, r1
 8006828:	250e      	movs	r5, #14
 800682a:	5f49      	ldrsh	r1, [r1, r5]
 800682c:	f000 f8d0 	bl	80069d0 <_lseek_r>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	1c42      	adds	r2, r0, #1
 8006834:	d103      	bne.n	800683e <__sseek+0x1a>
 8006836:	4a05      	ldr	r2, [pc, #20]	@ (800684c <__sseek+0x28>)
 8006838:	4013      	ands	r3, r2
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	2280      	movs	r2, #128	@ 0x80
 8006840:	0152      	lsls	r2, r2, #5
 8006842:	4313      	orrs	r3, r2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	6560      	str	r0, [r4, #84]	@ 0x54
 8006848:	e7f8      	b.n	800683c <__sseek+0x18>
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	ffffefff 	.word	0xffffefff

08006850 <__sclose>:
 8006850:	b510      	push	{r4, lr}
 8006852:	230e      	movs	r3, #14
 8006854:	5ec9      	ldrsh	r1, [r1, r3]
 8006856:	f000 f8a9 	bl	80069ac <_close_r>
 800685a:	bd10      	pop	{r4, pc}

0800685c <__swbuf_r>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	0006      	movs	r6, r0
 8006860:	000d      	movs	r5, r1
 8006862:	0014      	movs	r4, r2
 8006864:	2800      	cmp	r0, #0
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x16>
 8006868:	6a03      	ldr	r3, [r0, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <__swbuf_r+0x16>
 800686e:	f7ff fefb 	bl	8006668 <__sinit>
 8006872:	69a3      	ldr	r3, [r4, #24]
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	d502      	bpl.n	8006882 <__swbuf_r+0x26>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <__swbuf_r+0x3a>
 8006882:	0021      	movs	r1, r4
 8006884:	0030      	movs	r0, r6
 8006886:	f000 f82b 	bl	80068e0 <__swsetup_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	d003      	beq.n	8006896 <__swbuf_r+0x3a>
 800688e:	2501      	movs	r5, #1
 8006890:	426d      	negs	r5, r5
 8006892:	0028      	movs	r0, r5
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	b2ef      	uxtb	r7, r5
 800689c:	1ac0      	subs	r0, r0, r3
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	b2ed      	uxtb	r5, r5
 80068a2:	4283      	cmp	r3, r0
 80068a4:	dc05      	bgt.n	80068b2 <__swbuf_r+0x56>
 80068a6:	0021      	movs	r1, r4
 80068a8:	0030      	movs	r0, r6
 80068aa:	f000 fd3d 	bl	8007328 <_fflush_r>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d1ed      	bne.n	800688e <__swbuf_r+0x32>
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	3001      	adds	r0, #1
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	701f      	strb	r7, [r3, #0]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	4283      	cmp	r3, r0
 80068c6:	d004      	beq.n	80068d2 <__swbuf_r+0x76>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d5e1      	bpl.n	8006892 <__swbuf_r+0x36>
 80068ce:	2d0a      	cmp	r5, #10
 80068d0:	d1df      	bne.n	8006892 <__swbuf_r+0x36>
 80068d2:	0021      	movs	r1, r4
 80068d4:	0030      	movs	r0, r6
 80068d6:	f000 fd27 	bl	8007328 <_fflush_r>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0d9      	beq.n	8006892 <__swbuf_r+0x36>
 80068de:	e7d6      	b.n	800688e <__swbuf_r+0x32>

080068e0 <__swsetup_r>:
 80068e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <__swsetup_r+0xb8>)
 80068e2:	b570      	push	{r4, r5, r6, lr}
 80068e4:	0005      	movs	r5, r0
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	000c      	movs	r4, r1
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d004      	beq.n	80068f8 <__swsetup_r+0x18>
 80068ee:	6a03      	ldr	r3, [r0, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <__swsetup_r+0x18>
 80068f4:	f7ff feb8 	bl	8006668 <__sinit>
 80068f8:	220c      	movs	r2, #12
 80068fa:	5ea3      	ldrsh	r3, [r4, r2]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d423      	bmi.n	8006948 <__swsetup_r+0x68>
 8006900:	06da      	lsls	r2, r3, #27
 8006902:	d407      	bmi.n	8006914 <__swsetup_r+0x34>
 8006904:	2209      	movs	r2, #9
 8006906:	602a      	str	r2, [r5, #0]
 8006908:	2240      	movs	r2, #64	@ 0x40
 800690a:	2001      	movs	r0, #1
 800690c:	4313      	orrs	r3, r2
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	4240      	negs	r0, r0
 8006912:	e03a      	b.n	800698a <__swsetup_r+0xaa>
 8006914:	075b      	lsls	r3, r3, #29
 8006916:	d513      	bpl.n	8006940 <__swsetup_r+0x60>
 8006918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800691a:	2900      	cmp	r1, #0
 800691c:	d008      	beq.n	8006930 <__swsetup_r+0x50>
 800691e:	0023      	movs	r3, r4
 8006920:	3344      	adds	r3, #68	@ 0x44
 8006922:	4299      	cmp	r1, r3
 8006924:	d002      	beq.n	800692c <__swsetup_r+0x4c>
 8006926:	0028      	movs	r0, r5
 8006928:	f000 f8bc 	bl	8006aa4 <_free_r>
 800692c:	2300      	movs	r3, #0
 800692e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006930:	2224      	movs	r2, #36	@ 0x24
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	4393      	bics	r3, r2
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	2300      	movs	r3, #0
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	2308      	movs	r3, #8
 8006942:	89a2      	ldrh	r2, [r4, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <__swsetup_r+0x86>
 800694e:	21a0      	movs	r1, #160	@ 0xa0
 8006950:	2280      	movs	r2, #128	@ 0x80
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	0089      	lsls	r1, r1, #2
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	400b      	ands	r3, r1
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <__swsetup_r+0x86>
 800695e:	0021      	movs	r1, r4
 8006960:	0028      	movs	r0, r5
 8006962:	f000 fd37 	bl	80073d4 <__smakebuf_r>
 8006966:	220c      	movs	r2, #12
 8006968:	5ea3      	ldrsh	r3, [r4, r2]
 800696a:	2101      	movs	r1, #1
 800696c:	001a      	movs	r2, r3
 800696e:	400a      	ands	r2, r1
 8006970:	420b      	tst	r3, r1
 8006972:	d00b      	beq.n	800698c <__swsetup_r+0xac>
 8006974:	2200      	movs	r2, #0
 8006976:	60a2      	str	r2, [r4, #8]
 8006978:	6962      	ldr	r2, [r4, #20]
 800697a:	4252      	negs	r2, r2
 800697c:	61a2      	str	r2, [r4, #24]
 800697e:	2000      	movs	r0, #0
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	4282      	cmp	r2, r0
 8006984:	d101      	bne.n	800698a <__swsetup_r+0xaa>
 8006986:	061a      	lsls	r2, r3, #24
 8006988:	d4be      	bmi.n	8006908 <__swsetup_r+0x28>
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	0799      	lsls	r1, r3, #30
 800698e:	d400      	bmi.n	8006992 <__swsetup_r+0xb2>
 8006990:	6962      	ldr	r2, [r4, #20]
 8006992:	60a2      	str	r2, [r4, #8]
 8006994:	e7f3      	b.n	800697e <__swsetup_r+0x9e>
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	20000018 	.word	0x20000018

0800699c <memset>:
 800699c:	0003      	movs	r3, r0
 800699e:	1882      	adds	r2, r0, r2
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	7019      	strb	r1, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <_close_r>:
 80069ac:	2300      	movs	r3, #0
 80069ae:	b570      	push	{r4, r5, r6, lr}
 80069b0:	4d06      	ldr	r5, [pc, #24]	@ (80069cc <_close_r+0x20>)
 80069b2:	0004      	movs	r4, r0
 80069b4:	0008      	movs	r0, r1
 80069b6:	602b      	str	r3, [r5, #0]
 80069b8:	f7fa fdbd 	bl	8001536 <_close>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d103      	bne.n	80069c8 <_close_r+0x1c>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d000      	beq.n	80069c8 <_close_r+0x1c>
 80069c6:	6023      	str	r3, [r4, #0]
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	2000031c 	.word	0x2000031c

080069d0 <_lseek_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	0004      	movs	r4, r0
 80069d4:	0008      	movs	r0, r1
 80069d6:	0011      	movs	r1, r2
 80069d8:	001a      	movs	r2, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	4d05      	ldr	r5, [pc, #20]	@ (80069f4 <_lseek_r+0x24>)
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fa fdca 	bl	8001578 <_lseek>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d103      	bne.n	80069f0 <_lseek_r+0x20>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d000      	beq.n	80069f0 <_lseek_r+0x20>
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
 80069f2:	46c0      	nop			@ (mov r8, r8)
 80069f4:	2000031c 	.word	0x2000031c

080069f8 <_read_r>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	0004      	movs	r4, r0
 80069fc:	0008      	movs	r0, r1
 80069fe:	0011      	movs	r1, r2
 8006a00:	001a      	movs	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	4d05      	ldr	r5, [pc, #20]	@ (8006a1c <_read_r+0x24>)
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fa fd78 	bl	80014fc <_read>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d103      	bne.n	8006a18 <_read_r+0x20>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d000      	beq.n	8006a18 <_read_r+0x20>
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	2000031c 	.word	0x2000031c

08006a20 <_write_r>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	0004      	movs	r4, r0
 8006a24:	0008      	movs	r0, r1
 8006a26:	0011      	movs	r1, r2
 8006a28:	001a      	movs	r2, r3
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4d05      	ldr	r5, [pc, #20]	@ (8006a44 <_write_r+0x24>)
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fa f986 	bl	8000d40 <_write>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d103      	bne.n	8006a40 <_write_r+0x20>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d000      	beq.n	8006a40 <_write_r+0x20>
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	bd70      	pop	{r4, r5, r6, pc}
 8006a42:	46c0      	nop			@ (mov r8, r8)
 8006a44:	2000031c 	.word	0x2000031c

08006a48 <__errno>:
 8006a48:	4b01      	ldr	r3, [pc, #4]	@ (8006a50 <__errno+0x8>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	4770      	bx	lr
 8006a4e:	46c0      	nop			@ (mov r8, r8)
 8006a50:	20000018 	.word	0x20000018

08006a54 <__libc_init_array>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	2600      	movs	r6, #0
 8006a58:	4c0c      	ldr	r4, [pc, #48]	@ (8006a8c <__libc_init_array+0x38>)
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a90 <__libc_init_array+0x3c>)
 8006a5c:	1b64      	subs	r4, r4, r5
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	42a6      	cmp	r6, r4
 8006a62:	d109      	bne.n	8006a78 <__libc_init_array+0x24>
 8006a64:	2600      	movs	r6, #0
 8006a66:	f000 fd6f 	bl	8007548 <_init>
 8006a6a:	4c0a      	ldr	r4, [pc, #40]	@ (8006a94 <__libc_init_array+0x40>)
 8006a6c:	4d0a      	ldr	r5, [pc, #40]	@ (8006a98 <__libc_init_array+0x44>)
 8006a6e:	1b64      	subs	r4, r4, r5
 8006a70:	10a4      	asrs	r4, r4, #2
 8006a72:	42a6      	cmp	r6, r4
 8006a74:	d105      	bne.n	8006a82 <__libc_init_array+0x2e>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	00b3      	lsls	r3, r6, #2
 8006a7a:	58eb      	ldr	r3, [r5, r3]
 8006a7c:	4798      	blx	r3
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7ee      	b.n	8006a60 <__libc_init_array+0xc>
 8006a82:	00b3      	lsls	r3, r6, #2
 8006a84:	58eb      	ldr	r3, [r5, r3]
 8006a86:	4798      	blx	r3
 8006a88:	3601      	adds	r6, #1
 8006a8a:	e7f2      	b.n	8006a72 <__libc_init_array+0x1e>
 8006a8c:	08007e00 	.word	0x08007e00
 8006a90:	08007e00 	.word	0x08007e00
 8006a94:	08007e04 	.word	0x08007e04
 8006a98:	08007e00 	.word	0x08007e00

08006a9c <__retarget_lock_init_recursive>:
 8006a9c:	4770      	bx	lr

08006a9e <__retarget_lock_acquire_recursive>:
 8006a9e:	4770      	bx	lr

08006aa0 <__retarget_lock_release_recursive>:
 8006aa0:	4770      	bx	lr
	...

08006aa4 <_free_r>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	0005      	movs	r5, r0
 8006aa8:	1e0c      	subs	r4, r1, #0
 8006aaa:	d010      	beq.n	8006ace <_free_r+0x2a>
 8006aac:	3c04      	subs	r4, #4
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da00      	bge.n	8006ab6 <_free_r+0x12>
 8006ab4:	18e4      	adds	r4, r4, r3
 8006ab6:	0028      	movs	r0, r5
 8006ab8:	f000 f8e0 	bl	8006c7c <__malloc_lock>
 8006abc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <_free_r+0x90>)
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <_free_r+0x2c>
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	6014      	str	r4, [r2, #0]
 8006ac8:	0028      	movs	r0, r5
 8006aca:	f000 f8df 	bl	8006c8c <__malloc_unlock>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d908      	bls.n	8006ae6 <_free_r+0x42>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	1821      	adds	r1, r4, r0
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	d1f3      	bne.n	8006ac4 <_free_r+0x20>
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	1809      	adds	r1, r1, r0
 8006ae2:	6021      	str	r1, [r4, #0]
 8006ae4:	e7ee      	b.n	8006ac4 <_free_r+0x20>
 8006ae6:	001a      	movs	r2, r3
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <_free_r+0x4e>
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	d9f9      	bls.n	8006ae6 <_free_r+0x42>
 8006af2:	6811      	ldr	r1, [r2, #0]
 8006af4:	1850      	adds	r0, r2, r1
 8006af6:	42a0      	cmp	r0, r4
 8006af8:	d10b      	bne.n	8006b12 <_free_r+0x6e>
 8006afa:	6820      	ldr	r0, [r4, #0]
 8006afc:	1809      	adds	r1, r1, r0
 8006afe:	1850      	adds	r0, r2, r1
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	4283      	cmp	r3, r0
 8006b04:	d1e0      	bne.n	8006ac8 <_free_r+0x24>
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	1841      	adds	r1, r0, r1
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	6053      	str	r3, [r2, #4]
 8006b10:	e7da      	b.n	8006ac8 <_free_r+0x24>
 8006b12:	42a0      	cmp	r0, r4
 8006b14:	d902      	bls.n	8006b1c <_free_r+0x78>
 8006b16:	230c      	movs	r3, #12
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	e7d5      	b.n	8006ac8 <_free_r+0x24>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	1821      	adds	r1, r4, r0
 8006b20:	428b      	cmp	r3, r1
 8006b22:	d103      	bne.n	8006b2c <_free_r+0x88>
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	1809      	adds	r1, r1, r0
 8006b2a:	6021      	str	r1, [r4, #0]
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6054      	str	r4, [r2, #4]
 8006b30:	e7ca      	b.n	8006ac8 <_free_r+0x24>
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	20000328 	.word	0x20000328

08006b38 <sbrk_aligned>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006b78 <sbrk_aligned+0x40>)
 8006b3c:	000d      	movs	r5, r1
 8006b3e:	6831      	ldr	r1, [r6, #0]
 8006b40:	0004      	movs	r4, r0
 8006b42:	2900      	cmp	r1, #0
 8006b44:	d102      	bne.n	8006b4c <sbrk_aligned+0x14>
 8006b46:	f000 fce1 	bl	800750c <_sbrk_r>
 8006b4a:	6030      	str	r0, [r6, #0]
 8006b4c:	0029      	movs	r1, r5
 8006b4e:	0020      	movs	r0, r4
 8006b50:	f000 fcdc 	bl	800750c <_sbrk_r>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d103      	bne.n	8006b60 <sbrk_aligned+0x28>
 8006b58:	2501      	movs	r5, #1
 8006b5a:	426d      	negs	r5, r5
 8006b5c:	0028      	movs	r0, r5
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	2303      	movs	r3, #3
 8006b62:	1cc5      	adds	r5, r0, #3
 8006b64:	439d      	bics	r5, r3
 8006b66:	42a8      	cmp	r0, r5
 8006b68:	d0f8      	beq.n	8006b5c <sbrk_aligned+0x24>
 8006b6a:	1a29      	subs	r1, r5, r0
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	f000 fccd 	bl	800750c <_sbrk_r>
 8006b72:	3001      	adds	r0, #1
 8006b74:	d1f2      	bne.n	8006b5c <sbrk_aligned+0x24>
 8006b76:	e7ef      	b.n	8006b58 <sbrk_aligned+0x20>
 8006b78:	20000324 	.word	0x20000324

08006b7c <_malloc_r>:
 8006b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7e:	2203      	movs	r2, #3
 8006b80:	1ccb      	adds	r3, r1, #3
 8006b82:	4393      	bics	r3, r2
 8006b84:	3308      	adds	r3, #8
 8006b86:	0005      	movs	r5, r0
 8006b88:	001f      	movs	r7, r3
 8006b8a:	2b0c      	cmp	r3, #12
 8006b8c:	d234      	bcs.n	8006bf8 <_malloc_r+0x7c>
 8006b8e:	270c      	movs	r7, #12
 8006b90:	42b9      	cmp	r1, r7
 8006b92:	d833      	bhi.n	8006bfc <_malloc_r+0x80>
 8006b94:	0028      	movs	r0, r5
 8006b96:	f000 f871 	bl	8006c7c <__malloc_lock>
 8006b9a:	4e37      	ldr	r6, [pc, #220]	@ (8006c78 <_malloc_r+0xfc>)
 8006b9c:	6833      	ldr	r3, [r6, #0]
 8006b9e:	001c      	movs	r4, r3
 8006ba0:	2c00      	cmp	r4, #0
 8006ba2:	d12f      	bne.n	8006c04 <_malloc_r+0x88>
 8006ba4:	0039      	movs	r1, r7
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	f7ff ffc6 	bl	8006b38 <sbrk_aligned>
 8006bac:	0004      	movs	r4, r0
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d15f      	bne.n	8006c72 <_malloc_r+0xf6>
 8006bb2:	6834      	ldr	r4, [r6, #0]
 8006bb4:	9400      	str	r4, [sp, #0]
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d14a      	bne.n	8006c52 <_malloc_r+0xd6>
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	d052      	beq.n	8006c66 <_malloc_r+0xea>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	0028      	movs	r0, r5
 8006bc4:	18e3      	adds	r3, r4, r3
 8006bc6:	9900      	ldr	r1, [sp, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f000 fc9f 	bl	800750c <_sbrk_r>
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	4283      	cmp	r3, r0
 8006bd2:	d148      	bne.n	8006c66 <_malloc_r+0xea>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	0028      	movs	r0, r5
 8006bd8:	1aff      	subs	r7, r7, r3
 8006bda:	0039      	movs	r1, r7
 8006bdc:	f7ff ffac 	bl	8006b38 <sbrk_aligned>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d040      	beq.n	8006c66 <_malloc_r+0xea>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	19db      	adds	r3, r3, r7
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d133      	bne.n	8006c5a <_malloc_r+0xde>
 8006bf2:	9b00      	ldr	r3, [sp, #0]
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	e019      	b.n	8006c2c <_malloc_r+0xb0>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dac9      	bge.n	8006b90 <_malloc_r+0x14>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	2000      	movs	r0, #0
 8006c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	1bc9      	subs	r1, r1, r7
 8006c08:	d420      	bmi.n	8006c4c <_malloc_r+0xd0>
 8006c0a:	290b      	cmp	r1, #11
 8006c0c:	d90a      	bls.n	8006c24 <_malloc_r+0xa8>
 8006c0e:	19e2      	adds	r2, r4, r7
 8006c10:	6027      	str	r7, [r4, #0]
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	d104      	bne.n	8006c20 <_malloc_r+0xa4>
 8006c16:	6032      	str	r2, [r6, #0]
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	6011      	str	r1, [r2, #0]
 8006c1c:	6053      	str	r3, [r2, #4]
 8006c1e:	e005      	b.n	8006c2c <_malloc_r+0xb0>
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	e7f9      	b.n	8006c18 <_malloc_r+0x9c>
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	d10e      	bne.n	8006c48 <_malloc_r+0xcc>
 8006c2a:	6032      	str	r2, [r6, #0]
 8006c2c:	0028      	movs	r0, r5
 8006c2e:	f000 f82d 	bl	8006c8c <__malloc_unlock>
 8006c32:	0020      	movs	r0, r4
 8006c34:	2207      	movs	r2, #7
 8006c36:	300b      	adds	r0, #11
 8006c38:	1d23      	adds	r3, r4, #4
 8006c3a:	4390      	bics	r0, r2
 8006c3c:	1ac2      	subs	r2, r0, r3
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	d0df      	beq.n	8006c02 <_malloc_r+0x86>
 8006c42:	1a1b      	subs	r3, r3, r0
 8006c44:	50a3      	str	r3, [r4, r2]
 8006c46:	e7dc      	b.n	8006c02 <_malloc_r+0x86>
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	e7ef      	b.n	8006c2c <_malloc_r+0xb0>
 8006c4c:	0023      	movs	r3, r4
 8006c4e:	6864      	ldr	r4, [r4, #4]
 8006c50:	e7a6      	b.n	8006ba0 <_malloc_r+0x24>
 8006c52:	9c00      	ldr	r4, [sp, #0]
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	e7ad      	b.n	8006bb6 <_malloc_r+0x3a>
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	d1fb      	bne.n	8006c5a <_malloc_r+0xde>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e7da      	b.n	8006c1c <_malloc_r+0xa0>
 8006c66:	230c      	movs	r3, #12
 8006c68:	0028      	movs	r0, r5
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f000 f80e 	bl	8006c8c <__malloc_unlock>
 8006c70:	e7c6      	b.n	8006c00 <_malloc_r+0x84>
 8006c72:	6007      	str	r7, [r0, #0]
 8006c74:	e7da      	b.n	8006c2c <_malloc_r+0xb0>
 8006c76:	46c0      	nop			@ (mov r8, r8)
 8006c78:	20000328 	.word	0x20000328

08006c7c <__malloc_lock>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4802      	ldr	r0, [pc, #8]	@ (8006c88 <__malloc_lock+0xc>)
 8006c80:	f7ff ff0d 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	20000320 	.word	0x20000320

08006c8c <__malloc_unlock>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4802      	ldr	r0, [pc, #8]	@ (8006c98 <__malloc_unlock+0xc>)
 8006c90:	f7ff ff06 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	20000320 	.word	0x20000320

08006c9c <__sfputc_r>:
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	6093      	str	r3, [r2, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da04      	bge.n	8006cb2 <__sfputc_r+0x16>
 8006ca8:	6994      	ldr	r4, [r2, #24]
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	db07      	blt.n	8006cbe <__sfputc_r+0x22>
 8006cae:	290a      	cmp	r1, #10
 8006cb0:	d005      	beq.n	8006cbe <__sfputc_r+0x22>
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	1c58      	adds	r0, r3, #1
 8006cb6:	6010      	str	r0, [r2, #0]
 8006cb8:	7019      	strb	r1, [r3, #0]
 8006cba:	0008      	movs	r0, r1
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	f7ff fdcd 	bl	800685c <__swbuf_r>
 8006cc2:	0001      	movs	r1, r0
 8006cc4:	e7f9      	b.n	8006cba <__sfputc_r+0x1e>

08006cc6 <__sfputs_r>:
 8006cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc8:	0006      	movs	r6, r0
 8006cca:	000f      	movs	r7, r1
 8006ccc:	0014      	movs	r4, r2
 8006cce:	18d5      	adds	r5, r2, r3
 8006cd0:	42ac      	cmp	r4, r5
 8006cd2:	d101      	bne.n	8006cd8 <__sfputs_r+0x12>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e007      	b.n	8006ce8 <__sfputs_r+0x22>
 8006cd8:	7821      	ldrb	r1, [r4, #0]
 8006cda:	003a      	movs	r2, r7
 8006cdc:	0030      	movs	r0, r6
 8006cde:	f7ff ffdd 	bl	8006c9c <__sfputc_r>
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d1f3      	bne.n	8006cd0 <__sfputs_r+0xa>
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cec <_vfiprintf_r>:
 8006cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cee:	b0a1      	sub	sp, #132	@ 0x84
 8006cf0:	000f      	movs	r7, r1
 8006cf2:	0015      	movs	r5, r2
 8006cf4:	001e      	movs	r6, r3
 8006cf6:	9003      	str	r0, [sp, #12]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d004      	beq.n	8006d06 <_vfiprintf_r+0x1a>
 8006cfc:	6a03      	ldr	r3, [r0, #32]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <_vfiprintf_r+0x1a>
 8006d02:	f7ff fcb1 	bl	8006668 <__sinit>
 8006d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d08:	07db      	lsls	r3, r3, #31
 8006d0a:	d405      	bmi.n	8006d18 <_vfiprintf_r+0x2c>
 8006d0c:	89bb      	ldrh	r3, [r7, #12]
 8006d0e:	059b      	lsls	r3, r3, #22
 8006d10:	d402      	bmi.n	8006d18 <_vfiprintf_r+0x2c>
 8006d12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006d14:	f7ff fec3 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8006d18:	89bb      	ldrh	r3, [r7, #12]
 8006d1a:	071b      	lsls	r3, r3, #28
 8006d1c:	d502      	bpl.n	8006d24 <_vfiprintf_r+0x38>
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d113      	bne.n	8006d4c <_vfiprintf_r+0x60>
 8006d24:	0039      	movs	r1, r7
 8006d26:	9803      	ldr	r0, [sp, #12]
 8006d28:	f7ff fdda 	bl	80068e0 <__swsetup_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d00d      	beq.n	8006d4c <_vfiprintf_r+0x60>
 8006d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d503      	bpl.n	8006d3e <_vfiprintf_r+0x52>
 8006d36:	2001      	movs	r0, #1
 8006d38:	4240      	negs	r0, r0
 8006d3a:	b021      	add	sp, #132	@ 0x84
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	059b      	lsls	r3, r3, #22
 8006d42:	d4f8      	bmi.n	8006d36 <_vfiprintf_r+0x4a>
 8006d44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006d46:	f7ff feab 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006d4a:	e7f4      	b.n	8006d36 <_vfiprintf_r+0x4a>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	ac08      	add	r4, sp, #32
 8006d50:	6163      	str	r3, [r4, #20]
 8006d52:	3320      	adds	r3, #32
 8006d54:	7663      	strb	r3, [r4, #25]
 8006d56:	3310      	adds	r3, #16
 8006d58:	76a3      	strb	r3, [r4, #26]
 8006d5a:	9607      	str	r6, [sp, #28]
 8006d5c:	002e      	movs	r6, r5
 8006d5e:	7833      	ldrb	r3, [r6, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <_vfiprintf_r+0x7c>
 8006d64:	2b25      	cmp	r3, #37	@ 0x25
 8006d66:	d148      	bne.n	8006dfa <_vfiprintf_r+0x10e>
 8006d68:	1b73      	subs	r3, r6, r5
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	42ae      	cmp	r6, r5
 8006d6e:	d00b      	beq.n	8006d88 <_vfiprintf_r+0x9c>
 8006d70:	002a      	movs	r2, r5
 8006d72:	0039      	movs	r1, r7
 8006d74:	9803      	ldr	r0, [sp, #12]
 8006d76:	f7ff ffa6 	bl	8006cc6 <__sfputs_r>
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d100      	bne.n	8006d80 <_vfiprintf_r+0x94>
 8006d7e:	e0ae      	b.n	8006ede <_vfiprintf_r+0x1f2>
 8006d80:	6963      	ldr	r3, [r4, #20]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	189b      	adds	r3, r3, r2
 8006d86:	6163      	str	r3, [r4, #20]
 8006d88:	7833      	ldrb	r3, [r6, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d100      	bne.n	8006d90 <_vfiprintf_r+0xa4>
 8006d8e:	e0a6      	b.n	8006ede <_vfiprintf_r+0x1f2>
 8006d90:	2201      	movs	r2, #1
 8006d92:	2300      	movs	r3, #0
 8006d94:	4252      	negs	r2, r2
 8006d96:	6062      	str	r2, [r4, #4]
 8006d98:	a904      	add	r1, sp, #16
 8006d9a:	3254      	adds	r2, #84	@ 0x54
 8006d9c:	1852      	adds	r2, r2, r1
 8006d9e:	1c75      	adds	r5, r6, #1
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	60e3      	str	r3, [r4, #12]
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	7013      	strb	r3, [r2, #0]
 8006da8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006daa:	4b59      	ldr	r3, [pc, #356]	@ (8006f10 <_vfiprintf_r+0x224>)
 8006dac:	2205      	movs	r2, #5
 8006dae:	0018      	movs	r0, r3
 8006db0:	7829      	ldrb	r1, [r5, #0]
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	f000 fbbc 	bl	8007530 <memchr>
 8006db8:	1c6e      	adds	r6, r5, #1
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d11f      	bne.n	8006dfe <_vfiprintf_r+0x112>
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	06d3      	lsls	r3, r2, #27
 8006dc2:	d504      	bpl.n	8006dce <_vfiprintf_r+0xe2>
 8006dc4:	2353      	movs	r3, #83	@ 0x53
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	185b      	adds	r3, r3, r1
 8006dca:	2120      	movs	r1, #32
 8006dcc:	7019      	strb	r1, [r3, #0]
 8006dce:	0713      	lsls	r3, r2, #28
 8006dd0:	d504      	bpl.n	8006ddc <_vfiprintf_r+0xf0>
 8006dd2:	2353      	movs	r3, #83	@ 0x53
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	185b      	adds	r3, r3, r1
 8006dd8:	212b      	movs	r1, #43	@ 0x2b
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	782b      	ldrb	r3, [r5, #0]
 8006dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de0:	d016      	beq.n	8006e10 <_vfiprintf_r+0x124>
 8006de2:	002e      	movs	r6, r5
 8006de4:	2100      	movs	r1, #0
 8006de6:	200a      	movs	r0, #10
 8006de8:	68e3      	ldr	r3, [r4, #12]
 8006dea:	7832      	ldrb	r2, [r6, #0]
 8006dec:	1c75      	adds	r5, r6, #1
 8006dee:	3a30      	subs	r2, #48	@ 0x30
 8006df0:	2a09      	cmp	r2, #9
 8006df2:	d950      	bls.n	8006e96 <_vfiprintf_r+0x1aa>
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d111      	bne.n	8006e1c <_vfiprintf_r+0x130>
 8006df8:	e017      	b.n	8006e2a <_vfiprintf_r+0x13e>
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	e7af      	b.n	8006d5e <_vfiprintf_r+0x72>
 8006dfe:	9b05      	ldr	r3, [sp, #20]
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	1ac0      	subs	r0, r0, r3
 8006e04:	2301      	movs	r3, #1
 8006e06:	4083      	lsls	r3, r0
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	0035      	movs	r5, r6
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	e7cc      	b.n	8006daa <_vfiprintf_r+0xbe>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	1d19      	adds	r1, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	9107      	str	r1, [sp, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db01      	blt.n	8006e20 <_vfiprintf_r+0x134>
 8006e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e1e:	e004      	b.n	8006e2a <_vfiprintf_r+0x13e>
 8006e20:	425b      	negs	r3, r3
 8006e22:	60e3      	str	r3, [r4, #12]
 8006e24:	2302      	movs	r3, #2
 8006e26:	4313      	orrs	r3, r2
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	7833      	ldrb	r3, [r6, #0]
 8006e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e2e:	d10c      	bne.n	8006e4a <_vfiprintf_r+0x15e>
 8006e30:	7873      	ldrb	r3, [r6, #1]
 8006e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e34:	d134      	bne.n	8006ea0 <_vfiprintf_r+0x1b4>
 8006e36:	9b07      	ldr	r3, [sp, #28]
 8006e38:	3602      	adds	r6, #2
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9207      	str	r2, [sp, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da01      	bge.n	8006e48 <_vfiprintf_r+0x15c>
 8006e44:	2301      	movs	r3, #1
 8006e46:	425b      	negs	r3, r3
 8006e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e4a:	4d32      	ldr	r5, [pc, #200]	@ (8006f14 <_vfiprintf_r+0x228>)
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	0028      	movs	r0, r5
 8006e50:	7831      	ldrb	r1, [r6, #0]
 8006e52:	f000 fb6d 	bl	8007530 <memchr>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d006      	beq.n	8006e68 <_vfiprintf_r+0x17c>
 8006e5a:	2340      	movs	r3, #64	@ 0x40
 8006e5c:	1b40      	subs	r0, r0, r5
 8006e5e:	4083      	lsls	r3, r0
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	3601      	adds	r6, #1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	7831      	ldrb	r1, [r6, #0]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	482a      	ldr	r0, [pc, #168]	@ (8006f18 <_vfiprintf_r+0x22c>)
 8006e6e:	1c75      	adds	r5, r6, #1
 8006e70:	7621      	strb	r1, [r4, #24]
 8006e72:	f000 fb5d 	bl	8007530 <memchr>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d040      	beq.n	8006efc <_vfiprintf_r+0x210>
 8006e7a:	4b28      	ldr	r3, [pc, #160]	@ (8006f1c <_vfiprintf_r+0x230>)
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d122      	bne.n	8006ec6 <_vfiprintf_r+0x1da>
 8006e80:	2207      	movs	r2, #7
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	3307      	adds	r3, #7
 8006e86:	4393      	bics	r3, r2
 8006e88:	3308      	adds	r3, #8
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	6963      	ldr	r3, [r4, #20]
 8006e8e:	9a04      	ldr	r2, [sp, #16]
 8006e90:	189b      	adds	r3, r3, r2
 8006e92:	6163      	str	r3, [r4, #20]
 8006e94:	e762      	b.n	8006d5c <_vfiprintf_r+0x70>
 8006e96:	4343      	muls	r3, r0
 8006e98:	002e      	movs	r6, r5
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	189b      	adds	r3, r3, r2
 8006e9e:	e7a4      	b.n	8006dea <_vfiprintf_r+0xfe>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	200a      	movs	r0, #10
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	7832      	ldrb	r2, [r6, #0]
 8006eac:	1c75      	adds	r5, r6, #1
 8006eae:	3a30      	subs	r2, #48	@ 0x30
 8006eb0:	2a09      	cmp	r2, #9
 8006eb2:	d903      	bls.n	8006ebc <_vfiprintf_r+0x1d0>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0c8      	beq.n	8006e4a <_vfiprintf_r+0x15e>
 8006eb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eba:	e7c6      	b.n	8006e4a <_vfiprintf_r+0x15e>
 8006ebc:	4341      	muls	r1, r0
 8006ebe:	002e      	movs	r6, r5
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	1889      	adds	r1, r1, r2
 8006ec4:	e7f1      	b.n	8006eaa <_vfiprintf_r+0x1be>
 8006ec6:	aa07      	add	r2, sp, #28
 8006ec8:	9200      	str	r2, [sp, #0]
 8006eca:	0021      	movs	r1, r4
 8006ecc:	003a      	movs	r2, r7
 8006ece:	4b14      	ldr	r3, [pc, #80]	@ (8006f20 <_vfiprintf_r+0x234>)
 8006ed0:	9803      	ldr	r0, [sp, #12]
 8006ed2:	e000      	b.n	8006ed6 <_vfiprintf_r+0x1ea>
 8006ed4:	bf00      	nop
 8006ed6:	9004      	str	r0, [sp, #16]
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	3301      	adds	r3, #1
 8006edc:	d1d6      	bne.n	8006e8c <_vfiprintf_r+0x1a0>
 8006ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ee0:	07db      	lsls	r3, r3, #31
 8006ee2:	d405      	bmi.n	8006ef0 <_vfiprintf_r+0x204>
 8006ee4:	89bb      	ldrh	r3, [r7, #12]
 8006ee6:	059b      	lsls	r3, r3, #22
 8006ee8:	d402      	bmi.n	8006ef0 <_vfiprintf_r+0x204>
 8006eea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006eec:	f7ff fdd8 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006ef0:	89bb      	ldrh	r3, [r7, #12]
 8006ef2:	065b      	lsls	r3, r3, #25
 8006ef4:	d500      	bpl.n	8006ef8 <_vfiprintf_r+0x20c>
 8006ef6:	e71e      	b.n	8006d36 <_vfiprintf_r+0x4a>
 8006ef8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006efa:	e71e      	b.n	8006d3a <_vfiprintf_r+0x4e>
 8006efc:	aa07      	add	r2, sp, #28
 8006efe:	9200      	str	r2, [sp, #0]
 8006f00:	0021      	movs	r1, r4
 8006f02:	003a      	movs	r2, r7
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <_vfiprintf_r+0x234>)
 8006f06:	9803      	ldr	r0, [sp, #12]
 8006f08:	f000 f87c 	bl	8007004 <_printf_i>
 8006f0c:	e7e3      	b.n	8006ed6 <_vfiprintf_r+0x1ea>
 8006f0e:	46c0      	nop			@ (mov r8, r8)
 8006f10:	08007dcd 	.word	0x08007dcd
 8006f14:	08007dd3 	.word	0x08007dd3
 8006f18:	08007dd7 	.word	0x08007dd7
 8006f1c:	00000000 	.word	0x00000000
 8006f20:	08006cc7 	.word	0x08006cc7

08006f24 <_printf_common>:
 8006f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f26:	0016      	movs	r6, r2
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	688a      	ldr	r2, [r1, #8]
 8006f2c:	690b      	ldr	r3, [r1, #16]
 8006f2e:	000c      	movs	r4, r1
 8006f30:	9000      	str	r0, [sp, #0]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	da00      	bge.n	8006f38 <_printf_common+0x14>
 8006f36:	0013      	movs	r3, r2
 8006f38:	0022      	movs	r2, r4
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	3243      	adds	r2, #67	@ 0x43
 8006f3e:	7812      	ldrb	r2, [r2, #0]
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d001      	beq.n	8006f48 <_printf_common+0x24>
 8006f44:	3301      	adds	r3, #1
 8006f46:	6033      	str	r3, [r6, #0]
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	069b      	lsls	r3, r3, #26
 8006f4c:	d502      	bpl.n	8006f54 <_printf_common+0x30>
 8006f4e:	6833      	ldr	r3, [r6, #0]
 8006f50:	3302      	adds	r3, #2
 8006f52:	6033      	str	r3, [r6, #0]
 8006f54:	6822      	ldr	r2, [r4, #0]
 8006f56:	2306      	movs	r3, #6
 8006f58:	0015      	movs	r5, r2
 8006f5a:	401d      	ands	r5, r3
 8006f5c:	421a      	tst	r2, r3
 8006f5e:	d027      	beq.n	8006fb0 <_printf_common+0x8c>
 8006f60:	0023      	movs	r3, r4
 8006f62:	3343      	adds	r3, #67	@ 0x43
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	1e5a      	subs	r2, r3, #1
 8006f68:	4193      	sbcs	r3, r2
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	0692      	lsls	r2, r2, #26
 8006f6e:	d430      	bmi.n	8006fd2 <_printf_common+0xae>
 8006f70:	0022      	movs	r2, r4
 8006f72:	9901      	ldr	r1, [sp, #4]
 8006f74:	9800      	ldr	r0, [sp, #0]
 8006f76:	9d08      	ldr	r5, [sp, #32]
 8006f78:	3243      	adds	r2, #67	@ 0x43
 8006f7a:	47a8      	blx	r5
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d025      	beq.n	8006fcc <_printf_common+0xa8>
 8006f80:	2206      	movs	r2, #6
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	2500      	movs	r5, #0
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d105      	bne.n	8006f98 <_printf_common+0x74>
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	68e5      	ldr	r5, [r4, #12]
 8006f90:	1aed      	subs	r5, r5, r3
 8006f92:	43eb      	mvns	r3, r5
 8006f94:	17db      	asrs	r3, r3, #31
 8006f96:	401d      	ands	r5, r3
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	6922      	ldr	r2, [r4, #16]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	dd01      	ble.n	8006fa4 <_printf_common+0x80>
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	18ed      	adds	r5, r5, r3
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42b5      	cmp	r5, r6
 8006fa8:	d120      	bne.n	8006fec <_printf_common+0xc8>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e010      	b.n	8006fd0 <_printf_common+0xac>
 8006fae:	3501      	adds	r5, #1
 8006fb0:	68e3      	ldr	r3, [r4, #12]
 8006fb2:	6832      	ldr	r2, [r6, #0]
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	42ab      	cmp	r3, r5
 8006fb8:	ddd2      	ble.n	8006f60 <_printf_common+0x3c>
 8006fba:	0022      	movs	r2, r4
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	9901      	ldr	r1, [sp, #4]
 8006fc0:	9800      	ldr	r0, [sp, #0]
 8006fc2:	9f08      	ldr	r7, [sp, #32]
 8006fc4:	3219      	adds	r2, #25
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1f0      	bne.n	8006fae <_printf_common+0x8a>
 8006fcc:	2001      	movs	r0, #1
 8006fce:	4240      	negs	r0, r0
 8006fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fd2:	2030      	movs	r0, #48	@ 0x30
 8006fd4:	18e1      	adds	r1, r4, r3
 8006fd6:	3143      	adds	r1, #67	@ 0x43
 8006fd8:	7008      	strb	r0, [r1, #0]
 8006fda:	0021      	movs	r1, r4
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	3145      	adds	r1, #69	@ 0x45
 8006fe0:	7809      	ldrb	r1, [r1, #0]
 8006fe2:	18a2      	adds	r2, r4, r2
 8006fe4:	3243      	adds	r2, #67	@ 0x43
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	7011      	strb	r1, [r2, #0]
 8006fea:	e7c1      	b.n	8006f70 <_printf_common+0x4c>
 8006fec:	0022      	movs	r2, r4
 8006fee:	2301      	movs	r3, #1
 8006ff0:	9901      	ldr	r1, [sp, #4]
 8006ff2:	9800      	ldr	r0, [sp, #0]
 8006ff4:	9f08      	ldr	r7, [sp, #32]
 8006ff6:	321a      	adds	r2, #26
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d0e6      	beq.n	8006fcc <_printf_common+0xa8>
 8006ffe:	3601      	adds	r6, #1
 8007000:	e7d1      	b.n	8006fa6 <_printf_common+0x82>
	...

08007004 <_printf_i>:
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b08b      	sub	sp, #44	@ 0x2c
 8007008:	9206      	str	r2, [sp, #24]
 800700a:	000a      	movs	r2, r1
 800700c:	3243      	adds	r2, #67	@ 0x43
 800700e:	9307      	str	r3, [sp, #28]
 8007010:	9005      	str	r0, [sp, #20]
 8007012:	9203      	str	r2, [sp, #12]
 8007014:	7e0a      	ldrb	r2, [r1, #24]
 8007016:	000c      	movs	r4, r1
 8007018:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800701a:	2a78      	cmp	r2, #120	@ 0x78
 800701c:	d809      	bhi.n	8007032 <_printf_i+0x2e>
 800701e:	2a62      	cmp	r2, #98	@ 0x62
 8007020:	d80b      	bhi.n	800703a <_printf_i+0x36>
 8007022:	2a00      	cmp	r2, #0
 8007024:	d100      	bne.n	8007028 <_printf_i+0x24>
 8007026:	e0ba      	b.n	800719e <_printf_i+0x19a>
 8007028:	497a      	ldr	r1, [pc, #488]	@ (8007214 <_printf_i+0x210>)
 800702a:	9104      	str	r1, [sp, #16]
 800702c:	2a58      	cmp	r2, #88	@ 0x58
 800702e:	d100      	bne.n	8007032 <_printf_i+0x2e>
 8007030:	e08e      	b.n	8007150 <_printf_i+0x14c>
 8007032:	0025      	movs	r5, r4
 8007034:	3542      	adds	r5, #66	@ 0x42
 8007036:	702a      	strb	r2, [r5, #0]
 8007038:	e022      	b.n	8007080 <_printf_i+0x7c>
 800703a:	0010      	movs	r0, r2
 800703c:	3863      	subs	r0, #99	@ 0x63
 800703e:	2815      	cmp	r0, #21
 8007040:	d8f7      	bhi.n	8007032 <_printf_i+0x2e>
 8007042:	f7f9 f861 	bl	8000108 <__gnu_thumb1_case_shi>
 8007046:	0016      	.short	0x0016
 8007048:	fff6001f 	.word	0xfff6001f
 800704c:	fff6fff6 	.word	0xfff6fff6
 8007050:	001ffff6 	.word	0x001ffff6
 8007054:	fff6fff6 	.word	0xfff6fff6
 8007058:	fff6fff6 	.word	0xfff6fff6
 800705c:	0036009f 	.word	0x0036009f
 8007060:	fff6007e 	.word	0xfff6007e
 8007064:	00b0fff6 	.word	0x00b0fff6
 8007068:	0036fff6 	.word	0x0036fff6
 800706c:	fff6fff6 	.word	0xfff6fff6
 8007070:	0082      	.short	0x0082
 8007072:	0025      	movs	r5, r4
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	3542      	adds	r5, #66	@ 0x42
 8007078:	1d11      	adds	r1, r2, #4
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	702b      	strb	r3, [r5, #0]
 8007080:	2301      	movs	r3, #1
 8007082:	e09e      	b.n	80071c2 <_printf_i+0x1be>
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	6809      	ldr	r1, [r1, #0]
 8007088:	1d02      	adds	r2, r0, #4
 800708a:	060d      	lsls	r5, r1, #24
 800708c:	d50b      	bpl.n	80070a6 <_printf_i+0xa2>
 800708e:	6806      	ldr	r6, [r0, #0]
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	2e00      	cmp	r6, #0
 8007094:	da03      	bge.n	800709e <_printf_i+0x9a>
 8007096:	232d      	movs	r3, #45	@ 0x2d
 8007098:	9a03      	ldr	r2, [sp, #12]
 800709a:	4276      	negs	r6, r6
 800709c:	7013      	strb	r3, [r2, #0]
 800709e:	4b5d      	ldr	r3, [pc, #372]	@ (8007214 <_printf_i+0x210>)
 80070a0:	270a      	movs	r7, #10
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	e018      	b.n	80070d8 <_printf_i+0xd4>
 80070a6:	6806      	ldr	r6, [r0, #0]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	0649      	lsls	r1, r1, #25
 80070ac:	d5f1      	bpl.n	8007092 <_printf_i+0x8e>
 80070ae:	b236      	sxth	r6, r6
 80070b0:	e7ef      	b.n	8007092 <_printf_i+0x8e>
 80070b2:	6808      	ldr	r0, [r1, #0]
 80070b4:	6819      	ldr	r1, [r3, #0]
 80070b6:	c940      	ldmia	r1!, {r6}
 80070b8:	0605      	lsls	r5, r0, #24
 80070ba:	d402      	bmi.n	80070c2 <_printf_i+0xbe>
 80070bc:	0640      	lsls	r0, r0, #25
 80070be:	d500      	bpl.n	80070c2 <_printf_i+0xbe>
 80070c0:	b2b6      	uxth	r6, r6
 80070c2:	6019      	str	r1, [r3, #0]
 80070c4:	4b53      	ldr	r3, [pc, #332]	@ (8007214 <_printf_i+0x210>)
 80070c6:	270a      	movs	r7, #10
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80070cc:	d100      	bne.n	80070d0 <_printf_i+0xcc>
 80070ce:	3f02      	subs	r7, #2
 80070d0:	0023      	movs	r3, r4
 80070d2:	2200      	movs	r2, #0
 80070d4:	3343      	adds	r3, #67	@ 0x43
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	60a3      	str	r3, [r4, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	db06      	blt.n	80070ee <_printf_i+0xea>
 80070e0:	2104      	movs	r1, #4
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	9d03      	ldr	r5, [sp, #12]
 80070e6:	438a      	bics	r2, r1
 80070e8:	6022      	str	r2, [r4, #0]
 80070ea:	4333      	orrs	r3, r6
 80070ec:	d00c      	beq.n	8007108 <_printf_i+0x104>
 80070ee:	9d03      	ldr	r5, [sp, #12]
 80070f0:	0030      	movs	r0, r6
 80070f2:	0039      	movs	r1, r7
 80070f4:	f7f9 f898 	bl	8000228 <__aeabi_uidivmod>
 80070f8:	9b04      	ldr	r3, [sp, #16]
 80070fa:	3d01      	subs	r5, #1
 80070fc:	5c5b      	ldrb	r3, [r3, r1]
 80070fe:	702b      	strb	r3, [r5, #0]
 8007100:	0033      	movs	r3, r6
 8007102:	0006      	movs	r6, r0
 8007104:	429f      	cmp	r7, r3
 8007106:	d9f3      	bls.n	80070f0 <_printf_i+0xec>
 8007108:	2f08      	cmp	r7, #8
 800710a:	d109      	bne.n	8007120 <_printf_i+0x11c>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	07db      	lsls	r3, r3, #31
 8007110:	d506      	bpl.n	8007120 <_printf_i+0x11c>
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	dc02      	bgt.n	8007120 <_printf_i+0x11c>
 800711a:	2330      	movs	r3, #48	@ 0x30
 800711c:	3d01      	subs	r5, #1
 800711e:	702b      	strb	r3, [r5, #0]
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	1b5b      	subs	r3, r3, r5
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	9b07      	ldr	r3, [sp, #28]
 8007128:	0021      	movs	r1, r4
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	9805      	ldr	r0, [sp, #20]
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	aa09      	add	r2, sp, #36	@ 0x24
 8007132:	f7ff fef7 	bl	8006f24 <_printf_common>
 8007136:	3001      	adds	r0, #1
 8007138:	d148      	bne.n	80071cc <_printf_i+0x1c8>
 800713a:	2001      	movs	r0, #1
 800713c:	4240      	negs	r0, r0
 800713e:	b00b      	add	sp, #44	@ 0x2c
 8007140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007142:	2220      	movs	r2, #32
 8007144:	6809      	ldr	r1, [r1, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	2278      	movs	r2, #120	@ 0x78
 800714c:	4932      	ldr	r1, [pc, #200]	@ (8007218 <_printf_i+0x214>)
 800714e:	9104      	str	r1, [sp, #16]
 8007150:	0021      	movs	r1, r4
 8007152:	3145      	adds	r1, #69	@ 0x45
 8007154:	700a      	strb	r2, [r1, #0]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	c940      	ldmia	r1!, {r6}
 800715c:	0610      	lsls	r0, r2, #24
 800715e:	d402      	bmi.n	8007166 <_printf_i+0x162>
 8007160:	0650      	lsls	r0, r2, #25
 8007162:	d500      	bpl.n	8007166 <_printf_i+0x162>
 8007164:	b2b6      	uxth	r6, r6
 8007166:	6019      	str	r1, [r3, #0]
 8007168:	07d3      	lsls	r3, r2, #31
 800716a:	d502      	bpl.n	8007172 <_printf_i+0x16e>
 800716c:	2320      	movs	r3, #32
 800716e:	4313      	orrs	r3, r2
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	2e00      	cmp	r6, #0
 8007174:	d001      	beq.n	800717a <_printf_i+0x176>
 8007176:	2710      	movs	r7, #16
 8007178:	e7aa      	b.n	80070d0 <_printf_i+0xcc>
 800717a:	2220      	movs	r2, #32
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	4393      	bics	r3, r2
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	e7f8      	b.n	8007176 <_printf_i+0x172>
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	680d      	ldr	r5, [r1, #0]
 8007188:	1d10      	adds	r0, r2, #4
 800718a:	6949      	ldr	r1, [r1, #20]
 800718c:	6018      	str	r0, [r3, #0]
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	062e      	lsls	r6, r5, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0x194>
 8007194:	6019      	str	r1, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0x19a>
 8007198:	066d      	lsls	r5, r5, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0x190>
 800719c:	8019      	strh	r1, [r3, #0]
 800719e:	2300      	movs	r3, #0
 80071a0:	9d03      	ldr	r5, [sp, #12]
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	e7bf      	b.n	8007126 <_printf_i+0x122>
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	1d11      	adds	r1, r2, #4
 80071aa:	6019      	str	r1, [r3, #0]
 80071ac:	6815      	ldr	r5, [r2, #0]
 80071ae:	2100      	movs	r1, #0
 80071b0:	0028      	movs	r0, r5
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	f000 f9bc 	bl	8007530 <memchr>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d001      	beq.n	80071c0 <_printf_i+0x1bc>
 80071bc:	1b40      	subs	r0, r0, r5
 80071be:	6060      	str	r0, [r4, #4]
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	2300      	movs	r3, #0
 80071c6:	9a03      	ldr	r2, [sp, #12]
 80071c8:	7013      	strb	r3, [r2, #0]
 80071ca:	e7ac      	b.n	8007126 <_printf_i+0x122>
 80071cc:	002a      	movs	r2, r5
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	9906      	ldr	r1, [sp, #24]
 80071d2:	9805      	ldr	r0, [sp, #20]
 80071d4:	9d07      	ldr	r5, [sp, #28]
 80071d6:	47a8      	blx	r5
 80071d8:	3001      	adds	r0, #1
 80071da:	d0ae      	beq.n	800713a <_printf_i+0x136>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	079b      	lsls	r3, r3, #30
 80071e0:	d415      	bmi.n	800720e <_printf_i+0x20a>
 80071e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e4:	68e0      	ldr	r0, [r4, #12]
 80071e6:	4298      	cmp	r0, r3
 80071e8:	daa9      	bge.n	800713e <_printf_i+0x13a>
 80071ea:	0018      	movs	r0, r3
 80071ec:	e7a7      	b.n	800713e <_printf_i+0x13a>
 80071ee:	0022      	movs	r2, r4
 80071f0:	2301      	movs	r3, #1
 80071f2:	9906      	ldr	r1, [sp, #24]
 80071f4:	9805      	ldr	r0, [sp, #20]
 80071f6:	9e07      	ldr	r6, [sp, #28]
 80071f8:	3219      	adds	r2, #25
 80071fa:	47b0      	blx	r6
 80071fc:	3001      	adds	r0, #1
 80071fe:	d09c      	beq.n	800713a <_printf_i+0x136>
 8007200:	3501      	adds	r5, #1
 8007202:	68e3      	ldr	r3, [r4, #12]
 8007204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	42ab      	cmp	r3, r5
 800720a:	dcf0      	bgt.n	80071ee <_printf_i+0x1ea>
 800720c:	e7e9      	b.n	80071e2 <_printf_i+0x1de>
 800720e:	2500      	movs	r5, #0
 8007210:	e7f7      	b.n	8007202 <_printf_i+0x1fe>
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	08007dde 	.word	0x08007dde
 8007218:	08007def 	.word	0x08007def

0800721c <__sflush_r>:
 800721c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800721e:	220c      	movs	r2, #12
 8007220:	5e8b      	ldrsh	r3, [r1, r2]
 8007222:	0005      	movs	r5, r0
 8007224:	000c      	movs	r4, r1
 8007226:	071a      	lsls	r2, r3, #28
 8007228:	d456      	bmi.n	80072d8 <__sflush_r+0xbc>
 800722a:	684a      	ldr	r2, [r1, #4]
 800722c:	2a00      	cmp	r2, #0
 800722e:	dc02      	bgt.n	8007236 <__sflush_r+0x1a>
 8007230:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007232:	2a00      	cmp	r2, #0
 8007234:	dd4e      	ble.n	80072d4 <__sflush_r+0xb8>
 8007236:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007238:	2f00      	cmp	r7, #0
 800723a:	d04b      	beq.n	80072d4 <__sflush_r+0xb8>
 800723c:	2200      	movs	r2, #0
 800723e:	2080      	movs	r0, #128	@ 0x80
 8007240:	682e      	ldr	r6, [r5, #0]
 8007242:	602a      	str	r2, [r5, #0]
 8007244:	001a      	movs	r2, r3
 8007246:	0140      	lsls	r0, r0, #5
 8007248:	6a21      	ldr	r1, [r4, #32]
 800724a:	4002      	ands	r2, r0
 800724c:	4203      	tst	r3, r0
 800724e:	d033      	beq.n	80072b8 <__sflush_r+0x9c>
 8007250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	075b      	lsls	r3, r3, #29
 8007256:	d506      	bpl.n	8007266 <__sflush_r+0x4a>
 8007258:	6863      	ldr	r3, [r4, #4]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <__sflush_r+0x4a>
 8007262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007264:	1ad2      	subs	r2, r2, r3
 8007266:	2300      	movs	r3, #0
 8007268:	0028      	movs	r0, r5
 800726a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	47b8      	blx	r7
 8007270:	89a2      	ldrh	r2, [r4, #12]
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	d106      	bne.n	8007284 <__sflush_r+0x68>
 8007276:	6829      	ldr	r1, [r5, #0]
 8007278:	291d      	cmp	r1, #29
 800727a:	d846      	bhi.n	800730a <__sflush_r+0xee>
 800727c:	4b29      	ldr	r3, [pc, #164]	@ (8007324 <__sflush_r+0x108>)
 800727e:	40cb      	lsrs	r3, r1
 8007280:	07db      	lsls	r3, r3, #31
 8007282:	d542      	bpl.n	800730a <__sflush_r+0xee>
 8007284:	2300      	movs	r3, #0
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	04d2      	lsls	r2, r2, #19
 800728e:	d505      	bpl.n	800729c <__sflush_r+0x80>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <__sflush_r+0x7e>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d100      	bne.n	800729c <__sflush_r+0x80>
 800729a:	6560      	str	r0, [r4, #84]	@ 0x54
 800729c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800729e:	602e      	str	r6, [r5, #0]
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d017      	beq.n	80072d4 <__sflush_r+0xb8>
 80072a4:	0023      	movs	r3, r4
 80072a6:	3344      	adds	r3, #68	@ 0x44
 80072a8:	4299      	cmp	r1, r3
 80072aa:	d002      	beq.n	80072b2 <__sflush_r+0x96>
 80072ac:	0028      	movs	r0, r5
 80072ae:	f7ff fbf9 	bl	8006aa4 <_free_r>
 80072b2:	2300      	movs	r3, #0
 80072b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80072b6:	e00d      	b.n	80072d4 <__sflush_r+0xb8>
 80072b8:	2301      	movs	r3, #1
 80072ba:	0028      	movs	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	0002      	movs	r2, r0
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d1c6      	bne.n	8007252 <__sflush_r+0x36>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0c3      	beq.n	8007252 <__sflush_r+0x36>
 80072ca:	2b1d      	cmp	r3, #29
 80072cc:	d001      	beq.n	80072d2 <__sflush_r+0xb6>
 80072ce:	2b16      	cmp	r3, #22
 80072d0:	d11a      	bne.n	8007308 <__sflush_r+0xec>
 80072d2:	602e      	str	r6, [r5, #0]
 80072d4:	2000      	movs	r0, #0
 80072d6:	e01e      	b.n	8007316 <__sflush_r+0xfa>
 80072d8:	690e      	ldr	r6, [r1, #16]
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d0fa      	beq.n	80072d4 <__sflush_r+0xb8>
 80072de:	680f      	ldr	r7, [r1, #0]
 80072e0:	600e      	str	r6, [r1, #0]
 80072e2:	1bba      	subs	r2, r7, r6
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	079b      	lsls	r3, r3, #30
 80072ea:	d100      	bne.n	80072ee <__sflush_r+0xd2>
 80072ec:	694a      	ldr	r2, [r1, #20]
 80072ee:	60a2      	str	r2, [r4, #8]
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	ddee      	ble.n	80072d4 <__sflush_r+0xb8>
 80072f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80072f8:	0032      	movs	r2, r6
 80072fa:	001f      	movs	r7, r3
 80072fc:	0028      	movs	r0, r5
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	6a21      	ldr	r1, [r4, #32]
 8007302:	47b8      	blx	r7
 8007304:	2800      	cmp	r0, #0
 8007306:	dc07      	bgt.n	8007318 <__sflush_r+0xfc>
 8007308:	89a2      	ldrh	r2, [r4, #12]
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	2001      	movs	r0, #1
 800730e:	4313      	orrs	r3, r2
 8007310:	b21b      	sxth	r3, r3
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4240      	negs	r0, r0
 8007316:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	1836      	adds	r6, r6, r0
 800731c:	1a1b      	subs	r3, r3, r0
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	e7e6      	b.n	80072f0 <__sflush_r+0xd4>
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	20400001 	.word	0x20400001

08007328 <_fflush_r>:
 8007328:	690b      	ldr	r3, [r1, #16]
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	0005      	movs	r5, r0
 800732e:	000c      	movs	r4, r1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <_fflush_r+0x12>
 8007334:	2500      	movs	r5, #0
 8007336:	0028      	movs	r0, r5
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	2800      	cmp	r0, #0
 800733c:	d004      	beq.n	8007348 <_fflush_r+0x20>
 800733e:	6a03      	ldr	r3, [r0, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <_fflush_r+0x20>
 8007344:	f7ff f990 	bl	8006668 <__sinit>
 8007348:	220c      	movs	r2, #12
 800734a:	5ea3      	ldrsh	r3, [r4, r2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f1      	beq.n	8007334 <_fflush_r+0xc>
 8007350:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007352:	07d2      	lsls	r2, r2, #31
 8007354:	d404      	bmi.n	8007360 <_fflush_r+0x38>
 8007356:	059b      	lsls	r3, r3, #22
 8007358:	d402      	bmi.n	8007360 <_fflush_r+0x38>
 800735a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800735c:	f7ff fb9f 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8007360:	0028      	movs	r0, r5
 8007362:	0021      	movs	r1, r4
 8007364:	f7ff ff5a 	bl	800721c <__sflush_r>
 8007368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800736a:	0005      	movs	r5, r0
 800736c:	07db      	lsls	r3, r3, #31
 800736e:	d4e2      	bmi.n	8007336 <_fflush_r+0xe>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	d4df      	bmi.n	8007336 <_fflush_r+0xe>
 8007376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007378:	f7ff fb92 	bl	8006aa0 <__retarget_lock_release_recursive>
 800737c:	e7db      	b.n	8007336 <_fflush_r+0xe>
	...

08007380 <__swhatbuf_r>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	000e      	movs	r6, r1
 8007384:	001d      	movs	r5, r3
 8007386:	230e      	movs	r3, #14
 8007388:	5ec9      	ldrsh	r1, [r1, r3]
 800738a:	0014      	movs	r4, r2
 800738c:	b096      	sub	sp, #88	@ 0x58
 800738e:	2900      	cmp	r1, #0
 8007390:	da0c      	bge.n	80073ac <__swhatbuf_r+0x2c>
 8007392:	89b2      	ldrh	r2, [r6, #12]
 8007394:	2380      	movs	r3, #128	@ 0x80
 8007396:	0011      	movs	r1, r2
 8007398:	4019      	ands	r1, r3
 800739a:	421a      	tst	r2, r3
 800739c:	d114      	bne.n	80073c8 <__swhatbuf_r+0x48>
 800739e:	2380      	movs	r3, #128	@ 0x80
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	2000      	movs	r0, #0
 80073a4:	6029      	str	r1, [r5, #0]
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	b016      	add	sp, #88	@ 0x58
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	466a      	mov	r2, sp
 80073ae:	f000 f889 	bl	80074c4 <_fstat_r>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	dbed      	blt.n	8007392 <__swhatbuf_r+0x12>
 80073b6:	23f0      	movs	r3, #240	@ 0xf0
 80073b8:	9901      	ldr	r1, [sp, #4]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	4019      	ands	r1, r3
 80073be:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <__swhatbuf_r+0x50>)
 80073c0:	18c9      	adds	r1, r1, r3
 80073c2:	424b      	negs	r3, r1
 80073c4:	4159      	adcs	r1, r3
 80073c6:	e7ea      	b.n	800739e <__swhatbuf_r+0x1e>
 80073c8:	2100      	movs	r1, #0
 80073ca:	2340      	movs	r3, #64	@ 0x40
 80073cc:	e7e9      	b.n	80073a2 <__swhatbuf_r+0x22>
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	ffffe000 	.word	0xffffe000

080073d4 <__smakebuf_r>:
 80073d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d6:	2602      	movs	r6, #2
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	0005      	movs	r5, r0
 80073dc:	000c      	movs	r4, r1
 80073de:	b085      	sub	sp, #20
 80073e0:	4233      	tst	r3, r6
 80073e2:	d007      	beq.n	80073f4 <__smakebuf_r+0x20>
 80073e4:	0023      	movs	r3, r4
 80073e6:	3347      	adds	r3, #71	@ 0x47
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	2301      	movs	r3, #1
 80073ee:	6163      	str	r3, [r4, #20]
 80073f0:	b005      	add	sp, #20
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f4:	ab03      	add	r3, sp, #12
 80073f6:	aa02      	add	r2, sp, #8
 80073f8:	f7ff ffc2 	bl	8007380 <__swhatbuf_r>
 80073fc:	9f02      	ldr	r7, [sp, #8]
 80073fe:	9001      	str	r0, [sp, #4]
 8007400:	0039      	movs	r1, r7
 8007402:	0028      	movs	r0, r5
 8007404:	f7ff fbba 	bl	8006b7c <_malloc_r>
 8007408:	2800      	cmp	r0, #0
 800740a:	d108      	bne.n	800741e <__smakebuf_r+0x4a>
 800740c:	220c      	movs	r2, #12
 800740e:	5ea3      	ldrsh	r3, [r4, r2]
 8007410:	059a      	lsls	r2, r3, #22
 8007412:	d4ed      	bmi.n	80073f0 <__smakebuf_r+0x1c>
 8007414:	2203      	movs	r2, #3
 8007416:	4393      	bics	r3, r2
 8007418:	431e      	orrs	r6, r3
 800741a:	81a6      	strh	r6, [r4, #12]
 800741c:	e7e2      	b.n	80073e4 <__smakebuf_r+0x10>
 800741e:	2380      	movs	r3, #128	@ 0x80
 8007420:	89a2      	ldrh	r2, [r4, #12]
 8007422:	6020      	str	r0, [r4, #0]
 8007424:	4313      	orrs	r3, r2
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	6120      	str	r0, [r4, #16]
 800742c:	6167      	str	r7, [r4, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00c      	beq.n	800744c <__smakebuf_r+0x78>
 8007432:	0028      	movs	r0, r5
 8007434:	230e      	movs	r3, #14
 8007436:	5ee1      	ldrsh	r1, [r4, r3]
 8007438:	f000 f856 	bl	80074e8 <_isatty_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	d005      	beq.n	800744c <__smakebuf_r+0x78>
 8007440:	2303      	movs	r3, #3
 8007442:	89a2      	ldrh	r2, [r4, #12]
 8007444:	439a      	bics	r2, r3
 8007446:	3b02      	subs	r3, #2
 8007448:	4313      	orrs	r3, r2
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	9a01      	ldr	r2, [sp, #4]
 8007450:	4313      	orrs	r3, r2
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	e7cc      	b.n	80073f0 <__smakebuf_r+0x1c>

08007456 <_putc_r>:
 8007456:	b570      	push	{r4, r5, r6, lr}
 8007458:	0006      	movs	r6, r0
 800745a:	000d      	movs	r5, r1
 800745c:	0014      	movs	r4, r2
 800745e:	2800      	cmp	r0, #0
 8007460:	d004      	beq.n	800746c <_putc_r+0x16>
 8007462:	6a03      	ldr	r3, [r0, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <_putc_r+0x16>
 8007468:	f7ff f8fe 	bl	8006668 <__sinit>
 800746c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800746e:	07db      	lsls	r3, r3, #31
 8007470:	d405      	bmi.n	800747e <_putc_r+0x28>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	059b      	lsls	r3, r3, #22
 8007476:	d402      	bmi.n	800747e <_putc_r+0x28>
 8007478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747a:	f7ff fb10 	bl	8006a9e <__retarget_lock_acquire_recursive>
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da05      	bge.n	8007494 <_putc_r+0x3e>
 8007488:	69a2      	ldr	r2, [r4, #24]
 800748a:	4293      	cmp	r3, r2
 800748c:	db12      	blt.n	80074b4 <_putc_r+0x5e>
 800748e:	b2eb      	uxtb	r3, r5
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d00f      	beq.n	80074b4 <_putc_r+0x5e>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	6022      	str	r2, [r4, #0]
 800749a:	701d      	strb	r5, [r3, #0]
 800749c:	b2ed      	uxtb	r5, r5
 800749e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074a0:	07db      	lsls	r3, r3, #31
 80074a2:	d405      	bmi.n	80074b0 <_putc_r+0x5a>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	059b      	lsls	r3, r3, #22
 80074a8:	d402      	bmi.n	80074b0 <_putc_r+0x5a>
 80074aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ac:	f7ff faf8 	bl	8006aa0 <__retarget_lock_release_recursive>
 80074b0:	0028      	movs	r0, r5
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	0029      	movs	r1, r5
 80074b6:	0022      	movs	r2, r4
 80074b8:	0030      	movs	r0, r6
 80074ba:	f7ff f9cf 	bl	800685c <__swbuf_r>
 80074be:	0005      	movs	r5, r0
 80074c0:	e7ed      	b.n	800749e <_putc_r+0x48>
	...

080074c4 <_fstat_r>:
 80074c4:	2300      	movs	r3, #0
 80074c6:	b570      	push	{r4, r5, r6, lr}
 80074c8:	4d06      	ldr	r5, [pc, #24]	@ (80074e4 <_fstat_r+0x20>)
 80074ca:	0004      	movs	r4, r0
 80074cc:	0008      	movs	r0, r1
 80074ce:	0011      	movs	r1, r2
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	f7fa f83a 	bl	800154a <_fstat>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d103      	bne.n	80074e2 <_fstat_r+0x1e>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d000      	beq.n	80074e2 <_fstat_r+0x1e>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	2000031c 	.word	0x2000031c

080074e8 <_isatty_r>:
 80074e8:	2300      	movs	r3, #0
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	4d06      	ldr	r5, [pc, #24]	@ (8007508 <_isatty_r+0x20>)
 80074ee:	0004      	movs	r4, r0
 80074f0:	0008      	movs	r0, r1
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f7fa f837 	bl	8001566 <_isatty>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d103      	bne.n	8007504 <_isatty_r+0x1c>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d000      	beq.n	8007504 <_isatty_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd70      	pop	{r4, r5, r6, pc}
 8007506:	46c0      	nop			@ (mov r8, r8)
 8007508:	2000031c 	.word	0x2000031c

0800750c <_sbrk_r>:
 800750c:	2300      	movs	r3, #0
 800750e:	b570      	push	{r4, r5, r6, lr}
 8007510:	4d06      	ldr	r5, [pc, #24]	@ (800752c <_sbrk_r+0x20>)
 8007512:	0004      	movs	r4, r0
 8007514:	0008      	movs	r0, r1
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7fa f83a 	bl	8001590 <_sbrk>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d103      	bne.n	8007528 <_sbrk_r+0x1c>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d000      	beq.n	8007528 <_sbrk_r+0x1c>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	46c0      	nop			@ (mov r8, r8)
 800752c:	2000031c 	.word	0x2000031c

08007530 <memchr>:
 8007530:	b2c9      	uxtb	r1, r1
 8007532:	1882      	adds	r2, r0, r2
 8007534:	4290      	cmp	r0, r2
 8007536:	d101      	bne.n	800753c <memchr+0xc>
 8007538:	2000      	movs	r0, #0
 800753a:	4770      	bx	lr
 800753c:	7803      	ldrb	r3, [r0, #0]
 800753e:	428b      	cmp	r3, r1
 8007540:	d0fb      	beq.n	800753a <memchr+0xa>
 8007542:	3001      	adds	r0, #1
 8007544:	e7f6      	b.n	8007534 <memchr+0x4>
	...

08007548 <_init>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr

08007554 <_fini>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	46c0      	nop			@ (mov r8, r8)
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr
